/**

Generated by the following Solidity interface...
```solidity
interface SafeModuleScript {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function setUp() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setUp",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SafeModuleScript {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b50611e048061002d5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630a9254e414610043578063c040622614610045578063f8ccbf471461004d575b5f5ffd5b005b610043610074565b600c546100609062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100df573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101039190610e8f565b60405163ce817d4760e01b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b158015610150575f5ffd5b505af1158015610162573d5f5f3e3d5ffd5b505060405163350d56bf60e01b815260206004820152600f60248201526e29a2a92b24a1a2afa6a0a720a3a2a960891b60448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa1580156101d5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101f99190610eba565b90505f6102046106ea565b60405163c1978d1f60e01b815260206004820152600e60248201526d14d0519157d512149154d213d31160921b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa158015610275573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102999190610e8f565b60405163350d56bf60e01b815260206004820152601560248201527429a0a322afa320a6262120a1a5afa420a7222622a960591b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610311573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103359190610eba565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156103a7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103cb9190610edc565b15610419576103db8484846108d8565b9050610414604051806040016040528060158152602001742232b83637bcb2b2103732bb9029b0b3329030ba1d60591b815250826109e0565b6104f1565b60405163350d56bf60e01b81526020600482015260156024820152744558495354494e475f534146455f4144445245535360581b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa15801561048c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104b09190610eba565b90506104f16040518060400160405280601781526020017f5573696e67206578697374696e6720536166652061743a000000000000000000815250826109e0565b5f818660405161050090610e82565b6001600160a01b03928316815291166020820152604001604051809103905ff080158015610530573d5f5f3e3d5ffd5b5090506105726040518060400160405280601781526020017f4465706c6f79656420536166654d6f64756c652061743a000000000000000000815250826109e0565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156105df573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106039190610edc565b1561065057816106138183610a29565b61064a60405180604001604052806016815260200175456e61626c6564206d6f64756c65206f6e205361666560501b815250610af2565b50610671565b610671604051806060016040528060358152602001611d9a60359139610af2565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156106cb575f5ffd5b505af11580156106dd573d5f5f3e3d5ffd5b5050505050505050505050565b60405163f877cb1960e01b815260206004820152600b60248201526a534146455f4f574e45525360a81b60448201526060905f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb19906064015f60405180830381865afa158015610757573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261077e9190810190610f62565b90505f6107a482604051806040016040528060018152602001600b60fa1b815250610b38565b90505f815167ffffffffffffffff8111156107c1576107c1610efb565b6040519080825280602002602001820160405280156107ea578160200160208202803683370190505b5090505f5b82518110156108d0577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663c6ce059d84838151811061083b5761083b610ff3565b60200260200101516040518263ffffffff1660e01b815260040161085f9190611032565b602060405180830381865afa15801561087a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061089e9190610eba565b8282815181106108b0576108b0610ff3565b6001600160a01b03909216602092830291909101909101526001016107ef565b509392505050565b6040515f907341675c099f32341bf84bfc5382af534df5c7461a90734e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec6790839063b63e800d60e01b9061092e908990899085908a90829081908190602401611044565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051631688f0b960e01b81529091505f906001600160a01b03841690631688f0b990610994908790869086906004016110fe565b6020604051808303815f875af11580156109b0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d49190610eba565b98975050505050505050565b610a2582826040516024016109f6929190611131565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610cd7565b5050565b604080516001600160a01b038381166024808401919091528351808403909101815260449092019092526020810180516001600160e01b031663610b592560e01b179052908316636a761202845f84818080808080610a8789610ce0565b6040518b63ffffffff1660e01b8152600401610aac9a9998979695949392919061115a565b6020604051808303815f875af1158015610ac8573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aec9190610edc565b50505050565b610b3581604051602401610b069190611032565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610cd7565b50565b606060015f5b8451811015610baa57835f81518110610b5957610b59610ff3565b602001015160f81c60f81b6001600160f81b031916858281518110610b8057610b80610ff3565b01602001516001600160f81b03191603610ba25781610b9e81611213565b9250505b600101610b3e565b505f8167ffffffffffffffff811115610bc557610bc5610efb565b604051908082528060200260200182016040528015610bf857816020015b6060815260200190600190039081610be35790505b505f9250905081805b8651811015610ca257855f81518110610c1c57610c1c610ff3565b602001015160f81c60f81b6001600160f81b031916878281518110610c4357610c43610ff3565b01602001516001600160f81b03191603610c9a57610c62878383610da2565b838581518110610c7457610c74610ff3565b6020908102919091010152610c8a81600161122b565b915083610c9681611213565b9450505b600101610c01565b50610caf86828851610da2565b828481518110610cc157610cc1610ff3565b6020908102919091010152509150505b92915050565b610b3581610e63565b60605f826001600160a01b031663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa158015610d1e573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d45919081019061123e565b5f81518110610d5657610d56610ff3565b602090810291909101810151604080516001600160a01b038316938101939093525f90830152600160f81b60608301529150606101604051602081830303815290604052915050919050565b6060835f610db085856112f2565b67ffffffffffffffff811115610dc857610dc8610efb565b6040519080825280601f01601f191660200182016040528015610df2576020820181803683370190505b509050845b84811015610e5957828181518110610e1157610e11610ff3565b01602001516001600160f81b03191682610e2b88846112f2565b81518110610e3b57610e3b610ff3565b60200101906001600160f81b03191690815f1a905350600101610df7565b5095945050505050565b5f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b610a948061130683390190565b5f60208284031215610e9f575f5ffd5b5051919050565b6001600160a01b0381168114610b35575f5ffd5b5f60208284031215610eca575f5ffd5b8151610ed581610ea6565b9392505050565b5f60208284031215610eec575f5ffd5b81518015158114610ed5575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f3857610f38610efb565b604052919050565b5f5b83811015610f5a578181015183820152602001610f42565b50505f910152565b5f60208284031215610f72575f5ffd5b815167ffffffffffffffff811115610f88575f5ffd5b8201601f81018413610f98575f5ffd5b805167ffffffffffffffff811115610fb257610fb2610efb565b610fc5601f8201601f1916602001610f0f565b818152856020838501011115610fd9575f5ffd5b610fea826020830160208601610f40565b95945050505050565b634e487b7160e01b5f52603260045260245ffd5b5f815180845261101e816020860160208601610f40565b601f01601f19169290920160200192915050565b602081525f610ed56020830184611007565b61010080825288519082018190525f9060208a0190610120840190835b818110156110885783516001600160a01b0316835260209384019390920191600101611061565b50508960208501526110a5604085018a6001600160a01b03169052565b83810360608501525f81526001600160a01b038816608085015260200191506110cb9050565b6001600160a01b03851660a083015260ff841660c08301526001600160a01b03831660e083015298975050505050505050565b6001600160a01b03841681526060602082018190525f9061112190830185611007565b9050826040830152949350505050565b604081525f6111436040830185611007565b905060018060a01b03831660208301529392505050565b60018060a01b038b16815289602082015261014060408201525f61118261014083018b611007565b60028a1061119e57634e487b7160e01b5f52602160045260245ffd5b8960608401528860808401528760a08401528660c08401526111cb60e08401876001600160a01b03169052565b6001600160a01b0385166101008401528281036101208401526111ee8185611007565b9d9c50505050505050505050505050565b634e487b7160e01b5f52601160045260245ffd5b5f60018201611224576112246111ff565b5060010190565b80820180821115610cd157610cd16111ff565b5f6020828403121561124e575f5ffd5b815167ffffffffffffffff811115611264575f5ffd5b8201601f81018413611274575f5ffd5b805167ffffffffffffffff81111561128e5761128e610efb565b8060051b61129e60208201610f0f565b918252602081840181019290810190878411156112b9575f5ffd5b6020850194505b838510156112e757845192506112d583610ea6565b828252602094850194909101906112c0565b979650505050505050565b81810381811115610cd157610cd16111ff56fe60a060405234801561000f575f5ffd5b50604051610a94380380610a9483398101604081905261002e916100d7565b6001600160a01b03808216608052821661008e5760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420736166652061646472657373000000000000000000000000604482015260640160405180910390fd5b505f80546001600160a01b039092166001600160a01b03199283161790556001805490911633179055610108565b80516001600160a01b03811681146100d2575f5ffd5b919050565b5f5f604083850312156100e8575f5ffd5b6100f1836100bc565b91506100ff602084016100bc565b90509250929050565b60805161096e6101265f395f818160ea01526101d4015261096e5ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c8063761de19f11610058578063761de19f146100e55780638da5cb5b1461010c5780639aa9fda51461011f578063a71f8da014610132575f5ffd5b8063186f03541461007e578063216a3e9a146100ad57806363710c05146100d0575b5f5ffd5b5f54610090906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c06100bb366004610534565b610145565b60405190151581526020016100a4565b6100e36100de366004610572565b61027b565b005b6100907f000000000000000000000000000000000000000000000000000000000000000081565b600154610090906001600160a01b031681565b6100e361012d366004610534565b6102ff565b6100c0610140366004610572565b610333565b5f8061015183806105e3565b60405161015f92919061062d565b604051809103902090505f6101c0826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018290525f90605c01604051602081830303815290604052805190602001209050919050565b9050630b135d3f60e11b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631626ba7e8361020760208901896105e3565b6040518463ffffffff1660e01b815260040161022593929190610664565b602060405180830381865afa158015610240573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102649190610686565b6001600160e01b0319918216911614949350505050565b81816102878282610333565b6102a457604051638baa579f60e01b815260040160405180910390fd5b5f5b63ffffffff81168411156102f8576102e685858363ffffffff168181106102cf576102cf6106ad565b90506020028101906102e191906106c1565b6103fa565b806102f0816106df565b9150506102a6565b5050505050565b8061030981610145565b61032657604051638baa579f60e01b815260040160405180910390fd5b61032f826103fa565b5050565b5f805b63ffffffff81168311156103ee573063216a3e9a858563ffffffff8516818110610362576103626106ad565b905060200281019061037491906106c1565b6040518263ffffffff1660e01b81526004016103909190610751565b602060405180830381865afa1580156103ab573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103cf91906107a6565b6103dc575f9150506103f4565b806103e6816106df565b915050610336565b50600190505b92915050565b5f808061040784806105e3565b81019061041491906107d9565b919450925090506001600160a01b03831661046f5760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b60448201526064015b60405180910390fd5b5f805460405163468721a760e01b81526001600160a01b039091169063468721a7906104a59087908790879087906004016108d2565b6020604051808303815f875af11580156104c1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e591906107a6565b9050806102f85760405162461bcd60e51b815260206004820152601960248201527f4d6f64756c65207472616e73616374696f6e206661696c6564000000000000006044820152606401610466565b5f60208284031215610544575f5ffd5b813567ffffffffffffffff81111561055a575f5ffd5b82016040818503121561056b575f5ffd5b9392505050565b5f5f60208385031215610583575f5ffd5b823567ffffffffffffffff811115610599575f5ffd5b8301601f810185136105a9575f5ffd5b803567ffffffffffffffff8111156105bf575f5ffd5b8560208260051b84010111156105d3575f5ffd5b6020919091019590945092505050565b5f5f8335601e198436030181126105f8575f5ffd5b83018035915067ffffffffffffffff821115610612575f5ffd5b602001915036819003821315610626575f5ffd5b9250929050565b818382375f9101908152919050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b838152604060208201525f61067d60408301848661063c565b95945050505050565b5f60208284031215610696575f5ffd5b81516001600160e01b03198116811461056b575f5ffd5b634e487b7160e01b5f52603260045260245ffd5b5f8235603e198336030181126106d5575f5ffd5b9190910192915050565b5f63ffffffff821663ffffffff810361070657634e487b7160e01b5f52601160045260245ffd5b60010192915050565b5f5f8335601e19843603018112610724575f5ffd5b830160208101925035905067ffffffffffffffff811115610743575f5ffd5b803603821315610626575f5ffd5b602081525f610760838461070f565b6040602085015261077560608501828461063c565b915050610785602085018561070f565b848303601f1901604086015261079c83828461063c565b9695505050505050565b5f602082840312156107b6575f5ffd5b8151801515811461056b575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b5f5f5f606084860312156107eb575f5ffd5b83356001600160a01b0381168114610801575f5ffd5b925060208401359150604084013567ffffffffffffffff811115610823575f5ffd5b8401601f81018613610833575f5ffd5b803567ffffffffffffffff81111561084d5761084d6107c5565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561087c5761087c6107c5565b604052818152828201602001881015610893575f5ffd5b816020840160208301375f602083830101528093505050509250925092565b600281106108ce57634e487b7160e01b5f52602160045260245ffd5b9052565b60018060a01b0385168152836020820152608060408201525f83518060808401525f5b8181101561091257602081870181015160a08684010152016108f5565b505f60a0828501015260a0601f19601f83011684010191505061067d60608301846108b256fea2646970667358221220609c4615ff27663e1ecd6b881b3e1ebd2aa8f44db9b93c910969590559d1796364736f6c634300081c0033506c6561736520656e61626c6520746865206d6f64756c65206d616e75616c6c79207468726f756768207468652053616665205549a2646970667358221220907b4bdfb070e37063997d5c9b83c28167712a8504072f931fda9edd92aae6e464736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa\x1E\x04\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0CW\x80c\xC0@b&\x14a\0EW\x80c\xF8\xCC\xBFG\x14a\0MW[__\xFD[\0[a\0Ca\0tV[`\x0CTa\0`\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xDFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x03\x91\x90a\x0E\x8FV[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01PW__\xFD[PZ\xF1\x15\x80\x15a\x01bW=__>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01Rn)\xA2\xA9+$\xA1\xA2\xAF\xA6\xA0\xA7 \xA3\xA2\xA9`\x89\x1B`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xD5W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xF9\x91\x90a\x0E\xBAV[\x90P_a\x02\x04a\x06\xEAV[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rm\x14\xD0Q\x91W\xD5\x12\x14\x91T\xD2\x13\xD3\x11`\x92\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02uW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x99\x91\x90a\x0E\x8FV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt)\xA0\xA3\"\xAF\xA3 \xA6&! \xA1\xA5\xAF\xA4 \xA7\"&\"\xA9`Y\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x11W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x035\x91\x90a\x0E\xBAV[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xA7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xCB\x91\x90a\x0E\xDCV[\x15a\x04\x19Wa\x03\xDB\x84\x84\x84a\x08\xD8V[\x90Pa\x04\x14`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\"2\xB867\xBC\xB2\xB2\x1072\xBB\x90)\xB0\xB32\x900\xBA\x1D`Y\x1B\x81RP\x82a\t\xE0V[a\x04\xF1V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01RtEXISTING_SAFE_ADDRESS`X\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x8CW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xB0\x91\x90a\x0E\xBAV[\x90Pa\x04\xF1`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7FUsing existing Safe at:\0\0\0\0\0\0\0\0\0\x81RP\x82a\t\xE0V[_\x81\x86`@Qa\x05\0\x90a\x0E\x82V[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x16` \x82\x01R`@\x01`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x050W=__>=_\xFD[P\x90Pa\x05r`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7FDeployed SafeModule at:\0\0\0\0\0\0\0\0\0\x81RP\x82a\t\xE0V[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xDFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x03\x91\x90a\x0E\xDCV[\x15a\x06PW\x81a\x06\x13\x81\x83a\n)V[a\x06J`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01uEnabled module on Safe`P\x1B\x81RPa\n\xF2V[Pa\x06qV[a\x06q`@Q\x80``\x01`@R\x80`5\x81R` \x01a\x1D\x9A`5\x919a\n\xF2V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xCBW__\xFD[PZ\xF1\x15\x80\x15a\x06\xDDW=__>=_\xFD[PPPPPPPPPPPV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjSAFE_OWNERS`\xA8\x1B`D\x82\x01R``\x90_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07WW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07~\x91\x90\x81\x01\x90a\x0FbV[\x90P_a\x07\xA4\x82`@Q\x80`@\x01`@R\x80`\x01\x81R` \x01`\x0B`\xFA\x1B\x81RPa\x0B8V[\x90P_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xC1Wa\x07\xC1a\x0E\xFBV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x07\xEAW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82Q\x81\x10\x15a\x08\xD0W\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xC6\xCE\x05\x9D\x84\x83\x81Q\x81\x10a\x08;Wa\x08;a\x0F\xF3V[` \x02` \x01\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08_\x91\x90a\x102V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08zW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x9E\x91\x90a\x0E\xBAV[\x82\x82\x81Q\x81\x10a\x08\xB0Wa\x08\xB0a\x0F\xF3V[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R`\x01\x01a\x07\xEFV[P\x93\x92PPPV[`@Q_\x90sAg\\\t\x9F24\x1B\xF8K\xFCS\x82\xAFSM\xF5\xC7F\x1A\x90sN\x1D\xCFz\xD4\xE4`\xCF\xD3\x07\x91\xCC\xC4\xF9\xC8\xA4\xF8 \xECg\x90\x83\x90c\xB6>\x80\r`\xE0\x1B\x90a\t.\x90\x89\x90\x89\x90\x85\x90\x8A\x90\x82\x90\x81\x90\x81\x90`$\x01a\x10DV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qc\x16\x88\xF0\xB9`\xE0\x1B\x81R\x90\x91P_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c\x16\x88\xF0\xB9\x90a\t\x94\x90\x87\x90\x86\x90\x86\x90`\x04\x01a\x10\xFEV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t\xB0W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xD4\x91\x90a\x0E\xBAV[\x98\x97PPPPPPPPV[a\n%\x82\x82`@Q`$\x01a\t\xF6\x92\x91\x90a\x111V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0C\xD7V[PPV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x80\x84\x01\x91\x90\x91R\x83Q\x80\x84\x03\x90\x91\x01\x81R`D\x90\x92\x01\x90\x92R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16ca\x0BY%`\xE0\x1B\x17\x90R\x90\x83\x16cjv\x12\x02\x84_\x84\x81\x80\x80\x80\x80\x80a\n\x87\x89a\x0C\xE0V[`@Q\x8Bc\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\xAC\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x11ZV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\n\xC8W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xEC\x91\x90a\x0E\xDCV[PPPPV[a\x0B5\x81`@Q`$\x01a\x0B\x06\x91\x90a\x102V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x0C\xD7V[PV[```\x01_[\x84Q\x81\x10\x15a\x0B\xAAW\x83_\x81Q\x81\x10a\x0BYWa\x0BYa\x0F\xF3V[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\x01`\x01`\xF8\x1B\x03\x19\x16\x85\x82\x81Q\x81\x10a\x0B\x80Wa\x0B\x80a\x0F\xF3V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x03a\x0B\xA2W\x81a\x0B\x9E\x81a\x12\x13V[\x92PP[`\x01\x01a\x0B>V[P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\xC5Wa\x0B\xC5a\x0E\xFBV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0B\xF8W\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0B\xE3W\x90P[P_\x92P\x90P\x81\x80[\x86Q\x81\x10\x15a\x0C\xA2W\x85_\x81Q\x81\x10a\x0C\x1CWa\x0C\x1Ca\x0F\xF3V[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\x01`\x01`\xF8\x1B\x03\x19\x16\x87\x82\x81Q\x81\x10a\x0CCWa\x0CCa\x0F\xF3V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x03a\x0C\x9AWa\x0Cb\x87\x83\x83a\r\xA2V[\x83\x85\x81Q\x81\x10a\x0CtWa\x0Cta\x0F\xF3V[` \x90\x81\x02\x91\x90\x91\x01\x01Ra\x0C\x8A\x81`\x01a\x12+V[\x91P\x83a\x0C\x96\x81a\x12\x13V[\x94PP[`\x01\x01a\x0C\x01V[Pa\x0C\xAF\x86\x82\x88Qa\r\xA2V[\x82\x84\x81Q\x81\x10a\x0C\xC1Wa\x0C\xC1a\x0F\xF3V[` \x90\x81\x02\x91\x90\x91\x01\x01RP\x91PP[\x92\x91PPV[a\x0B5\x81a\x0EcV[``_\x82`\x01`\x01`\xA0\x1B\x03\x16c\xA0\xE6~+`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\x1EW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\rE\x91\x90\x81\x01\x90a\x12>V[_\x81Q\x81\x10a\rVWa\rVa\x0F\xF3V[` \x90\x81\x02\x91\x90\x91\x01\x81\x01Q`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x93\x81\x01\x93\x90\x93R_\x90\x83\x01R`\x01`\xF8\x1B``\x83\x01R\x91P`a\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x91\x90PV[``\x83_a\r\xB0\x85\x85a\x12\xF2V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xC8Wa\r\xC8a\x0E\xFBV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\r\xF2W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x84[\x84\x81\x10\x15a\x0EYW\x82\x81\x81Q\x81\x10a\x0E\x11Wa\x0E\x11a\x0F\xF3V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x82a\x0E+\x88\x84a\x12\xF2V[\x81Q\x81\x10a\x0E;Wa\x0E;a\x0F\xF3V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x01\x01a\r\xF7V[P\x95\x94PPPPPV[_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[a\n\x94\x80a\x13\x06\x839\x01\x90V[_` \x82\x84\x03\x12\x15a\x0E\x9FW__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0B5W__\xFD[_` \x82\x84\x03\x12\x15a\x0E\xCAW__\xFD[\x81Qa\x0E\xD5\x81a\x0E\xA6V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0E\xECW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0E\xD5W__\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0F8Wa\x0F8a\x0E\xFBV[`@R\x91\x90PV[_[\x83\x81\x10\x15a\x0FZW\x81\x81\x01Q\x83\x82\x01R` \x01a\x0FBV[PP_\x91\x01RV[_` \x82\x84\x03\x12\x15a\x0FrW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\x88W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0F\x98W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xB2Wa\x0F\xB2a\x0E\xFBV[a\x0F\xC5`\x1F\x82\x01`\x1F\x19\x16` \x01a\x0F\x0FV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x0F\xD9W__\xFD[a\x0F\xEA\x82` \x83\x01` \x86\x01a\x0F@V[\x95\x94PPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x81Q\x80\x84Ra\x10\x1E\x81` \x86\x01` \x86\x01a\x0F@V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x0E\xD5` \x83\x01\x84a\x10\x07V[a\x01\0\x80\x82R\x88Q\x90\x82\x01\x81\x90R_\x90` \x8A\x01\x90a\x01 \x84\x01\x90\x83[\x81\x81\x10\x15a\x10\x88W\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x10aV[PP\x89` \x85\x01Ra\x10\xA5`@\x85\x01\x8A`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x83\x81\x03``\x85\x01R_\x81R`\x01`\x01`\xA0\x1B\x03\x88\x16`\x80\x85\x01R` \x01\x91Pa\x10\xCB\x90PV[`\x01`\x01`\xA0\x1B\x03\x85\x16`\xA0\x83\x01R`\xFF\x84\x16`\xC0\x83\x01R`\x01`\x01`\xA0\x1B\x03\x83\x16`\xE0\x83\x01R\x98\x97PPPPPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R``` \x82\x01\x81\x90R_\x90a\x11!\x90\x83\x01\x85a\x10\x07V[\x90P\x82`@\x83\x01R\x94\x93PPPPV[`@\x81R_a\x11C`@\x83\x01\x85a\x10\x07V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`\x01\x80`\xA0\x1B\x03\x8B\x16\x81R\x89` \x82\x01Ra\x01@`@\x82\x01R_a\x11\x82a\x01@\x83\x01\x8Ba\x10\x07V[`\x02\x8A\x10a\x11\x9EWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x89``\x84\x01R\x88`\x80\x84\x01R\x87`\xA0\x84\x01R\x86`\xC0\x84\x01Ra\x11\xCB`\xE0\x84\x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x90RV[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x01\0\x84\x01R\x82\x81\x03a\x01 \x84\x01Ra\x11\xEE\x81\x85a\x10\x07V[\x9D\x9CPPPPPPPPPPPPPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_`\x01\x82\x01a\x12$Wa\x12$a\x11\xFFV[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\x0C\xD1Wa\x0C\xD1a\x11\xFFV[_` \x82\x84\x03\x12\x15a\x12NW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12dW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x12tW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\x8EWa\x12\x8Ea\x0E\xFBV[\x80`\x05\x1Ba\x12\x9E` \x82\x01a\x0F\x0FV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x12\xB9W__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\x12\xE7W\x84Q\x92Pa\x12\xD5\x83a\x0E\xA6V[\x82\x82R` \x94\x85\x01\x94\x90\x91\x01\x90a\x12\xC0V[\x97\x96PPPPPPPV[\x81\x81\x03\x81\x81\x11\x15a\x0C\xD1Wa\x0C\xD1a\x11\xFFV\xFE`\xA0`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\n\x948\x03\x80a\n\x94\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xD7V[`\x01`\x01`\xA0\x1B\x03\x80\x82\x16`\x80R\x82\x16a\0\x8EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FInvalid safe address\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[P_\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x01`\x01`\xA0\x1B\x03\x19\x92\x83\x16\x17\x90U`\x01\x80T\x90\x91\x163\x17\x90Ua\x01\x08V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xD2W__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\0\xE8W__\xFD[a\0\xF1\x83a\0\xBCV[\x91Pa\0\xFF` \x84\x01a\0\xBCV[\x90P\x92P\x92\x90PV[`\x80Qa\tna\x01&_9_\x81\x81`\xEA\x01Ra\x01\xD4\x01Ra\tn_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80cv\x1D\xE1\x9F\x11a\0XW\x80cv\x1D\xE1\x9F\x14a\0\xE5W\x80c\x8D\xA5\xCB[\x14a\x01\x0CW\x80c\x9A\xA9\xFD\xA5\x14a\x01\x1FW\x80c\xA7\x1F\x8D\xA0\x14a\x012W__\xFD[\x80c\x18o\x03T\x14a\0~W\x80c!j>\x9A\x14a\0\xADW\x80ccq\x0C\x05\x14a\0\xD0W[__\xFD[_Ta\0\x90\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xC0a\0\xBB6`\x04a\x054V[a\x01EV[`@Q\x90\x15\x15\x81R` \x01a\0\xA4V[a\0\xE3a\0\xDE6`\x04a\x05rV[a\x02{V[\0[a\0\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`\x01Ta\0\x90\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\xE3a\x01-6`\x04a\x054V[a\x02\xFFV[a\0\xC0a\x01@6`\x04a\x05rV[a\x033V[_\x80a\x01Q\x83\x80a\x05\xE3V[`@Qa\x01_\x92\x91\x90a\x06-V[`@Q\x80\x91\x03\x90 \x90P_a\x01\xC0\x82`@Q\x7F\x19Ethereum Signed Message:\n32\0\0\0\0` \x82\x01R`<\x81\x01\x82\x90R_\x90`\\\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x90Pc\x0B\x13]?`\xE1\x1B`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16c\x16&\xBA~\x83a\x02\x07` \x89\x01\x89a\x05\xE3V[`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02%\x93\x92\x91\x90a\x06dV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02@W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02d\x91\x90a\x06\x86V[`\x01`\x01`\xE0\x1B\x03\x19\x91\x82\x16\x91\x16\x14\x94\x93PPPPV[\x81\x81a\x02\x87\x82\x82a\x033V[a\x02\xA4W`@Qc\x8B\xAAW\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[c\xFF\xFF\xFF\xFF\x81\x16\x84\x11\x15a\x02\xF8Wa\x02\xE6\x85\x85\x83c\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x02\xCFWa\x02\xCFa\x06\xADV[\x90P` \x02\x81\x01\x90a\x02\xE1\x91\x90a\x06\xC1V[a\x03\xFAV[\x80a\x02\xF0\x81a\x06\xDFV[\x91PPa\x02\xA6V[PPPPPV[\x80a\x03\t\x81a\x01EV[a\x03&W`@Qc\x8B\xAAW\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x03/\x82a\x03\xFAV[PPV[_\x80[c\xFF\xFF\xFF\xFF\x81\x16\x83\x11\x15a\x03\xEEW0c!j>\x9A\x85\x85c\xFF\xFF\xFF\xFF\x85\x16\x81\x81\x10a\x03bWa\x03ba\x06\xADV[\x90P` \x02\x81\x01\x90a\x03t\x91\x90a\x06\xC1V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\x90\x91\x90a\x07QV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xABW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xCF\x91\x90a\x07\xA6V[a\x03\xDCW_\x91PPa\x03\xF4V[\x80a\x03\xE6\x81a\x06\xDFV[\x91PPa\x036V[P`\x01\x90P[\x92\x91PPV[_\x80\x80a\x04\x07\x84\x80a\x05\xE3V[\x81\x01\x90a\x04\x14\x91\x90a\x07\xD9V[\x91\x94P\x92P\x90P`\x01`\x01`\xA0\x1B\x03\x83\x16a\x04oW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01RuInvalid target address`P\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_\x80T`@QcF\x87!\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cF\x87!\xA7\x90a\x04\xA5\x90\x87\x90\x87\x90\x87\x90\x87\x90`\x04\x01a\x08\xD2V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04\xC1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xE5\x91\x90a\x07\xA6V[\x90P\x80a\x02\xF8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FModule transaction failed\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04fV[_` \x82\x84\x03\x12\x15a\x05DW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05ZW__\xFD[\x82\x01`@\x81\x85\x03\x12\x15a\x05kW__\xFD[\x93\x92PPPV[__` \x83\x85\x03\x12\x15a\x05\x83W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x99W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x05\xA9W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\xBFW__\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15a\x05\xD3W__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x05\xF8W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x06\x12W__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x06&W__\xFD[\x92P\x92\x90PV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[\x83\x81R`@` \x82\x01R_a\x06}`@\x83\x01\x84\x86a\x06<V[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a\x06\x96W__\xFD[\x81Q`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x05kW__\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x825`>\x19\x836\x03\x01\x81\x12a\x06\xD5W__\xFD[\x91\x90\x91\x01\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16c\xFF\xFF\xFF\xFF\x81\x03a\x07\x06WcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[`\x01\x01\x92\x91PPV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x07$W__\xFD[\x83\x01` \x81\x01\x92P5\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07CW__\xFD[\x806\x03\x82\x13\x15a\x06&W__\xFD[` \x81R_a\x07`\x83\x84a\x07\x0FV[`@` \x85\x01Ra\x07u``\x85\x01\x82\x84a\x06<V[\x91PPa\x07\x85` \x85\x01\x85a\x07\x0FV[\x84\x83\x03`\x1F\x19\x01`@\x86\x01Ra\x07\x9C\x83\x82\x84a\x06<V[\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x07\xB6W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x05kW__\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[___``\x84\x86\x03\x12\x15a\x07\xEBW__\xFD[\x835`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08\x01W__\xFD[\x92P` \x84\x015\x91P`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08#W__\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x083W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08MWa\x08Ma\x07\xC5V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x08|Wa\x08|a\x07\xC5V[`@R\x81\x81R\x82\x82\x01` \x01\x88\x10\x15a\x08\x93W__\xFD[\x81` \x84\x01` \x83\x017_` \x83\x83\x01\x01R\x80\x93PPPP\x92P\x92P\x92V[`\x02\x81\x10a\x08\xCEWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[`\x01\x80`\xA0\x1B\x03\x85\x16\x81R\x83` \x82\x01R`\x80`@\x82\x01R_\x83Q\x80`\x80\x84\x01R_[\x81\x81\x10\x15a\t\x12W` \x81\x87\x01\x81\x01Q`\xA0\x86\x84\x01\x01R\x01a\x08\xF5V[P_`\xA0\x82\x85\x01\x01R`\xA0`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PPa\x06}``\x83\x01\x84a\x08\xB2V\xFE\xA2dipfsX\"\x12 `\x9CF\x15\xFF'f>\x1E\xCDk\x88\x1B>\x1E\xBD*\xA8\xF4M\xB9\xB9<\x91\tiY\x05Y\xD1ycdsolcC\0\x08\x1C\x003Please enable the module manually through the Safe UI\xA2dipfsX\"\x12 \x90{K\xDF\xB0p\xE3pc\x99}\\\x9B\x83\xC2\x81gq*\x85\x04\x07/\x93\x1F\xDA\x9E\xDD\x92\xAA\xE6\xE4dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630a9254e414610043578063c040622614610045578063f8ccbf471461004d575b5f5ffd5b005b610043610074565b600c546100609062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100df573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101039190610e8f565b60405163ce817d4760e01b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b158015610150575f5ffd5b505af1158015610162573d5f5f3e3d5ffd5b505060405163350d56bf60e01b815260206004820152600f60248201526e29a2a92b24a1a2afa6a0a720a3a2a960891b60448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa1580156101d5573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101f99190610eba565b90505f6102046106ea565b60405163c1978d1f60e01b815260206004820152600e60248201526d14d0519157d512149154d213d31160921b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa158015610275573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102999190610e8f565b60405163350d56bf60e01b815260206004820152601560248201527429a0a322afa320a6262120a1a5afa420a7222622a960591b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610311573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103359190610eba565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156103a7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103cb9190610edc565b15610419576103db8484846108d8565b9050610414604051806040016040528060158152602001742232b83637bcb2b2103732bb9029b0b3329030ba1d60591b815250826109e0565b6104f1565b60405163350d56bf60e01b81526020600482015260156024820152744558495354494e475f534146455f4144445245535360581b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa15801561048c573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104b09190610eba565b90506104f16040518060400160405280601781526020017f5573696e67206578697374696e6720536166652061743a000000000000000000815250826109e0565b5f818660405161050090610e82565b6001600160a01b03928316815291166020820152604001604051809103905ff080158015610530573d5f5f3e3d5ffd5b5090506105726040518060400160405280601781526020017f4465706c6f79656420536166654d6f64756c652061743a000000000000000000815250826109e0565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156105df573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106039190610edc565b1561065057816106138183610a29565b61064a60405180604001604052806016815260200175456e61626c6564206d6f64756c65206f6e205361666560501b815250610af2565b50610671565b610671604051806060016040528060358152602001611d9a60359139610af2565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156106cb575f5ffd5b505af11580156106dd573d5f5f3e3d5ffd5b5050505050505050505050565b60405163f877cb1960e01b815260206004820152600b60248201526a534146455f4f574e45525360a81b60448201526060905f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb19906064015f60405180830381865afa158015610757573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261077e9190810190610f62565b90505f6107a482604051806040016040528060018152602001600b60fa1b815250610b38565b90505f815167ffffffffffffffff8111156107c1576107c1610efb565b6040519080825280602002602001820160405280156107ea578160200160208202803683370190505b5090505f5b82518110156108d0577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663c6ce059d84838151811061083b5761083b610ff3565b60200260200101516040518263ffffffff1660e01b815260040161085f9190611032565b602060405180830381865afa15801561087a573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061089e9190610eba565b8282815181106108b0576108b0610ff3565b6001600160a01b03909216602092830291909101909101526001016107ef565b509392505050565b6040515f907341675c099f32341bf84bfc5382af534df5c7461a90734e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec6790839063b63e800d60e01b9061092e908990899085908a90829081908190602401611044565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051631688f0b960e01b81529091505f906001600160a01b03841690631688f0b990610994908790869086906004016110fe565b6020604051808303815f875af11580156109b0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109d49190610eba565b98975050505050505050565b610a2582826040516024016109f6929190611131565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610cd7565b5050565b604080516001600160a01b038381166024808401919091528351808403909101815260449092019092526020810180516001600160e01b031663610b592560e01b179052908316636a761202845f84818080808080610a8789610ce0565b6040518b63ffffffff1660e01b8152600401610aac9a9998979695949392919061115a565b6020604051808303815f875af1158015610ac8573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aec9190610edc565b50505050565b610b3581604051602401610b069190611032565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610cd7565b50565b606060015f5b8451811015610baa57835f81518110610b5957610b59610ff3565b602001015160f81c60f81b6001600160f81b031916858281518110610b8057610b80610ff3565b01602001516001600160f81b03191603610ba25781610b9e81611213565b9250505b600101610b3e565b505f8167ffffffffffffffff811115610bc557610bc5610efb565b604051908082528060200260200182016040528015610bf857816020015b6060815260200190600190039081610be35790505b505f9250905081805b8651811015610ca257855f81518110610c1c57610c1c610ff3565b602001015160f81c60f81b6001600160f81b031916878281518110610c4357610c43610ff3565b01602001516001600160f81b03191603610c9a57610c62878383610da2565b838581518110610c7457610c74610ff3565b6020908102919091010152610c8a81600161122b565b915083610c9681611213565b9450505b600101610c01565b50610caf86828851610da2565b828481518110610cc157610cc1610ff3565b6020908102919091010152509150505b92915050565b610b3581610e63565b60605f826001600160a01b031663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa158015610d1e573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610d45919081019061123e565b5f81518110610d5657610d56610ff3565b602090810291909101810151604080516001600160a01b038316938101939093525f90830152600160f81b60608301529150606101604051602081830303815290604052915050919050565b6060835f610db085856112f2565b67ffffffffffffffff811115610dc857610dc8610efb565b6040519080825280601f01601f191660200182016040528015610df2576020820181803683370190505b509050845b84811015610e5957828181518110610e1157610e11610ff3565b01602001516001600160f81b03191682610e2b88846112f2565b81518110610e3b57610e3b610ff3565b60200101906001600160f81b03191690815f1a905350600101610df7565b5095945050505050565b5f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b610a948061130683390190565b5f60208284031215610e9f575f5ffd5b5051919050565b6001600160a01b0381168114610b35575f5ffd5b5f60208284031215610eca575f5ffd5b8151610ed581610ea6565b9392505050565b5f60208284031215610eec575f5ffd5b81518015158114610ed5575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610f3857610f38610efb565b604052919050565b5f5b83811015610f5a578181015183820152602001610f42565b50505f910152565b5f60208284031215610f72575f5ffd5b815167ffffffffffffffff811115610f88575f5ffd5b8201601f81018413610f98575f5ffd5b805167ffffffffffffffff811115610fb257610fb2610efb565b610fc5601f8201601f1916602001610f0f565b818152856020838501011115610fd9575f5ffd5b610fea826020830160208601610f40565b95945050505050565b634e487b7160e01b5f52603260045260245ffd5b5f815180845261101e816020860160208601610f40565b601f01601f19169290920160200192915050565b602081525f610ed56020830184611007565b61010080825288519082018190525f9060208a0190610120840190835b818110156110885783516001600160a01b0316835260209384019390920191600101611061565b50508960208501526110a5604085018a6001600160a01b03169052565b83810360608501525f81526001600160a01b038816608085015260200191506110cb9050565b6001600160a01b03851660a083015260ff841660c08301526001600160a01b03831660e083015298975050505050505050565b6001600160a01b03841681526060602082018190525f9061112190830185611007565b9050826040830152949350505050565b604081525f6111436040830185611007565b905060018060a01b03831660208301529392505050565b60018060a01b038b16815289602082015261014060408201525f61118261014083018b611007565b60028a1061119e57634e487b7160e01b5f52602160045260245ffd5b8960608401528860808401528760a08401528660c08401526111cb60e08401876001600160a01b03169052565b6001600160a01b0385166101008401528281036101208401526111ee8185611007565b9d9c50505050505050505050505050565b634e487b7160e01b5f52601160045260245ffd5b5f60018201611224576112246111ff565b5060010190565b80820180821115610cd157610cd16111ff565b5f6020828403121561124e575f5ffd5b815167ffffffffffffffff811115611264575f5ffd5b8201601f81018413611274575f5ffd5b805167ffffffffffffffff81111561128e5761128e610efb565b8060051b61129e60208201610f0f565b918252602081840181019290810190878411156112b9575f5ffd5b6020850194505b838510156112e757845192506112d583610ea6565b828252602094850194909101906112c0565b979650505050505050565b81810381811115610cd157610cd16111ff56fe60a060405234801561000f575f5ffd5b50604051610a94380380610a9483398101604081905261002e916100d7565b6001600160a01b03808216608052821661008e5760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420736166652061646472657373000000000000000000000000604482015260640160405180910390fd5b505f80546001600160a01b039092166001600160a01b03199283161790556001805490911633179055610108565b80516001600160a01b03811681146100d2575f5ffd5b919050565b5f5f604083850312156100e8575f5ffd5b6100f1836100bc565b91506100ff602084016100bc565b90509250929050565b60805161096e6101265f395f818160ea01526101d4015261096e5ff3fe608060405234801561000f575f5ffd5b506004361061007a575f3560e01c8063761de19f11610058578063761de19f146100e55780638da5cb5b1461010c5780639aa9fda51461011f578063a71f8da014610132575f5ffd5b8063186f03541461007e578063216a3e9a146100ad57806363710c05146100d0575b5f5ffd5b5f54610090906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c06100bb366004610534565b610145565b60405190151581526020016100a4565b6100e36100de366004610572565b61027b565b005b6100907f000000000000000000000000000000000000000000000000000000000000000081565b600154610090906001600160a01b031681565b6100e361012d366004610534565b6102ff565b6100c0610140366004610572565b610333565b5f8061015183806105e3565b60405161015f92919061062d565b604051809103902090505f6101c0826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018290525f90605c01604051602081830303815290604052805190602001209050919050565b9050630b135d3f60e11b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631626ba7e8361020760208901896105e3565b6040518463ffffffff1660e01b815260040161022593929190610664565b602060405180830381865afa158015610240573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102649190610686565b6001600160e01b0319918216911614949350505050565b81816102878282610333565b6102a457604051638baa579f60e01b815260040160405180910390fd5b5f5b63ffffffff81168411156102f8576102e685858363ffffffff168181106102cf576102cf6106ad565b90506020028101906102e191906106c1565b6103fa565b806102f0816106df565b9150506102a6565b5050505050565b8061030981610145565b61032657604051638baa579f60e01b815260040160405180910390fd5b61032f826103fa565b5050565b5f805b63ffffffff81168311156103ee573063216a3e9a858563ffffffff8516818110610362576103626106ad565b905060200281019061037491906106c1565b6040518263ffffffff1660e01b81526004016103909190610751565b602060405180830381865afa1580156103ab573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103cf91906107a6565b6103dc575f9150506103f4565b806103e6816106df565b915050610336565b50600190505b92915050565b5f808061040784806105e3565b81019061041491906107d9565b919450925090506001600160a01b03831661046f5760405162461bcd60e51b8152602060048201526016602482015275496e76616c696420746172676574206164647265737360501b60448201526064015b60405180910390fd5b5f805460405163468721a760e01b81526001600160a01b039091169063468721a7906104a59087908790879087906004016108d2565b6020604051808303815f875af11580156104c1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104e591906107a6565b9050806102f85760405162461bcd60e51b815260206004820152601960248201527f4d6f64756c65207472616e73616374696f6e206661696c6564000000000000006044820152606401610466565b5f60208284031215610544575f5ffd5b813567ffffffffffffffff81111561055a575f5ffd5b82016040818503121561056b575f5ffd5b9392505050565b5f5f60208385031215610583575f5ffd5b823567ffffffffffffffff811115610599575f5ffd5b8301601f810185136105a9575f5ffd5b803567ffffffffffffffff8111156105bf575f5ffd5b8560208260051b84010111156105d3575f5ffd5b6020919091019590945092505050565b5f5f8335601e198436030181126105f8575f5ffd5b83018035915067ffffffffffffffff821115610612575f5ffd5b602001915036819003821315610626575f5ffd5b9250929050565b818382375f9101908152919050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b838152604060208201525f61067d60408301848661063c565b95945050505050565b5f60208284031215610696575f5ffd5b81516001600160e01b03198116811461056b575f5ffd5b634e487b7160e01b5f52603260045260245ffd5b5f8235603e198336030181126106d5575f5ffd5b9190910192915050565b5f63ffffffff821663ffffffff810361070657634e487b7160e01b5f52601160045260245ffd5b60010192915050565b5f5f8335601e19843603018112610724575f5ffd5b830160208101925035905067ffffffffffffffff811115610743575f5ffd5b803603821315610626575f5ffd5b602081525f610760838461070f565b6040602085015261077560608501828461063c565b915050610785602085018561070f565b848303601f1901604086015261079c83828461063c565b9695505050505050565b5f602082840312156107b6575f5ffd5b8151801515811461056b575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b5f5f5f606084860312156107eb575f5ffd5b83356001600160a01b0381168114610801575f5ffd5b925060208401359150604084013567ffffffffffffffff811115610823575f5ffd5b8401601f81018613610833575f5ffd5b803567ffffffffffffffff81111561084d5761084d6107c5565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561087c5761087c6107c5565b604052818152828201602001881015610893575f5ffd5b816020840160208301375f602083830101528093505050509250925092565b600281106108ce57634e487b7160e01b5f52602160045260245ffd5b9052565b60018060a01b0385168152836020820152608060408201525f83518060808401525f5b8181101561091257602081870181015160a08684010152016108f5565b505f60a0828501015260a0601f19601f83011684010191505061067d60608301846108b256fea2646970667358221220609c4615ff27663e1ecd6b881b3e1ebd2aa8f44db9b93c910969590559d1796364736f6c634300081c0033506c6561736520656e61626c6520746865206d6f64756c65206d616e75616c6c79207468726f756768207468652053616665205549a2646970667358221220907b4bdfb070e37063997d5c9b83c28167712a8504072f931fda9edd92aae6e464736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0CW\x80c\xC0@b&\x14a\0EW\x80c\xF8\xCC\xBFG\x14a\0MW[__\xFD[\0[a\0Ca\0tV[`\x0CTa\0`\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xDFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x03\x91\x90a\x0E\x8FV[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01PW__\xFD[PZ\xF1\x15\x80\x15a\x01bW=__>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01Rn)\xA2\xA9+$\xA1\xA2\xAF\xA6\xA0\xA7 \xA3\xA2\xA9`\x89\x1B`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xD5W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xF9\x91\x90a\x0E\xBAV[\x90P_a\x02\x04a\x06\xEAV[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rm\x14\xD0Q\x91W\xD5\x12\x14\x91T\xD2\x13\xD3\x11`\x92\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02uW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x99\x91\x90a\x0E\x8FV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt)\xA0\xA3\"\xAF\xA3 \xA6&! \xA1\xA5\xAF\xA4 \xA7\"&\"\xA9`Y\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x11W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x035\x91\x90a\x0E\xBAV[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xA7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xCB\x91\x90a\x0E\xDCV[\x15a\x04\x19Wa\x03\xDB\x84\x84\x84a\x08\xD8V[\x90Pa\x04\x14`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\"2\xB867\xBC\xB2\xB2\x1072\xBB\x90)\xB0\xB32\x900\xBA\x1D`Y\x1B\x81RP\x82a\t\xE0V[a\x04\xF1V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01RtEXISTING_SAFE_ADDRESS`X\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x8CW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xB0\x91\x90a\x0E\xBAV[\x90Pa\x04\xF1`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7FUsing existing Safe at:\0\0\0\0\0\0\0\0\0\x81RP\x82a\t\xE0V[_\x81\x86`@Qa\x05\0\x90a\x0E\x82V[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x16` \x82\x01R`@\x01`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x050W=__>=_\xFD[P\x90Pa\x05r`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7FDeployed SafeModule at:\0\0\0\0\0\0\0\0\0\x81RP\x82a\t\xE0V[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xDFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x03\x91\x90a\x0E\xDCV[\x15a\x06PW\x81a\x06\x13\x81\x83a\n)V[a\x06J`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01uEnabled module on Safe`P\x1B\x81RPa\n\xF2V[Pa\x06qV[a\x06q`@Q\x80``\x01`@R\x80`5\x81R` \x01a\x1D\x9A`5\x919a\n\xF2V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xCBW__\xFD[PZ\xF1\x15\x80\x15a\x06\xDDW=__>=_\xFD[PPPPPPPPPPPV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjSAFE_OWNERS`\xA8\x1B`D\x82\x01R``\x90_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07WW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07~\x91\x90\x81\x01\x90a\x0FbV[\x90P_a\x07\xA4\x82`@Q\x80`@\x01`@R\x80`\x01\x81R` \x01`\x0B`\xFA\x1B\x81RPa\x0B8V[\x90P_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xC1Wa\x07\xC1a\x0E\xFBV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x07\xEAW\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82Q\x81\x10\x15a\x08\xD0W\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xC6\xCE\x05\x9D\x84\x83\x81Q\x81\x10a\x08;Wa\x08;a\x0F\xF3V[` \x02` \x01\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08_\x91\x90a\x102V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08zW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x9E\x91\x90a\x0E\xBAV[\x82\x82\x81Q\x81\x10a\x08\xB0Wa\x08\xB0a\x0F\xF3V[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R`\x01\x01a\x07\xEFV[P\x93\x92PPPV[`@Q_\x90sAg\\\t\x9F24\x1B\xF8K\xFCS\x82\xAFSM\xF5\xC7F\x1A\x90sN\x1D\xCFz\xD4\xE4`\xCF\xD3\x07\x91\xCC\xC4\xF9\xC8\xA4\xF8 \xECg\x90\x83\x90c\xB6>\x80\r`\xE0\x1B\x90a\t.\x90\x89\x90\x89\x90\x85\x90\x8A\x90\x82\x90\x81\x90\x81\x90`$\x01a\x10DV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qc\x16\x88\xF0\xB9`\xE0\x1B\x81R\x90\x91P_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c\x16\x88\xF0\xB9\x90a\t\x94\x90\x87\x90\x86\x90\x86\x90`\x04\x01a\x10\xFEV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t\xB0W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xD4\x91\x90a\x0E\xBAV[\x98\x97PPPPPPPPV[a\n%\x82\x82`@Q`$\x01a\t\xF6\x92\x91\x90a\x111V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0C\xD7V[PPV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x80\x84\x01\x91\x90\x91R\x83Q\x80\x84\x03\x90\x91\x01\x81R`D\x90\x92\x01\x90\x92R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16ca\x0BY%`\xE0\x1B\x17\x90R\x90\x83\x16cjv\x12\x02\x84_\x84\x81\x80\x80\x80\x80\x80a\n\x87\x89a\x0C\xE0V[`@Q\x8Bc\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\xAC\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x11ZV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\n\xC8W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xEC\x91\x90a\x0E\xDCV[PPPPV[a\x0B5\x81`@Q`$\x01a\x0B\x06\x91\x90a\x102V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x0C\xD7V[PV[```\x01_[\x84Q\x81\x10\x15a\x0B\xAAW\x83_\x81Q\x81\x10a\x0BYWa\x0BYa\x0F\xF3V[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\x01`\x01`\xF8\x1B\x03\x19\x16\x85\x82\x81Q\x81\x10a\x0B\x80Wa\x0B\x80a\x0F\xF3V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x03a\x0B\xA2W\x81a\x0B\x9E\x81a\x12\x13V[\x92PP[`\x01\x01a\x0B>V[P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\xC5Wa\x0B\xC5a\x0E\xFBV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0B\xF8W\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0B\xE3W\x90P[P_\x92P\x90P\x81\x80[\x86Q\x81\x10\x15a\x0C\xA2W\x85_\x81Q\x81\x10a\x0C\x1CWa\x0C\x1Ca\x0F\xF3V[` \x01\x01Q`\xF8\x1C`\xF8\x1B`\x01`\x01`\xF8\x1B\x03\x19\x16\x87\x82\x81Q\x81\x10a\x0CCWa\x0CCa\x0F\xF3V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x03a\x0C\x9AWa\x0Cb\x87\x83\x83a\r\xA2V[\x83\x85\x81Q\x81\x10a\x0CtWa\x0Cta\x0F\xF3V[` \x90\x81\x02\x91\x90\x91\x01\x01Ra\x0C\x8A\x81`\x01a\x12+V[\x91P\x83a\x0C\x96\x81a\x12\x13V[\x94PP[`\x01\x01a\x0C\x01V[Pa\x0C\xAF\x86\x82\x88Qa\r\xA2V[\x82\x84\x81Q\x81\x10a\x0C\xC1Wa\x0C\xC1a\x0F\xF3V[` \x90\x81\x02\x91\x90\x91\x01\x01RP\x91PP[\x92\x91PPV[a\x0B5\x81a\x0EcV[``_\x82`\x01`\x01`\xA0\x1B\x03\x16c\xA0\xE6~+`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\x1EW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\rE\x91\x90\x81\x01\x90a\x12>V[_\x81Q\x81\x10a\rVWa\rVa\x0F\xF3V[` \x90\x81\x02\x91\x90\x91\x01\x81\x01Q`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x93\x81\x01\x93\x90\x93R_\x90\x83\x01R`\x01`\xF8\x1B``\x83\x01R\x91P`a\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x91\x90PV[``\x83_a\r\xB0\x85\x85a\x12\xF2V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xC8Wa\r\xC8a\x0E\xFBV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\r\xF2W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x84[\x84\x81\x10\x15a\x0EYW\x82\x81\x81Q\x81\x10a\x0E\x11Wa\x0E\x11a\x0F\xF3V[\x01` \x01Q`\x01`\x01`\xF8\x1B\x03\x19\x16\x82a\x0E+\x88\x84a\x12\xF2V[\x81Q\x81\x10a\x0E;Wa\x0E;a\x0F\xF3V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x01\x01a\r\xF7V[P\x95\x94PPPPPV[_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[a\n\x94\x80a\x13\x06\x839\x01\x90V[_` \x82\x84\x03\x12\x15a\x0E\x9FW__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0B5W__\xFD[_` \x82\x84\x03\x12\x15a\x0E\xCAW__\xFD[\x81Qa\x0E\xD5\x81a\x0E\xA6V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0E\xECW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0E\xD5W__\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0F8Wa\x0F8a\x0E\xFBV[`@R\x91\x90PV[_[\x83\x81\x10\x15a\x0FZW\x81\x81\x01Q\x83\x82\x01R` \x01a\x0FBV[PP_\x91\x01RV[_` \x82\x84\x03\x12\x15a\x0FrW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\x88W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0F\x98W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xB2Wa\x0F\xB2a\x0E\xFBV[a\x0F\xC5`\x1F\x82\x01`\x1F\x19\x16` \x01a\x0F\x0FV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x0F\xD9W__\xFD[a\x0F\xEA\x82` \x83\x01` \x86\x01a\x0F@V[\x95\x94PPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x81Q\x80\x84Ra\x10\x1E\x81` \x86\x01` \x86\x01a\x0F@V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x0E\xD5` \x83\x01\x84a\x10\x07V[a\x01\0\x80\x82R\x88Q\x90\x82\x01\x81\x90R_\x90` \x8A\x01\x90a\x01 \x84\x01\x90\x83[\x81\x81\x10\x15a\x10\x88W\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x10aV[PP\x89` \x85\x01Ra\x10\xA5`@\x85\x01\x8A`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x83\x81\x03``\x85\x01R_\x81R`\x01`\x01`\xA0\x1B\x03\x88\x16`\x80\x85\x01R` \x01\x91Pa\x10\xCB\x90PV[`\x01`\x01`\xA0\x1B\x03\x85\x16`\xA0\x83\x01R`\xFF\x84\x16`\xC0\x83\x01R`\x01`\x01`\xA0\x1B\x03\x83\x16`\xE0\x83\x01R\x98\x97PPPPPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R``` \x82\x01\x81\x90R_\x90a\x11!\x90\x83\x01\x85a\x10\x07V[\x90P\x82`@\x83\x01R\x94\x93PPPPV[`@\x81R_a\x11C`@\x83\x01\x85a\x10\x07V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`\x01\x80`\xA0\x1B\x03\x8B\x16\x81R\x89` \x82\x01Ra\x01@`@\x82\x01R_a\x11\x82a\x01@\x83\x01\x8Ba\x10\x07V[`\x02\x8A\x10a\x11\x9EWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x89``\x84\x01R\x88`\x80\x84\x01R\x87`\xA0\x84\x01R\x86`\xC0\x84\x01Ra\x11\xCB`\xE0\x84\x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x90RV[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x01\0\x84\x01R\x82\x81\x03a\x01 \x84\x01Ra\x11\xEE\x81\x85a\x10\x07V[\x9D\x9CPPPPPPPPPPPPPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_`\x01\x82\x01a\x12$Wa\x12$a\x11\xFFV[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\x0C\xD1Wa\x0C\xD1a\x11\xFFV[_` \x82\x84\x03\x12\x15a\x12NW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12dW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x12tW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\x8EWa\x12\x8Ea\x0E\xFBV[\x80`\x05\x1Ba\x12\x9E` \x82\x01a\x0F\x0FV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x12\xB9W__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\x12\xE7W\x84Q\x92Pa\x12\xD5\x83a\x0E\xA6V[\x82\x82R` \x94\x85\x01\x94\x90\x91\x01\x90a\x12\xC0V[\x97\x96PPPPPPPV[\x81\x81\x03\x81\x81\x11\x15a\x0C\xD1Wa\x0C\xD1a\x11\xFFV\xFE`\xA0`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\n\x948\x03\x80a\n\x94\x839\x81\x01`@\x81\x90Ra\0.\x91a\0\xD7V[`\x01`\x01`\xA0\x1B\x03\x80\x82\x16`\x80R\x82\x16a\0\x8EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FInvalid safe address\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[P_\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x01`\x01`\xA0\x1B\x03\x19\x92\x83\x16\x17\x90U`\x01\x80T\x90\x91\x163\x17\x90Ua\x01\x08V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xD2W__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\0\xE8W__\xFD[a\0\xF1\x83a\0\xBCV[\x91Pa\0\xFF` \x84\x01a\0\xBCV[\x90P\x92P\x92\x90PV[`\x80Qa\tna\x01&_9_\x81\x81`\xEA\x01Ra\x01\xD4\x01Ra\tn_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0zW_5`\xE0\x1C\x80cv\x1D\xE1\x9F\x11a\0XW\x80cv\x1D\xE1\x9F\x14a\0\xE5W\x80c\x8D\xA5\xCB[\x14a\x01\x0CW\x80c\x9A\xA9\xFD\xA5\x14a\x01\x1FW\x80c\xA7\x1F\x8D\xA0\x14a\x012W__\xFD[\x80c\x18o\x03T\x14a\0~W\x80c!j>\x9A\x14a\0\xADW\x80ccq\x0C\x05\x14a\0\xD0W[__\xFD[_Ta\0\x90\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xC0a\0\xBB6`\x04a\x054V[a\x01EV[`@Q\x90\x15\x15\x81R` \x01a\0\xA4V[a\0\xE3a\0\xDE6`\x04a\x05rV[a\x02{V[\0[a\0\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`\x01Ta\0\x90\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\0\xE3a\x01-6`\x04a\x054V[a\x02\xFFV[a\0\xC0a\x01@6`\x04a\x05rV[a\x033V[_\x80a\x01Q\x83\x80a\x05\xE3V[`@Qa\x01_\x92\x91\x90a\x06-V[`@Q\x80\x91\x03\x90 \x90P_a\x01\xC0\x82`@Q\x7F\x19Ethereum Signed Message:\n32\0\0\0\0` \x82\x01R`<\x81\x01\x82\x90R_\x90`\\\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x90Pc\x0B\x13]?`\xE1\x1B`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16c\x16&\xBA~\x83a\x02\x07` \x89\x01\x89a\x05\xE3V[`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x02%\x93\x92\x91\x90a\x06dV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02@W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02d\x91\x90a\x06\x86V[`\x01`\x01`\xE0\x1B\x03\x19\x91\x82\x16\x91\x16\x14\x94\x93PPPPV[\x81\x81a\x02\x87\x82\x82a\x033V[a\x02\xA4W`@Qc\x8B\xAAW\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[c\xFF\xFF\xFF\xFF\x81\x16\x84\x11\x15a\x02\xF8Wa\x02\xE6\x85\x85\x83c\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x02\xCFWa\x02\xCFa\x06\xADV[\x90P` \x02\x81\x01\x90a\x02\xE1\x91\x90a\x06\xC1V[a\x03\xFAV[\x80a\x02\xF0\x81a\x06\xDFV[\x91PPa\x02\xA6V[PPPPPV[\x80a\x03\t\x81a\x01EV[a\x03&W`@Qc\x8B\xAAW\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\x03/\x82a\x03\xFAV[PPV[_\x80[c\xFF\xFF\xFF\xFF\x81\x16\x83\x11\x15a\x03\xEEW0c!j>\x9A\x85\x85c\xFF\xFF\xFF\xFF\x85\x16\x81\x81\x10a\x03bWa\x03ba\x06\xADV[\x90P` \x02\x81\x01\x90a\x03t\x91\x90a\x06\xC1V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\x90\x91\x90a\x07QV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xABW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xCF\x91\x90a\x07\xA6V[a\x03\xDCW_\x91PPa\x03\xF4V[\x80a\x03\xE6\x81a\x06\xDFV[\x91PPa\x036V[P`\x01\x90P[\x92\x91PPV[_\x80\x80a\x04\x07\x84\x80a\x05\xE3V[\x81\x01\x90a\x04\x14\x91\x90a\x07\xD9V[\x91\x94P\x92P\x90P`\x01`\x01`\xA0\x1B\x03\x83\x16a\x04oW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01RuInvalid target address`P\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_\x80T`@QcF\x87!\xA7`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cF\x87!\xA7\x90a\x04\xA5\x90\x87\x90\x87\x90\x87\x90\x87\x90`\x04\x01a\x08\xD2V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04\xC1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xE5\x91\x90a\x07\xA6V[\x90P\x80a\x02\xF8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FModule transaction failed\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x04fV[_` \x82\x84\x03\x12\x15a\x05DW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05ZW__\xFD[\x82\x01`@\x81\x85\x03\x12\x15a\x05kW__\xFD[\x93\x92PPPV[__` \x83\x85\x03\x12\x15a\x05\x83W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x99W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x05\xA9W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\xBFW__\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15a\x05\xD3W__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x05\xF8W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x06\x12W__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x06&W__\xFD[\x92P\x92\x90PV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[\x83\x81R`@` \x82\x01R_a\x06}`@\x83\x01\x84\x86a\x06<V[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a\x06\x96W__\xFD[\x81Q`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x05kW__\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x825`>\x19\x836\x03\x01\x81\x12a\x06\xD5W__\xFD[\x91\x90\x91\x01\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16c\xFF\xFF\xFF\xFF\x81\x03a\x07\x06WcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[`\x01\x01\x92\x91PPV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x07$W__\xFD[\x83\x01` \x81\x01\x92P5\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07CW__\xFD[\x806\x03\x82\x13\x15a\x06&W__\xFD[` \x81R_a\x07`\x83\x84a\x07\x0FV[`@` \x85\x01Ra\x07u``\x85\x01\x82\x84a\x06<V[\x91PPa\x07\x85` \x85\x01\x85a\x07\x0FV[\x84\x83\x03`\x1F\x19\x01`@\x86\x01Ra\x07\x9C\x83\x82\x84a\x06<V[\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x07\xB6W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x05kW__\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[___``\x84\x86\x03\x12\x15a\x07\xEBW__\xFD[\x835`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x08\x01W__\xFD[\x92P` \x84\x015\x91P`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08#W__\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x083W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08MWa\x08Ma\x07\xC5V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x08|Wa\x08|a\x07\xC5V[`@R\x81\x81R\x82\x82\x01` \x01\x88\x10\x15a\x08\x93W__\xFD[\x81` \x84\x01` \x83\x017_` \x83\x83\x01\x01R\x80\x93PPPP\x92P\x92P\x92V[`\x02\x81\x10a\x08\xCEWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[`\x01\x80`\xA0\x1B\x03\x85\x16\x81R\x83` \x82\x01R`\x80`@\x82\x01R_\x83Q\x80`\x80\x84\x01R_[\x81\x81\x10\x15a\t\x12W` \x81\x87\x01\x81\x01Q`\xA0\x86\x84\x01\x01R\x01a\x08\xF5V[P_`\xA0\x82\x85\x01\x01R`\xA0`\x1F\x19`\x1F\x83\x01\x16\x84\x01\x01\x91PPa\x06}``\x83\x01\x84a\x08\xB2V\xFE\xA2dipfsX\"\x12 `\x9CF\x15\xFF'f>\x1E\xCDk\x88\x1B>\x1E\xBD*\xA8\xF4M\xB9\xB9<\x91\tiY\x05Y\xD1ycdsolcC\0\x08\x1C\x003Please enable the module manually through the Safe UI\xA2dipfsX\"\x12 \x90{K\xDF\xB0p\xE3pc\x99}\\\x9B\x83\xC2\x81gq*\x85\x04\x07/\x93\x1F\xDA\x9E\xDD\x92\xAA\xE6\xE4dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setUp()` and selector `0x0a9254e4`.
```solidity
function setUp() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpCall {}
    ///Container type for the return parameters of the [`setUp()`](setUpCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpCall> for UnderlyingRustTuple<'_> {
                fn from(value: setUpCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setUpReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUpCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUpReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUp()";
            const SELECTOR: [u8; 4] = [10u8, 146u8, 84u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SafeModuleScript`](self) function calls.
    pub enum SafeModuleScriptCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
        setUp(setUpCall),
    }
    #[automatically_derived]
    impl SafeModuleScriptCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 146u8, 84u8, 228u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SafeModuleScriptCalls {
        const NAME: &'static str = "SafeModuleScriptCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setUp(_) => <setUpCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SafeModuleScriptCalls>] = &[
                {
                    fn setUp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeModuleScriptCalls> {
                        <setUpCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SafeModuleScriptCalls::setUp)
                    }
                    setUp
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeModuleScriptCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SafeModuleScriptCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeModuleScriptCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SafeModuleScriptCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SafeModuleScript`](self) contract instance.

See the [wrapper's documentation](`SafeModuleScriptInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SafeModuleScriptInstance<T, P, N> {
        SafeModuleScriptInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SafeModuleScriptInstance<T, P, N>>,
    > {
        SafeModuleScriptInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SafeModuleScriptInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SafeModuleScript`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SafeModuleScript`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SafeModuleScriptInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SafeModuleScriptInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SafeModuleScriptInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SafeModuleScriptInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SafeModuleScript`](self) contract instance.

See the [wrapper's documentation](`SafeModuleScriptInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SafeModuleScriptInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SafeModuleScriptInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SafeModuleScriptInstance<T, P, N> {
            SafeModuleScriptInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SafeModuleScriptInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`setUp`] function.
        pub fn setUp(&self) -> alloy_contract::SolCallBuilder<T, &P, setUpCall, N> {
            self.call_builder(&setUpCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SafeModuleScriptInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
