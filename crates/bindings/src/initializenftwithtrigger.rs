/**

Generated by the following Solidity interface...
```solidity
interface InitializeNFTWithTrigger {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod InitializeNFTWithTrigger {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b506110708061002d5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f5ffd5b610040610069565b005b600c546100559062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100d4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100f89190610c7e565b60405163350d56bf60e01b815260206004820152600b60248201526a4e46545f4144445245535360a81b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610166573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061018a9190610c95565b60405163350d56bf60e01b815260206004820152601060248201526f29a2a92b24a1a2afa82927ab24a222a960811b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156101fd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102219190610c95565b90505f82905061025a6040518060400160405280601181526020017021b7b73a3930b1ba1030b2323932b9b99d60791b81525084610b42565b6102996040518060400160405280601881526020017f536572766963652070726f766964657220746f207365743a000000000000000081525083610b42565b6103376040518060400160405280601881526020017f497320636f6e747261637420696e697469616c697a65643f0000000000000000815250826001600160a01b031663158ef93e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561030e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103329190610cc2565b610b8b565b6103d56040518060400160405280601981526020017f43757272656e7420736572766963652070726f76696465723a00000000000000815250826001600160a01b0316638d69e95e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ac573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103d09190610c95565b610b42565b6105346040518060400160405280601681526020017543616c6c6572206861732061646d696e20726f6c653f60501b815250826001600160a01b03166391d14854846001600160a01b031663a217fddf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610452573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104769190610c7e565b6040516001625e79b760e01b03198152600481018a9052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa1864990602401602060405180830381865afa1580156104c7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104eb9190610c95565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044015b602060405180830381865afa15801561030e573d5f5f3e3d5ffd5b6105f26040518060600160405280602b8152602001611010602b9139826001600160a01b03166391d14854846001600160a01b0316631bc6ae8a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561059b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105bf9190610c7e565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0387166024820152604401610519565b60405163ce817d4760e01b815260048101859052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b15801561063c575f5ffd5b505af115801561064e573d5f5f3e3d5ffd5b505060405163189acdbd60e31b81526001600160a01b0385811660048301528416925063c4d66de891506024015f604051808303815f87803b158015610692575f5ffd5b505af19250505080156106a3575060015b610790576106af610ce1565b806308c379a00361071357506106c3610d3b565b806106ce5750610715565b6106f0604051806060016040528060228152602001610fc56022913982610bd0565b8060405162461bcd60e51b815260040161070a9190610e0c565b60405180910390fd5b505b610736604051806060016040528060298152602001610fe760299139610c15565b60405162461bcd60e51b815260206004820152602960248201527f496e697469616c697a6174696f6e206661696c6564207769746820756e6b6e6f6044820152683bb7103932b0b9b7b760b91b606482015260840161070a565b6107ce6040518060400160405280601c81526020017f5375636365737366756c6c7920696e697469616c697a6564204e465400000000815250610c15565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610828575f5ffd5b505af115801561083a573d5f5f3e3d5ffd5b5050505061087d6040518060400160405280601e81526020017f4e4654576974685472696767657220696e697469616c697a65642061743a000081525084610b42565b6108bc6040518060400160405280601881526020017f536572766963652050726f76696465722073657420746f3a000000000000000081525083610b42565b5f7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663d930a0e66040518163ffffffff1660e01b81526004015f60405180830381865afa15801561091a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109419190810190610e1e565b90505f7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166360f9bb11836040516020016109869190610eb3565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016109b19190610e0c565b5f60405180830381865afa1580156109cb573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109f29190810190610e1e565b604051909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063897e0a9790610a22908590602001610eb3565b60408051808303601f1901815290829052632b65311f60e11b82526001600160a01b0388166004830152908490737109709ecfa91a80626ff3989d68f67f5b1dd12d906356ca623e906024015f60405180830381865afa158015610a88573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610aaf9190810190610e1e565b604051602001610ac0929190610edb565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610aec929190610f27565b5f604051808303815f87803b158015610b03575f5ffd5b505af1158015610b15573d5f5f3e3d5ffd5b50505050610b3a6040518060600160405280602d8152602001610f98602d9139610c15565b505050505050565b610b878282604051602401610b58929190610f4b565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610c5b565b5050565b610b878282604051602401610ba1929190610f74565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052610c5b565b610b878282604051602401610be6929190610f27565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052610c5b565b610c5881604051602401610c299190610e0c565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610c5b565b50565b610c58815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f60208284031215610c8e575f5ffd5b5051919050565b5f60208284031215610ca5575f5ffd5b81516001600160a01b0381168114610cbb575f5ffd5b9392505050565b5f60208284031215610cd2575f5ffd5b81518015158114610cbb575f5ffd5b5f60033d1115610cf75760045f5f3e505f5160e01c5b90565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f1916810167ffffffffffffffff81118282101715610d3457610d34610cfa565b6040525050565b5f60443d1015610d485790565b6040513d600319016004823e80513d602482011167ffffffffffffffff82111715610d7257505090565b808201805167ffffffffffffffff811115610d8e575050505090565b3d8401600319018282016020011115610da8575050505090565b610db760208285010185610d0e565b509392505050565b5f5b83811015610dd9578181015183820152602001610dc1565b50505f910152565b5f8151808452610df8816020860160208601610dbf565b601f01601f19169290920160200192915050565b602081525f610cbb6020830184610de1565b5f60208284031215610e2e575f5ffd5b815167ffffffffffffffff811115610e44575f5ffd5b8201601f81018413610e54575f5ffd5b805167ffffffffffffffff811115610e6e57610e6e610cfa565b604051610e85601f8301601f191660200182610d0e565b818152856020838501011115610e99575f5ffd5b610eaa826020830160208601610dbf565b95945050505050565b5f8251610ec4818460208701610dbf565b64179732b73b60d91b920191825250600501919050565b5f8351610eec818460208801610dbf565b710a534552564943455f50524f56494445523d60701b9083019081528351610f1b816012840160208801610dbf565b01601201949350505050565b604081525f610f396040830185610de1565b8281036020840152610eaa8185610de1565b604081525f610f5d6040830185610de1565b905060018060a01b03831660208301529392505050565b604081525f610f866040830185610de1565b90508215156020830152939250505056fe55706461746564202e656e762066696c65207769746820696e697469616c697a6174696f6e2064657461696c73496e697469616c697a6174696f6e206661696c6564207769746820726561736f6e3a496e697469616c697a6174696f6e206661696c6564207769746820756e6b6e6f776e20726561736f6e536572766963652070726f76696465722068617320736572766963652070726f766964657220726f6c653fa26469706673582212205936f660d922f417b284ec67f8b3f99993d434de7abf9954743cbb5ddc79d80064736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa\x10p\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[__\xFD[a\0@a\0iV[\0[`\x0CTa\0U\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xD4W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xF8\x91\x90a\x0C~V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjNFT_ADDRESS`\xA8\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01fW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x8A\x91\x90a\x0C\x95V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01Ro)\xA2\xA9+$\xA1\xA2\xAF\xA8)'\xAB$\xA2\"\xA9`\x81\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xFDW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02!\x91\x90a\x0C\x95V[\x90P_\x82\x90Pa\x02Z`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p!\xB7\xB7:90\xB1\xBA\x100\xB2292\xB9\xB9\x9D`y\x1B\x81RP\x84a\x0BBV[a\x02\x99`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FService provider to set:\0\0\0\0\0\0\0\0\x81RP\x83a\x0BBV[a\x037`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FIs contract initialized?\0\0\0\0\0\0\0\0\x81RP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x15\x8E\xF9>`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x0EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x032\x91\x90a\x0C\xC2V[a\x0B\x8BV[a\x03\xD5`@Q\x80`@\x01`@R\x80`\x19\x81R` \x01\x7FCurrent service provider:\0\0\0\0\0\0\0\x81RP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x8Di\xE9^`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xACW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xD0\x91\x90a\x0C\x95V[a\x0BBV[a\x054`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01uCaller has admin role?`P\x1B\x81RP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x91\xD1HT\x84`\x01`\x01`\xA0\x1B\x03\x16c\xA2\x17\xFD\xDF`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04RW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04v\x91\x90a\x0C~V[`@Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x8A\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xFF\xA1\x86I\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xC7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xEB\x91\x90a\x0C\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x04\x81\x01\x92\x90\x92R`\x01`\x01`\xA0\x1B\x03\x16`$\x82\x01R`D\x01[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x0EW=__>=_\xFD[a\x05\xF2`@Q\x80``\x01`@R\x80`+\x81R` \x01a\x10\x10`+\x919\x82`\x01`\x01`\xA0\x1B\x03\x16c\x91\xD1HT\x84`\x01`\x01`\xA0\x1B\x03\x16c\x1B\xC6\xAE\x8A`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x9BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xBF\x91\x90a\x0C~V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R`\x04\x81\x01\x91\x90\x91R`\x01`\x01`\xA0\x1B\x03\x87\x16`$\x82\x01R`D\x01a\x05\x19V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x85\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06<W__\xFD[PZ\xF1\x15\x80\x15a\x06NW=__>=_\xFD[PP`@Qc\x18\x9A\xCD\xBD`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R\x84\x16\x92Pc\xC4\xD6m\xE8\x91P`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\x92W__\xFD[PZ\xF1\x92PPP\x80\x15a\x06\xA3WP`\x01[a\x07\x90Wa\x06\xAFa\x0C\xE1V[\x80c\x08\xC3y\xA0\x03a\x07\x13WPa\x06\xC3a\r;V[\x80a\x06\xCEWPa\x07\x15V[a\x06\xF0`@Q\x80``\x01`@R\x80`\"\x81R` \x01a\x0F\xC5`\"\x919\x82a\x0B\xD0V[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x07\n\x91\x90a\x0E\x0CV[`@Q\x80\x91\x03\x90\xFD[P[a\x076`@Q\x80``\x01`@R\x80`)\x81R` \x01a\x0F\xE7`)\x919a\x0C\x15V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`)`$\x82\x01R\x7FInitialization failed with unkno`D\x82\x01Rh;\xB7\x1092\xB0\xB9\xB7\xB7`\xB9\x1B`d\x82\x01R`\x84\x01a\x07\nV[a\x07\xCE`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7FSuccessfully initialized NFT\0\0\0\0\x81RPa\x0C\x15V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x08(W__\xFD[PZ\xF1\x15\x80\x15a\x08:W=__>=_\xFD[PPPPa\x08}`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FNFTWithTrigger initialized at:\0\0\x81RP\x84a\x0BBV[a\x08\xBC`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FService Provider set to:\0\0\0\0\0\0\0\0\x81RP\x83a\x0BBV[_\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xD90\xA0\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\x1AW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\tA\x91\x90\x81\x01\x90a\x0E\x1EV[\x90P_\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c`\xF9\xBB\x11\x83`@Q` \x01a\t\x86\x91\x90a\x0E\xB3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\xB1\x91\x90a\x0E\x0CV[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xCBW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\t\xF2\x91\x90\x81\x01\x90a\x0E\x1EV[`@Q\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x89~\n\x97\x90a\n\"\x90\x85\x90` \x01a\x0E\xB3V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x90\x82\x90Rc+e1\x1F`\xE1\x1B\x82R`\x01`\x01`\xA0\x1B\x03\x88\x16`\x04\x83\x01R\x90\x84\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cV\xCAb>\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\x88W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\n\xAF\x91\x90\x81\x01\x90a\x0E\x1EV[`@Q` \x01a\n\xC0\x92\x91\x90a\x0E\xDBV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\xEC\x92\x91\x90a\x0F'V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x0B\x03W__\xFD[PZ\xF1\x15\x80\x15a\x0B\x15W=__>=_\xFD[PPPPa\x0B:`@Q\x80``\x01`@R\x80`-\x81R` \x01a\x0F\x98`-\x919a\x0C\x15V[PPPPPPV[a\x0B\x87\x82\x82`@Q`$\x01a\x0BX\x92\x91\x90a\x0FKV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0C[V[PPV[a\x0B\x87\x82\x82`@Q`$\x01a\x0B\xA1\x92\x91\x90a\x0FtV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xC3\xB5V5`\xE0\x1B\x17\x90Ra\x0C[V[a\x0B\x87\x82\x82`@Q`$\x01a\x0B\xE6\x92\x91\x90a\x0F'V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\x0C[V[a\x0CX\x81`@Q`$\x01a\x0C)\x91\x90a\x0E\x0CV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x0C[V[PV[a\x0CX\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[_` \x82\x84\x03\x12\x15a\x0C\x8EW__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0C\xA5W__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0C\xBBW__\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0C\xD2W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0C\xBBW__\xFD[_`\x03=\x11\x15a\x0C\xF7W`\x04__>P_Q`\xE0\x1C[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\r4Wa\r4a\x0C\xFAV[`@RPPV[_`D=\x10\x15a\rHW\x90V[`@Q=`\x03\x19\x01`\x04\x82>\x80Q=`$\x82\x01\x11g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\rrWPP\x90V[\x80\x82\x01\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x8EWPPPP\x90V[=\x84\x01`\x03\x19\x01\x82\x82\x01` \x01\x11\x15a\r\xA8WPPPP\x90V[a\r\xB7` \x82\x85\x01\x01\x85a\r\x0EV[P\x93\x92PPPV[_[\x83\x81\x10\x15a\r\xD9W\x81\x81\x01Q\x83\x82\x01R` \x01a\r\xC1V[PP_\x91\x01RV[_\x81Q\x80\x84Ra\r\xF8\x81` \x86\x01` \x86\x01a\r\xBFV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x0C\xBB` \x83\x01\x84a\r\xE1V[_` \x82\x84\x03\x12\x15a\x0E.W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0EDW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0ETW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0EnWa\x0Ena\x0C\xFAV[`@Qa\x0E\x85`\x1F\x83\x01`\x1F\x19\x16` \x01\x82a\r\x0EV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x0E\x99W__\xFD[a\x0E\xAA\x82` \x83\x01` \x86\x01a\r\xBFV[\x95\x94PPPPPV[_\x82Qa\x0E\xC4\x81\x84` \x87\x01a\r\xBFV[d\x17\x972\xB7;`\xD9\x1B\x92\x01\x91\x82RP`\x05\x01\x91\x90PV[_\x83Qa\x0E\xEC\x81\x84` \x88\x01a\r\xBFV[q\nSERVICE_PROVIDER=`p\x1B\x90\x83\x01\x90\x81R\x83Qa\x0F\x1B\x81`\x12\x84\x01` \x88\x01a\r\xBFV[\x01`\x12\x01\x94\x93PPPPV[`@\x81R_a\x0F9`@\x83\x01\x85a\r\xE1V[\x82\x81\x03` \x84\x01Ra\x0E\xAA\x81\x85a\r\xE1V[`@\x81R_a\x0F]`@\x83\x01\x85a\r\xE1V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R_a\x0F\x86`@\x83\x01\x85a\r\xE1V[\x90P\x82\x15\x15` \x83\x01R\x93\x92PPPV\xFEUpdated .env file with initialization detailsInitialization failed with reason:Initialization failed with unknown reasonService provider has service provider role?\xA2dipfsX\"\x12 Y6\xF6`\xD9\"\xF4\x17\xB2\x84\xECg\xF8\xB3\xF9\x99\x93\xD44\xDEz\xBF\x99Tt<\xBB]\xDCy\xD8\0dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f5ffd5b610040610069565b005b600c546100559062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100d4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100f89190610c7e565b60405163350d56bf60e01b815260206004820152600b60248201526a4e46545f4144445245535360a81b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610166573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061018a9190610c95565b60405163350d56bf60e01b815260206004820152601060248201526f29a2a92b24a1a2afa82927ab24a222a960811b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa1580156101fd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102219190610c95565b90505f82905061025a6040518060400160405280601181526020017021b7b73a3930b1ba1030b2323932b9b99d60791b81525084610b42565b6102996040518060400160405280601881526020017f536572766963652070726f766964657220746f207365743a000000000000000081525083610b42565b6103376040518060400160405280601881526020017f497320636f6e747261637420696e697469616c697a65643f0000000000000000815250826001600160a01b031663158ef93e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561030e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103329190610cc2565b610b8b565b6103d56040518060400160405280601981526020017f43757272656e7420736572766963652070726f76696465723a00000000000000815250826001600160a01b0316638d69e95e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ac573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103d09190610c95565b610b42565b6105346040518060400160405280601681526020017543616c6c6572206861732061646d696e20726f6c653f60501b815250826001600160a01b03166391d14854846001600160a01b031663a217fddf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610452573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104769190610c7e565b6040516001625e79b760e01b03198152600481018a9052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa1864990602401602060405180830381865afa1580156104c7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104eb9190610c95565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b031660248201526044015b602060405180830381865afa15801561030e573d5f5f3e3d5ffd5b6105f26040518060600160405280602b8152602001611010602b9139826001600160a01b03166391d14854846001600160a01b0316631bc6ae8a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561059b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105bf9190610c7e565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0387166024820152604401610519565b60405163ce817d4760e01b815260048101859052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b15801561063c575f5ffd5b505af115801561064e573d5f5f3e3d5ffd5b505060405163189acdbd60e31b81526001600160a01b0385811660048301528416925063c4d66de891506024015f604051808303815f87803b158015610692575f5ffd5b505af19250505080156106a3575060015b610790576106af610ce1565b806308c379a00361071357506106c3610d3b565b806106ce5750610715565b6106f0604051806060016040528060228152602001610fc56022913982610bd0565b8060405162461bcd60e51b815260040161070a9190610e0c565b60405180910390fd5b505b610736604051806060016040528060298152602001610fe760299139610c15565b60405162461bcd60e51b815260206004820152602960248201527f496e697469616c697a6174696f6e206661696c6564207769746820756e6b6e6f6044820152683bb7103932b0b9b7b760b91b606482015260840161070a565b6107ce6040518060400160405280601c81526020017f5375636365737366756c6c7920696e697469616c697a6564204e465400000000815250610c15565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610828575f5ffd5b505af115801561083a573d5f5f3e3d5ffd5b5050505061087d6040518060400160405280601e81526020017f4e4654576974685472696767657220696e697469616c697a65642061743a000081525084610b42565b6108bc6040518060400160405280601881526020017f536572766963652050726f76696465722073657420746f3a000000000000000081525083610b42565b5f7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663d930a0e66040518163ffffffff1660e01b81526004015f60405180830381865afa15801561091a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109419190810190610e1e565b90505f7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166360f9bb11836040516020016109869190610eb3565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016109b19190610e0c565b5f60405180830381865afa1580156109cb573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109f29190810190610e1e565b604051909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063897e0a9790610a22908590602001610eb3565b60408051808303601f1901815290829052632b65311f60e11b82526001600160a01b0388166004830152908490737109709ecfa91a80626ff3989d68f67f5b1dd12d906356ca623e906024015f60405180830381865afa158015610a88573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610aaf9190810190610e1e565b604051602001610ac0929190610edb565b6040516020818303038152906040526040518363ffffffff1660e01b8152600401610aec929190610f27565b5f604051808303815f87803b158015610b03575f5ffd5b505af1158015610b15573d5f5f3e3d5ffd5b50505050610b3a6040518060600160405280602d8152602001610f98602d9139610c15565b505050505050565b610b878282604051602401610b58929190610f4b565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610c5b565b5050565b610b878282604051602401610ba1929190610f74565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052610c5b565b610b878282604051602401610be6929190610f27565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052610c5b565b610c5881604051602401610c299190610e0c565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610c5b565b50565b610c58815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f60208284031215610c8e575f5ffd5b5051919050565b5f60208284031215610ca5575f5ffd5b81516001600160a01b0381168114610cbb575f5ffd5b9392505050565b5f60208284031215610cd2575f5ffd5b81518015158114610cbb575f5ffd5b5f60033d1115610cf75760045f5f3e505f5160e01c5b90565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f1916810167ffffffffffffffff81118282101715610d3457610d34610cfa565b6040525050565b5f60443d1015610d485790565b6040513d600319016004823e80513d602482011167ffffffffffffffff82111715610d7257505090565b808201805167ffffffffffffffff811115610d8e575050505090565b3d8401600319018282016020011115610da8575050505090565b610db760208285010185610d0e565b509392505050565b5f5b83811015610dd9578181015183820152602001610dc1565b50505f910152565b5f8151808452610df8816020860160208601610dbf565b601f01601f19169290920160200192915050565b602081525f610cbb6020830184610de1565b5f60208284031215610e2e575f5ffd5b815167ffffffffffffffff811115610e44575f5ffd5b8201601f81018413610e54575f5ffd5b805167ffffffffffffffff811115610e6e57610e6e610cfa565b604051610e85601f8301601f191660200182610d0e565b818152856020838501011115610e99575f5ffd5b610eaa826020830160208601610dbf565b95945050505050565b5f8251610ec4818460208701610dbf565b64179732b73b60d91b920191825250600501919050565b5f8351610eec818460208801610dbf565b710a534552564943455f50524f56494445523d60701b9083019081528351610f1b816012840160208801610dbf565b01601201949350505050565b604081525f610f396040830185610de1565b8281036020840152610eaa8185610de1565b604081525f610f5d6040830185610de1565b905060018060a01b03831660208301529392505050565b604081525f610f866040830185610de1565b90508215156020830152939250505056fe55706461746564202e656e762066696c65207769746820696e697469616c697a6174696f6e2064657461696c73496e697469616c697a6174696f6e206661696c6564207769746820726561736f6e3a496e697469616c697a6174696f6e206661696c6564207769746820756e6b6e6f776e20726561736f6e536572766963652070726f76696465722068617320736572766963652070726f766964657220726f6c653fa26469706673582212205936f660d922f417b284ec67f8b3f99993d434de7abf9954743cbb5ddc79d80064736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[__\xFD[a\0@a\0iV[\0[`\x0CTa\0U\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xD4W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xF8\x91\x90a\x0C~V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjNFT_ADDRESS`\xA8\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01fW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x8A\x91\x90a\x0C\x95V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01Ro)\xA2\xA9+$\xA1\xA2\xAF\xA8)'\xAB$\xA2\"\xA9`\x81\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xFDW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02!\x91\x90a\x0C\x95V[\x90P_\x82\x90Pa\x02Z`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p!\xB7\xB7:90\xB1\xBA\x100\xB2292\xB9\xB9\x9D`y\x1B\x81RP\x84a\x0BBV[a\x02\x99`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FService provider to set:\0\0\0\0\0\0\0\0\x81RP\x83a\x0BBV[a\x037`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FIs contract initialized?\0\0\0\0\0\0\0\0\x81RP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x15\x8E\xF9>`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x0EW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x032\x91\x90a\x0C\xC2V[a\x0B\x8BV[a\x03\xD5`@Q\x80`@\x01`@R\x80`\x19\x81R` \x01\x7FCurrent service provider:\0\0\0\0\0\0\0\x81RP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x8Di\xE9^`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xACW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xD0\x91\x90a\x0C\x95V[a\x0BBV[a\x054`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01uCaller has admin role?`P\x1B\x81RP\x82`\x01`\x01`\xA0\x1B\x03\x16c\x91\xD1HT\x84`\x01`\x01`\xA0\x1B\x03\x16c\xA2\x17\xFD\xDF`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04RW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04v\x91\x90a\x0C~V[`@Q`\x01b^y\xB7`\xE0\x1B\x03\x19\x81R`\x04\x81\x01\x8A\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xFF\xA1\x86I\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xC7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xEB\x91\x90a\x0C\x95V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x04\x81\x01\x92\x90\x92R`\x01`\x01`\xA0\x1B\x03\x16`$\x82\x01R`D\x01[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x0EW=__>=_\xFD[a\x05\xF2`@Q\x80``\x01`@R\x80`+\x81R` \x01a\x10\x10`+\x919\x82`\x01`\x01`\xA0\x1B\x03\x16c\x91\xD1HT\x84`\x01`\x01`\xA0\x1B\x03\x16c\x1B\xC6\xAE\x8A`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x9BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xBF\x91\x90a\x0C~V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x84\x90\x1B\x16\x81R`\x04\x81\x01\x91\x90\x91R`\x01`\x01`\xA0\x1B\x03\x87\x16`$\x82\x01R`D\x01a\x05\x19V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x85\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06<W__\xFD[PZ\xF1\x15\x80\x15a\x06NW=__>=_\xFD[PP`@Qc\x18\x9A\xCD\xBD`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R\x84\x16\x92Pc\xC4\xD6m\xE8\x91P`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\x92W__\xFD[PZ\xF1\x92PPP\x80\x15a\x06\xA3WP`\x01[a\x07\x90Wa\x06\xAFa\x0C\xE1V[\x80c\x08\xC3y\xA0\x03a\x07\x13WPa\x06\xC3a\r;V[\x80a\x06\xCEWPa\x07\x15V[a\x06\xF0`@Q\x80``\x01`@R\x80`\"\x81R` \x01a\x0F\xC5`\"\x919\x82a\x0B\xD0V[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x07\n\x91\x90a\x0E\x0CV[`@Q\x80\x91\x03\x90\xFD[P[a\x076`@Q\x80``\x01`@R\x80`)\x81R` \x01a\x0F\xE7`)\x919a\x0C\x15V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`)`$\x82\x01R\x7FInitialization failed with unkno`D\x82\x01Rh;\xB7\x1092\xB0\xB9\xB7\xB7`\xB9\x1B`d\x82\x01R`\x84\x01a\x07\nV[a\x07\xCE`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7FSuccessfully initialized NFT\0\0\0\0\x81RPa\x0C\x15V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x08(W__\xFD[PZ\xF1\x15\x80\x15a\x08:W=__>=_\xFD[PPPPa\x08}`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FNFTWithTrigger initialized at:\0\0\x81RP\x84a\x0BBV[a\x08\xBC`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FService Provider set to:\0\0\0\0\0\0\0\0\x81RP\x83a\x0BBV[_\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xD90\xA0\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\x1AW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\tA\x91\x90\x81\x01\x90a\x0E\x1EV[\x90P_\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c`\xF9\xBB\x11\x83`@Q` \x01a\t\x86\x91\x90a\x0E\xB3V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\xB1\x91\x90a\x0E\x0CV[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xCBW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\t\xF2\x91\x90\x81\x01\x90a\x0E\x1EV[`@Q\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\x89~\n\x97\x90a\n\"\x90\x85\x90` \x01a\x0E\xB3V[`@\x80Q\x80\x83\x03`\x1F\x19\x01\x81R\x90\x82\x90Rc+e1\x1F`\xE1\x1B\x82R`\x01`\x01`\xA0\x1B\x03\x88\x16`\x04\x83\x01R\x90\x84\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cV\xCAb>\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\x88W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\n\xAF\x91\x90\x81\x01\x90a\x0E\x1EV[`@Q` \x01a\n\xC0\x92\x91\x90a\x0E\xDBV[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\xEC\x92\x91\x90a\x0F'V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x0B\x03W__\xFD[PZ\xF1\x15\x80\x15a\x0B\x15W=__>=_\xFD[PPPPa\x0B:`@Q\x80``\x01`@R\x80`-\x81R` \x01a\x0F\x98`-\x919a\x0C\x15V[PPPPPPV[a\x0B\x87\x82\x82`@Q`$\x01a\x0BX\x92\x91\x90a\x0FKV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0C[V[PPV[a\x0B\x87\x82\x82`@Q`$\x01a\x0B\xA1\x92\x91\x90a\x0FtV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xC3\xB5V5`\xE0\x1B\x17\x90Ra\x0C[V[a\x0B\x87\x82\x82`@Q`$\x01a\x0B\xE6\x92\x91\x90a\x0F'V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\x0C[V[a\x0CX\x81`@Q`$\x01a\x0C)\x91\x90a\x0E\x0CV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x0C[V[PV[a\x0CX\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[_` \x82\x84\x03\x12\x15a\x0C\x8EW__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x0C\xA5W__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0C\xBBW__\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0C\xD2W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0C\xBBW__\xFD[_`\x03=\x11\x15a\x0C\xF7W`\x04__>P_Q`\xE0\x1C[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\r4Wa\r4a\x0C\xFAV[`@RPPV[_`D=\x10\x15a\rHW\x90V[`@Q=`\x03\x19\x01`\x04\x82>\x80Q=`$\x82\x01\x11g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\rrWPP\x90V[\x80\x82\x01\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x8EWPPPP\x90V[=\x84\x01`\x03\x19\x01\x82\x82\x01` \x01\x11\x15a\r\xA8WPPPP\x90V[a\r\xB7` \x82\x85\x01\x01\x85a\r\x0EV[P\x93\x92PPPV[_[\x83\x81\x10\x15a\r\xD9W\x81\x81\x01Q\x83\x82\x01R` \x01a\r\xC1V[PP_\x91\x01RV[_\x81Q\x80\x84Ra\r\xF8\x81` \x86\x01` \x86\x01a\r\xBFV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x0C\xBB` \x83\x01\x84a\r\xE1V[_` \x82\x84\x03\x12\x15a\x0E.W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0EDW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0ETW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0EnWa\x0Ena\x0C\xFAV[`@Qa\x0E\x85`\x1F\x83\x01`\x1F\x19\x16` \x01\x82a\r\x0EV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x0E\x99W__\xFD[a\x0E\xAA\x82` \x83\x01` \x86\x01a\r\xBFV[\x95\x94PPPPPV[_\x82Qa\x0E\xC4\x81\x84` \x87\x01a\r\xBFV[d\x17\x972\xB7;`\xD9\x1B\x92\x01\x91\x82RP`\x05\x01\x91\x90PV[_\x83Qa\x0E\xEC\x81\x84` \x88\x01a\r\xBFV[q\nSERVICE_PROVIDER=`p\x1B\x90\x83\x01\x90\x81R\x83Qa\x0F\x1B\x81`\x12\x84\x01` \x88\x01a\r\xBFV[\x01`\x12\x01\x94\x93PPPPV[`@\x81R_a\x0F9`@\x83\x01\x85a\r\xE1V[\x82\x81\x03` \x84\x01Ra\x0E\xAA\x81\x85a\r\xE1V[`@\x81R_a\x0F]`@\x83\x01\x85a\r\xE1V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R_a\x0F\x86`@\x83\x01\x85a\r\xE1V[\x90P\x82\x15\x15` \x83\x01R\x93\x92PPPV\xFEUpdated .env file with initialization detailsInitialization failed with reason:Initialization failed with unknown reasonService provider has service provider role?\xA2dipfsX\"\x12 Y6\xF6`\xD9\"\xF4\x17\xB2\x84\xECg\xF8\xB3\xF9\x99\x93\xD44\xDEz\xBF\x99Tt<\xBB]\xDCy\xD8\0dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
    ```solidity
    function run() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`InitializeNFTWithTrigger`](self) function calls.
    pub enum InitializeNFTWithTriggerCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
    }
    #[automatically_derived]
    impl InitializeNFTWithTriggerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] =
            &[[192u8, 64u8, 98u8, 38u8], [248u8, 204u8, 191u8, 71u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for InitializeNFTWithTriggerCalls {
        const NAME: &'static str = "InitializeNFTWithTriggerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<InitializeNFTWithTriggerCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<InitializeNFTWithTriggerCalls>
                    {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(InitializeNFTWithTriggerCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<InitializeNFTWithTriggerCalls>
                    {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(InitializeNFTWithTriggerCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`InitializeNFTWithTrigger`](self) contract instance.

    See the [wrapper's documentation](`InitializeNFTWithTriggerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> InitializeNFTWithTriggerInstance<T, P, N> {
        InitializeNFTWithTriggerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<InitializeNFTWithTriggerInstance<T, P, N>>,
    > {
        InitializeNFTWithTriggerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        InitializeNFTWithTriggerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`InitializeNFTWithTrigger`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`InitializeNFTWithTrigger`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct InitializeNFTWithTriggerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for InitializeNFTWithTriggerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("InitializeNFTWithTriggerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > InitializeNFTWithTriggerInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`InitializeNFTWithTrigger`](self) contract instance.

        See the [wrapper's documentation](`InitializeNFTWithTriggerInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<InitializeNFTWithTriggerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> InitializeNFTWithTriggerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> InitializeNFTWithTriggerInstance<T, P, N> {
            InitializeNFTWithTriggerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > InitializeNFTWithTriggerInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > InitializeNFTWithTriggerInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
