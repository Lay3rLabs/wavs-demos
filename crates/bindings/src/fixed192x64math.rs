/**

Generated by the following Solidity interface...
```solidity
interface Fixed192x64Math {
    type EstimationMode is uint8;

    function LN2() external view returns (uint256);
    function LOG2_E() external view returns (uint256);
    function ONE() external view returns (uint256);
    function binaryLog(uint256 x, EstimationMode estimationMode) external pure returns (int256);
    function exp(int256 x) external pure returns (uint256);
    function floorLog2(uint256 x) external pure returns (int256 lo);
    function ln(uint256 x) external pure returns (int256);
    function log2Bounds(uint256 x) external pure returns (int256 lower, int256 upper);
    function max(int256[] memory nums) external pure returns (int256 maxNum);
    function pow2(int256 x, EstimationMode estimationMode) external pure returns (uint256);
    function pow2Bounds(int256 x) external pure returns (uint256 lower, uint256 upper);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "LN2",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "LOG2_E",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ONE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "binaryLog",
    "inputs": [
      {
        "name": "x",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "estimationMode",
        "type": "Fixed192x64Math.EstimationMode",
        "internalType": "enum Fixed192x64Math.EstimationMode"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "exp",
    "inputs": [
      {
        "name": "x",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "floorLog2",
    "inputs": [
      {
        "name": "x",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "lo",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "ln",
    "inputs": [
      {
        "name": "x",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "log2Bounds",
    "inputs": [
      {
        "name": "x",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "lower",
        "type": "int256",
        "internalType": "int256"
      },
      {
        "name": "upper",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "max",
    "inputs": [
      {
        "name": "nums",
        "type": "int256[]",
        "internalType": "int256[]"
      }
    ],
    "outputs": [
      {
        "name": "maxNum",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "pow2",
    "inputs": [
      {
        "name": "x",
        "type": "int256",
        "internalType": "int256"
      },
      {
        "name": "estimationMode",
        "type": "Fixed192x64Math.EstimationMode",
        "internalType": "enum Fixed192x64Math.EstimationMode"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "pow2Bounds",
    "inputs": [
      {
        "name": "x",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "outputs": [
      {
        "name": "lower",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "upper",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod Fixed192x64Math {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x610e0b610034600b8282823980515f1a607314602857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100b1575f3560e01c806324d4e90a1161007957806324d4e90a1461013557806345b8bafc14610148578063c12662271461015b578063c2ee3a081461016e578063ccc1381414610179578063e46751e31461018c575f5ffd5b806302780677146100b5578063137bf798146100d75780631427f168146100ea5780631d5801231461011257806324902e2414610125575b5f5ffd5b6100c467b17217f7d1cf79ac81565b6040519081526020015b60405180910390f35b6100c46100e5366004610b11565b61019f565b6100fd6100f8366004610b3b565b610237565b604080519283526020830191909152016100ce565b6100c4610120366004610b11565b610310565b6100c4680171547652b82fe17781565b6100c4610143366004610b3b565b61039d565b6100c4610156366004610b3b565b6103fa565b6100fd610169366004610b3b565b610488565b6100c4600160401b81565b6100c4610187366004610b66565b610a1a565b6100c461019a366004610b3b565b610a84565b5f5f5f6101ab85610237565b90925090505f8460028111156101c3576101c3610c2e565b036101d057509050610231565b60018460028111156101e4576101e4610c2e565b036101f25791506102319050565b600284600281111561020657610206610c2e565b036100b1578160026102188284610c56565b6102229190610c90565b61022c9190610cbc565b925050505b92915050565b5f5f5f8311610244575f5ffd5b61024d836103fa565b91505f5f83121561026b5761026183610ce3565b84901b9050610270565b5082821c5b61027e600160401b84610cfd565b925060015b604081136102f957600160401b8203156102f957600160401b6102a68380610d2c565b6102b09190610d43565b91506102c1600160401b6002610d2c565b82106102e7576102d7600160401b821c85610cbc565b93506102e4600283610d43565b91505b806102f181610d56565b915050610283565b5082610306816004610cbc565b9250925050915091565b5f5f5f61031c85610488565b90925090505f84600281111561033457610334610c2e565b0361034157509050610231565b600184600281111561035557610355610c2e565b036103635791506102319050565b600284600281111561037757610377610c2e565b036100b1578160026103898284610d74565b6103939190610d43565b61022c9190610d87565b5f5f5f6103a984610237565b9092509050680171547652b82fe177600160401b8360026103ca8286610c56565b6103d49190610c90565b6103de9190610cbc565b6103e89190610cfd565b6103f29190610c90565b949350505050565b603f1960c15f600161040c8484610cbc565b901d90505b8161041d846001610cbc565b1215610481575f811280156104405750600160401b61043b82610ce3565b85901b105b8061045b57505f811215801561045b5750600160401b84821c105b156104685780915061046c565b8092505b60016104788484610cbc565b901d9050610411565b5050919050565b5f5f68bfffffffffffffffff83131561049f575f5ffd5b683fffffffffffffffff198312156104bc57505f92600192509050565b5f5f5f85126104ea576104d3600160401b86610c90565b91506104e3600160401b86610d9a565b905061052c565b6001600160401b6104fb8783610cbc565b6105059190610c90565b61050f9190610c56565b915061051f82600160401b610cfd565b6105299086610c56565b90505b5f81121561053c5761053c610dad565b600160801b816105548167b17217f7d1cf79ab610cfd565b61055e9083610cbc565b9150600160401b61056f8483610cfd565b6105799190610c90565b9050600261058f8267f5fdeffc162c7543610cfd565b61059a911d83610cbc565b9150600160401b6105ab8483610cfd565b6105b59190610c90565b905060046105cb8267e35846b82505fc59610cfd565b6105d6911d83610cbc565b9150600160401b6105e78483610cfd565b6105f19190610c90565b9050600661060782679d955b7dd273b94e610cfd565b610612911d83610cbc565b9150600160401b6106238483610cfd565b61062d9190610c90565b905060096106438267aec3ff3c53398883610cfd565b61064e911d83610cbc565b9150600160401b61065f8483610cfd565b6106699190610c90565b9050600c61067f8267a184897c363c3b7a610cfd565b61068a911d83610cbc565b9150600160401b61069b8483610cfd565b6106a59190610c90565b905060106106bb8267ffe5fe2c45863435610cfd565b6106c6911d83610cbc565b9150600160401b6106d78483610cfd565b6106e19190610c90565b905060136106f78267b160111d2e411fec610cfd565b610702911d83610cbc565b9150600160401b6107138483610cfd565b61071d9190610c90565b905060176107338267da929e9caf3e1ed2610cfd565b61073e911d83610cbc565b9150600160401b61074f8483610cfd565b6107599190610c90565b9050601b61076f8267f267a8ac5c764fb7610cfd565b61077a911d83610cbc565b9150600160401b61078b8483610cfd565b6107959190610c90565b9050601f6107ab8267f465639a8dd92607610cfd565b6107b6911d83610cbc565b9150600160401b6107c78483610cfd565b6107d19190610c90565b905060236107e78267e1deb287e14c2f15610cfd565b6107f2911d83610cbc565b9150600160401b6108038483610cfd565b61080d9190610c90565b905060276108238267c0b0c98b3687cb14610cfd565b61082e911d83610cbc565b9150600160401b61083f8483610cfd565b6108499190610c90565b9050602b61085f826798a4b26ac3c54b9f610cfd565b61086a911d83610cbc565b9150600160401b61087b8483610cfd565b6108859190610c90565b9050603061089b8267e1b7421d82010f33610cfd565b6108a6911d83610cbc565b9150600160401b6108b78483610cfd565b6108c19190610c90565b905060346108d782679c744d73cfc59c91610cfd565b6108e2911d83610cbc565b9150600160401b6108f38483610cfd565b6108fd9190610c90565b905060396109138267cc2225a0e12d3eab610cfd565b61091e911d83610cbc565b9150600160401b61092f8483610cfd565b6109399190610c90565b9050603e61094f8267fb8bb5eda1b4aeb9610cfd565b901d905061095d8183610cbc565b915061096e600160401b6008610d2c565b905061097b604085610c56565b93505f84126109de5761099084610100610c56565b82901d5f036109cf5781841b9550831b856109ab8282610d87565b106109c1576109ba8187610d87565b94506109c6565b5f1994505b50505050915091565b505f1996879650945050505050565b6109e784610ce3565b6109f59082901d6001610cbc565b9050610a0084610ce3565b82901c9550610a0f8187610d87565b945050505050915091565b5f5f825111610a27575f5ffd5b50600160ff1b5f5b8251811015610a7e5781838281518110610a4b57610a4b610dc1565b60200260200101511315610a7657828181518110610a6b57610a6b610dc1565b602002602001015191505b600101610a2f565b50919050565b5f68851591f9dd5b9b40d7821315610a9a575f5ffd5b682c5c85fdf473de6af2198213610ab257505f919050565b5f80610ad867b17217f7d1cf79ac610ace600160401b87610cfd565b6101699190610c90565b9092509050816002610aea8284610d74565b610af49190610d43565b6103f29190610d87565b803560038110610b0c575f5ffd5b919050565b5f5f60408385031215610b22575f5ffd5b82359150610b3260208401610afe565b90509250929050565b5f60208284031215610b4b575f5ffd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610b76575f5ffd5b813567ffffffffffffffff811115610b8c575f5ffd5b8201601f81018413610b9c575f5ffd5b803567ffffffffffffffff811115610bb657610bb6610b52565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715610be357610be3610b52565b604052918252602081840181019290810187841115610c00575f5ffd5b6020850194505b83851015610c2357843580825260209586019590935001610c07565b509695505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181035f831280158383131683831282161715610c7557610c75610c42565b5092915050565b634e487b7160e01b5f52601260045260245ffd5b5f82610c9e57610c9e610c7c565b600160ff1b82145f1984141615610cb757610cb7610c42565b500590565b8082018281125f831280158216821582161715610cdb57610cdb610c42565b505092915050565b5f600160ff1b8201610cf757610cf7610c42565b505f0390565b8082025f8212600160ff1b84141615610d1857610d18610c42565b818105831482151761023157610231610c42565b808202811582820484141761023157610231610c42565b5f82610d5157610d51610c7c565b500490565b5f6001600160ff1b018201610d6d57610d6d610c42565b5060010190565b8181038181111561023157610231610c42565b8082018082111561023157610231610c42565b5f82610da857610da8610c7c565b500790565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220cbf35d5a81af3e9368cdb01446deaf1ae569282b0a36b4a2d06e6c19b1ded33264736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x0E\x0Ba\x004`\x0B\x82\x82\x829\x80Q_\x1A`s\x14`(WcNH{q`\xE0\x1B_R_`\x04R`$_\xFD[0_R`s\x81S\x82\x81\xF3\xFEs\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0\xB1W_5`\xE0\x1C\x80c$\xD4\xE9\n\x11a\0yW\x80c$\xD4\xE9\n\x14a\x015W\x80cE\xB8\xBA\xFC\x14a\x01HW\x80c\xC1&b'\x14a\x01[W\x80c\xC2\xEE:\x08\x14a\x01nW\x80c\xCC\xC18\x14\x14a\x01yW\x80c\xE4gQ\xE3\x14a\x01\x8CW__\xFD[\x80c\x02x\x06w\x14a\0\xB5W\x80c\x13{\xF7\x98\x14a\0\xD7W\x80c\x14'\xF1h\x14a\0\xEAW\x80c\x1DX\x01#\x14a\x01\x12W\x80c$\x90.$\x14a\x01%W[__\xFD[a\0\xC4g\xB1r\x17\xF7\xD1\xCFy\xAC\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xC4a\0\xE56`\x04a\x0B\x11V[a\x01\x9FV[a\0\xFDa\0\xF86`\x04a\x0B;V[a\x027V[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\0\xCEV[a\0\xC4a\x01 6`\x04a\x0B\x11V[a\x03\x10V[a\0\xC4h\x01qTvR\xB8/\xE1w\x81V[a\0\xC4a\x01C6`\x04a\x0B;V[a\x03\x9DV[a\0\xC4a\x01V6`\x04a\x0B;V[a\x03\xFAV[a\0\xFDa\x01i6`\x04a\x0B;V[a\x04\x88V[a\0\xC4`\x01`@\x1B\x81V[a\0\xC4a\x01\x876`\x04a\x0BfV[a\n\x1AV[a\0\xC4a\x01\x9A6`\x04a\x0B;V[a\n\x84V[___a\x01\xAB\x85a\x027V[\x90\x92P\x90P_\x84`\x02\x81\x11\x15a\x01\xC3Wa\x01\xC3a\x0C.V[\x03a\x01\xD0WP\x90Pa\x021V[`\x01\x84`\x02\x81\x11\x15a\x01\xE4Wa\x01\xE4a\x0C.V[\x03a\x01\xF2W\x91Pa\x021\x90PV[`\x02\x84`\x02\x81\x11\x15a\x02\x06Wa\x02\x06a\x0C.V[\x03a\0\xB1W\x81`\x02a\x02\x18\x82\x84a\x0CVV[a\x02\"\x91\x90a\x0C\x90V[a\x02,\x91\x90a\x0C\xBCV[\x92PPP[\x92\x91PPV[___\x83\x11a\x02DW__\xFD[a\x02M\x83a\x03\xFAV[\x91P__\x83\x12\x15a\x02kWa\x02a\x83a\x0C\xE3V[\x84\x90\x1B\x90Pa\x02pV[P\x82\x82\x1C[a\x02~`\x01`@\x1B\x84a\x0C\xFDV[\x92P`\x01[`@\x81\x13a\x02\xF9W`\x01`@\x1B\x82\x03\x15a\x02\xF9W`\x01`@\x1Ba\x02\xA6\x83\x80a\r,V[a\x02\xB0\x91\x90a\rCV[\x91Pa\x02\xC1`\x01`@\x1B`\x02a\r,V[\x82\x10a\x02\xE7Wa\x02\xD7`\x01`@\x1B\x82\x1C\x85a\x0C\xBCV[\x93Pa\x02\xE4`\x02\x83a\rCV[\x91P[\x80a\x02\xF1\x81a\rVV[\x91PPa\x02\x83V[P\x82a\x03\x06\x81`\x04a\x0C\xBCV[\x92P\x92PP\x91P\x91V[___a\x03\x1C\x85a\x04\x88V[\x90\x92P\x90P_\x84`\x02\x81\x11\x15a\x034Wa\x034a\x0C.V[\x03a\x03AWP\x90Pa\x021V[`\x01\x84`\x02\x81\x11\x15a\x03UWa\x03Ua\x0C.V[\x03a\x03cW\x91Pa\x021\x90PV[`\x02\x84`\x02\x81\x11\x15a\x03wWa\x03wa\x0C.V[\x03a\0\xB1W\x81`\x02a\x03\x89\x82\x84a\rtV[a\x03\x93\x91\x90a\rCV[a\x02,\x91\x90a\r\x87V[___a\x03\xA9\x84a\x027V[\x90\x92P\x90Ph\x01qTvR\xB8/\xE1w`\x01`@\x1B\x83`\x02a\x03\xCA\x82\x86a\x0CVV[a\x03\xD4\x91\x90a\x0C\x90V[a\x03\xDE\x91\x90a\x0C\xBCV[a\x03\xE8\x91\x90a\x0C\xFDV[a\x03\xF2\x91\x90a\x0C\x90V[\x94\x93PPPPV[`?\x19`\xC1_`\x01a\x04\x0C\x84\x84a\x0C\xBCV[\x90\x1D\x90P[\x81a\x04\x1D\x84`\x01a\x0C\xBCV[\x12\x15a\x04\x81W_\x81\x12\x80\x15a\x04@WP`\x01`@\x1Ba\x04;\x82a\x0C\xE3V[\x85\x90\x1B\x10[\x80a\x04[WP_\x81\x12\x15\x80\x15a\x04[WP`\x01`@\x1B\x84\x82\x1C\x10[\x15a\x04hW\x80\x91Pa\x04lV[\x80\x92P[`\x01a\x04x\x84\x84a\x0C\xBCV[\x90\x1D\x90Pa\x04\x11V[PP\x91\x90PV[__h\xBF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x13\x15a\x04\x9FW__\xFD[h?\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x83\x12\x15a\x04\xBCWP_\x92`\x01\x92P\x90PV[___\x85\x12a\x04\xEAWa\x04\xD3`\x01`@\x1B\x86a\x0C\x90V[\x91Pa\x04\xE3`\x01`@\x1B\x86a\r\x9AV[\x90Pa\x05,V[`\x01`\x01`@\x1Ba\x04\xFB\x87\x83a\x0C\xBCV[a\x05\x05\x91\x90a\x0C\x90V[a\x05\x0F\x91\x90a\x0CVV[\x91Pa\x05\x1F\x82`\x01`@\x1Ba\x0C\xFDV[a\x05)\x90\x86a\x0CVV[\x90P[_\x81\x12\x15a\x05<Wa\x05<a\r\xADV[`\x01`\x80\x1B\x81a\x05T\x81g\xB1r\x17\xF7\xD1\xCFy\xABa\x0C\xFDV[a\x05^\x90\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x05o\x84\x83a\x0C\xFDV[a\x05y\x91\x90a\x0C\x90V[\x90P`\x02a\x05\x8F\x82g\xF5\xFD\xEF\xFC\x16,uCa\x0C\xFDV[a\x05\x9A\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x05\xAB\x84\x83a\x0C\xFDV[a\x05\xB5\x91\x90a\x0C\x90V[\x90P`\x04a\x05\xCB\x82g\xE3XF\xB8%\x05\xFCYa\x0C\xFDV[a\x05\xD6\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x05\xE7\x84\x83a\x0C\xFDV[a\x05\xF1\x91\x90a\x0C\x90V[\x90P`\x06a\x06\x07\x82g\x9D\x95[}\xD2s\xB9Na\x0C\xFDV[a\x06\x12\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x06#\x84\x83a\x0C\xFDV[a\x06-\x91\x90a\x0C\x90V[\x90P`\ta\x06C\x82g\xAE\xC3\xFF<S9\x88\x83a\x0C\xFDV[a\x06N\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x06_\x84\x83a\x0C\xFDV[a\x06i\x91\x90a\x0C\x90V[\x90P`\x0Ca\x06\x7F\x82g\xA1\x84\x89|6<;za\x0C\xFDV[a\x06\x8A\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x06\x9B\x84\x83a\x0C\xFDV[a\x06\xA5\x91\x90a\x0C\x90V[\x90P`\x10a\x06\xBB\x82g\xFF\xE5\xFE,E\x8645a\x0C\xFDV[a\x06\xC6\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x06\xD7\x84\x83a\x0C\xFDV[a\x06\xE1\x91\x90a\x0C\x90V[\x90P`\x13a\x06\xF7\x82g\xB1`\x11\x1D.A\x1F\xECa\x0C\xFDV[a\x07\x02\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x07\x13\x84\x83a\x0C\xFDV[a\x07\x1D\x91\x90a\x0C\x90V[\x90P`\x17a\x073\x82g\xDA\x92\x9E\x9C\xAF>\x1E\xD2a\x0C\xFDV[a\x07>\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x07O\x84\x83a\x0C\xFDV[a\x07Y\x91\x90a\x0C\x90V[\x90P`\x1Ba\x07o\x82g\xF2g\xA8\xAC\\vO\xB7a\x0C\xFDV[a\x07z\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x07\x8B\x84\x83a\x0C\xFDV[a\x07\x95\x91\x90a\x0C\x90V[\x90P`\x1Fa\x07\xAB\x82g\xF4ec\x9A\x8D\xD9&\x07a\x0C\xFDV[a\x07\xB6\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x07\xC7\x84\x83a\x0C\xFDV[a\x07\xD1\x91\x90a\x0C\x90V[\x90P`#a\x07\xE7\x82g\xE1\xDE\xB2\x87\xE1L/\x15a\x0C\xFDV[a\x07\xF2\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08\x03\x84\x83a\x0C\xFDV[a\x08\r\x91\x90a\x0C\x90V[\x90P`'a\x08#\x82g\xC0\xB0\xC9\x8B6\x87\xCB\x14a\x0C\xFDV[a\x08.\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08?\x84\x83a\x0C\xFDV[a\x08I\x91\x90a\x0C\x90V[\x90P`+a\x08_\x82g\x98\xA4\xB2j\xC3\xC5K\x9Fa\x0C\xFDV[a\x08j\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08{\x84\x83a\x0C\xFDV[a\x08\x85\x91\x90a\x0C\x90V[\x90P`0a\x08\x9B\x82g\xE1\xB7B\x1D\x82\x01\x0F3a\x0C\xFDV[a\x08\xA6\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08\xB7\x84\x83a\x0C\xFDV[a\x08\xC1\x91\x90a\x0C\x90V[\x90P`4a\x08\xD7\x82g\x9CtMs\xCF\xC5\x9C\x91a\x0C\xFDV[a\x08\xE2\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08\xF3\x84\x83a\x0C\xFDV[a\x08\xFD\x91\x90a\x0C\x90V[\x90P`9a\t\x13\x82g\xCC\"%\xA0\xE1->\xABa\x0C\xFDV[a\t\x1E\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\t/\x84\x83a\x0C\xFDV[a\t9\x91\x90a\x0C\x90V[\x90P`>a\tO\x82g\xFB\x8B\xB5\xED\xA1\xB4\xAE\xB9a\x0C\xFDV[\x90\x1D\x90Pa\t]\x81\x83a\x0C\xBCV[\x91Pa\tn`\x01`@\x1B`\x08a\r,V[\x90Pa\t{`@\x85a\x0CVV[\x93P_\x84\x12a\t\xDEWa\t\x90\x84a\x01\0a\x0CVV[\x82\x90\x1D_\x03a\t\xCFW\x81\x84\x1B\x95P\x83\x1B\x85a\t\xAB\x82\x82a\r\x87V[\x10a\t\xC1Wa\t\xBA\x81\x87a\r\x87V[\x94Pa\t\xC6V[_\x19\x94P[PPPP\x91P\x91V[P_\x19\x96\x87\x96P\x94PPPPPV[a\t\xE7\x84a\x0C\xE3V[a\t\xF5\x90\x82\x90\x1D`\x01a\x0C\xBCV[\x90Pa\n\0\x84a\x0C\xE3V[\x82\x90\x1C\x95Pa\n\x0F\x81\x87a\r\x87V[\x94PPPPP\x91P\x91V[__\x82Q\x11a\n'W__\xFD[P`\x01`\xFF\x1B_[\x82Q\x81\x10\x15a\n~W\x81\x83\x82\x81Q\x81\x10a\nKWa\nKa\r\xC1V[` \x02` \x01\x01Q\x13\x15a\nvW\x82\x81\x81Q\x81\x10a\nkWa\nka\r\xC1V[` \x02` \x01\x01Q\x91P[`\x01\x01a\n/V[P\x91\x90PV[_h\x85\x15\x91\xF9\xDD[\x9B@\xD7\x82\x13\x15a\n\x9AW__\xFD[h,\\\x85\xFD\xF4s\xDEj\xF2\x19\x82\x13a\n\xB2WP_\x91\x90PV[_\x80a\n\xD8g\xB1r\x17\xF7\xD1\xCFy\xACa\n\xCE`\x01`@\x1B\x87a\x0C\xFDV[a\x01i\x91\x90a\x0C\x90V[\x90\x92P\x90P\x81`\x02a\n\xEA\x82\x84a\rtV[a\n\xF4\x91\x90a\rCV[a\x03\xF2\x91\x90a\r\x87V[\x805`\x03\x81\x10a\x0B\x0CW__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\x0B\"W__\xFD[\x825\x91Pa\x0B2` \x84\x01a\n\xFEV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x0BKW__\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x0BvW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x8CW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0B\x9CW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\xB6Wa\x0B\xB6a\x0BRV[\x80`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0B\xE3Wa\x0B\xE3a\x0BRV[`@R\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x87\x84\x11\x15a\x0C\0W__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\x0C#W\x845\x80\x82R` \x95\x86\x01\x95\x90\x93P\x01a\x0C\x07V[P\x96\x95PPPPPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15a\x0CuWa\x0Cua\x0CBV[P\x92\x91PPV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x0C\x9EWa\x0C\x9Ea\x0C|V[`\x01`\xFF\x1B\x82\x14_\x19\x84\x14\x16\x15a\x0C\xB7Wa\x0C\xB7a\x0CBV[P\x05\x90V[\x80\x82\x01\x82\x81\x12_\x83\x12\x80\x15\x82\x16\x82\x15\x82\x16\x17\x15a\x0C\xDBWa\x0C\xDBa\x0CBV[PP\x92\x91PPV[_`\x01`\xFF\x1B\x82\x01a\x0C\xF7Wa\x0C\xF7a\x0CBV[P_\x03\x90V[\x80\x82\x02_\x82\x12`\x01`\xFF\x1B\x84\x14\x16\x15a\r\x18Wa\r\x18a\x0CBV[\x81\x81\x05\x83\x14\x82\x15\x17a\x021Wa\x021a\x0CBV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x021Wa\x021a\x0CBV[_\x82a\rQWa\rQa\x0C|V[P\x04\x90V[_`\x01`\x01`\xFF\x1B\x01\x82\x01a\rmWa\rma\x0CBV[P`\x01\x01\x90V[\x81\x81\x03\x81\x81\x11\x15a\x021Wa\x021a\x0CBV[\x80\x82\x01\x80\x82\x11\x15a\x021Wa\x021a\x0CBV[_\x82a\r\xA8Wa\r\xA8a\x0C|V[P\x07\x90V[cNH{q`\xE0\x1B_R`\x01`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xCB\xF3]Z\x81\xAF>\x93h\xCD\xB0\x14F\xDE\xAF\x1A\xE5i(+\n6\xB4\xA2\xD0nl\x19\xB1\xDE\xD32dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x73000000000000000000000000000000000000000030146080604052600436106100b1575f3560e01c806324d4e90a1161007957806324d4e90a1461013557806345b8bafc14610148578063c12662271461015b578063c2ee3a081461016e578063ccc1381414610179578063e46751e31461018c575f5ffd5b806302780677146100b5578063137bf798146100d75780631427f168146100ea5780631d5801231461011257806324902e2414610125575b5f5ffd5b6100c467b17217f7d1cf79ac81565b6040519081526020015b60405180910390f35b6100c46100e5366004610b11565b61019f565b6100fd6100f8366004610b3b565b610237565b604080519283526020830191909152016100ce565b6100c4610120366004610b11565b610310565b6100c4680171547652b82fe17781565b6100c4610143366004610b3b565b61039d565b6100c4610156366004610b3b565b6103fa565b6100fd610169366004610b3b565b610488565b6100c4600160401b81565b6100c4610187366004610b66565b610a1a565b6100c461019a366004610b3b565b610a84565b5f5f5f6101ab85610237565b90925090505f8460028111156101c3576101c3610c2e565b036101d057509050610231565b60018460028111156101e4576101e4610c2e565b036101f25791506102319050565b600284600281111561020657610206610c2e565b036100b1578160026102188284610c56565b6102229190610c90565b61022c9190610cbc565b925050505b92915050565b5f5f5f8311610244575f5ffd5b61024d836103fa565b91505f5f83121561026b5761026183610ce3565b84901b9050610270565b5082821c5b61027e600160401b84610cfd565b925060015b604081136102f957600160401b8203156102f957600160401b6102a68380610d2c565b6102b09190610d43565b91506102c1600160401b6002610d2c565b82106102e7576102d7600160401b821c85610cbc565b93506102e4600283610d43565b91505b806102f181610d56565b915050610283565b5082610306816004610cbc565b9250925050915091565b5f5f5f61031c85610488565b90925090505f84600281111561033457610334610c2e565b0361034157509050610231565b600184600281111561035557610355610c2e565b036103635791506102319050565b600284600281111561037757610377610c2e565b036100b1578160026103898284610d74565b6103939190610d43565b61022c9190610d87565b5f5f5f6103a984610237565b9092509050680171547652b82fe177600160401b8360026103ca8286610c56565b6103d49190610c90565b6103de9190610cbc565b6103e89190610cfd565b6103f29190610c90565b949350505050565b603f1960c15f600161040c8484610cbc565b901d90505b8161041d846001610cbc565b1215610481575f811280156104405750600160401b61043b82610ce3565b85901b105b8061045b57505f811215801561045b5750600160401b84821c105b156104685780915061046c565b8092505b60016104788484610cbc565b901d9050610411565b5050919050565b5f5f68bfffffffffffffffff83131561049f575f5ffd5b683fffffffffffffffff198312156104bc57505f92600192509050565b5f5f5f85126104ea576104d3600160401b86610c90565b91506104e3600160401b86610d9a565b905061052c565b6001600160401b6104fb8783610cbc565b6105059190610c90565b61050f9190610c56565b915061051f82600160401b610cfd565b6105299086610c56565b90505b5f81121561053c5761053c610dad565b600160801b816105548167b17217f7d1cf79ab610cfd565b61055e9083610cbc565b9150600160401b61056f8483610cfd565b6105799190610c90565b9050600261058f8267f5fdeffc162c7543610cfd565b61059a911d83610cbc565b9150600160401b6105ab8483610cfd565b6105b59190610c90565b905060046105cb8267e35846b82505fc59610cfd565b6105d6911d83610cbc565b9150600160401b6105e78483610cfd565b6105f19190610c90565b9050600661060782679d955b7dd273b94e610cfd565b610612911d83610cbc565b9150600160401b6106238483610cfd565b61062d9190610c90565b905060096106438267aec3ff3c53398883610cfd565b61064e911d83610cbc565b9150600160401b61065f8483610cfd565b6106699190610c90565b9050600c61067f8267a184897c363c3b7a610cfd565b61068a911d83610cbc565b9150600160401b61069b8483610cfd565b6106a59190610c90565b905060106106bb8267ffe5fe2c45863435610cfd565b6106c6911d83610cbc565b9150600160401b6106d78483610cfd565b6106e19190610c90565b905060136106f78267b160111d2e411fec610cfd565b610702911d83610cbc565b9150600160401b6107138483610cfd565b61071d9190610c90565b905060176107338267da929e9caf3e1ed2610cfd565b61073e911d83610cbc565b9150600160401b61074f8483610cfd565b6107599190610c90565b9050601b61076f8267f267a8ac5c764fb7610cfd565b61077a911d83610cbc565b9150600160401b61078b8483610cfd565b6107959190610c90565b9050601f6107ab8267f465639a8dd92607610cfd565b6107b6911d83610cbc565b9150600160401b6107c78483610cfd565b6107d19190610c90565b905060236107e78267e1deb287e14c2f15610cfd565b6107f2911d83610cbc565b9150600160401b6108038483610cfd565b61080d9190610c90565b905060276108238267c0b0c98b3687cb14610cfd565b61082e911d83610cbc565b9150600160401b61083f8483610cfd565b6108499190610c90565b9050602b61085f826798a4b26ac3c54b9f610cfd565b61086a911d83610cbc565b9150600160401b61087b8483610cfd565b6108859190610c90565b9050603061089b8267e1b7421d82010f33610cfd565b6108a6911d83610cbc565b9150600160401b6108b78483610cfd565b6108c19190610c90565b905060346108d782679c744d73cfc59c91610cfd565b6108e2911d83610cbc565b9150600160401b6108f38483610cfd565b6108fd9190610c90565b905060396109138267cc2225a0e12d3eab610cfd565b61091e911d83610cbc565b9150600160401b61092f8483610cfd565b6109399190610c90565b9050603e61094f8267fb8bb5eda1b4aeb9610cfd565b901d905061095d8183610cbc565b915061096e600160401b6008610d2c565b905061097b604085610c56565b93505f84126109de5761099084610100610c56565b82901d5f036109cf5781841b9550831b856109ab8282610d87565b106109c1576109ba8187610d87565b94506109c6565b5f1994505b50505050915091565b505f1996879650945050505050565b6109e784610ce3565b6109f59082901d6001610cbc565b9050610a0084610ce3565b82901c9550610a0f8187610d87565b945050505050915091565b5f5f825111610a27575f5ffd5b50600160ff1b5f5b8251811015610a7e5781838281518110610a4b57610a4b610dc1565b60200260200101511315610a7657828181518110610a6b57610a6b610dc1565b602002602001015191505b600101610a2f565b50919050565b5f68851591f9dd5b9b40d7821315610a9a575f5ffd5b682c5c85fdf473de6af2198213610ab257505f919050565b5f80610ad867b17217f7d1cf79ac610ace600160401b87610cfd565b6101699190610c90565b9092509050816002610aea8284610d74565b610af49190610d43565b6103f29190610d87565b803560038110610b0c575f5ffd5b919050565b5f5f60408385031215610b22575f5ffd5b82359150610b3260208401610afe565b90509250929050565b5f60208284031215610b4b575f5ffd5b5035919050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610b76575f5ffd5b813567ffffffffffffffff811115610b8c575f5ffd5b8201601f81018413610b9c575f5ffd5b803567ffffffffffffffff811115610bb657610bb6610b52565b8060051b604051601f19603f830116810181811067ffffffffffffffff82111715610be357610be3610b52565b604052918252602081840181019290810187841115610c00575f5ffd5b6020850194505b83851015610c2357843580825260209586019590935001610c07565b509695505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b8181035f831280158383131683831282161715610c7557610c75610c42565b5092915050565b634e487b7160e01b5f52601260045260245ffd5b5f82610c9e57610c9e610c7c565b600160ff1b82145f1984141615610cb757610cb7610c42565b500590565b8082018281125f831280158216821582161715610cdb57610cdb610c42565b505092915050565b5f600160ff1b8201610cf757610cf7610c42565b505f0390565b8082025f8212600160ff1b84141615610d1857610d18610c42565b818105831482151761023157610231610c42565b808202811582820484141761023157610231610c42565b5f82610d5157610d51610c7c565b500490565b5f6001600160ff1b018201610d6d57610d6d610c42565b5060010190565b8181038181111561023157610231610c42565b8082018082111561023157610231610c42565b5f82610da857610da8610c7c565b500790565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52603260045260245ffdfea2646970667358221220cbf35d5a81af3e9368cdb01446deaf1ae569282b0a36b4a2d06e6c19b1ded33264736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x000\x14`\x80`@R`\x046\x10a\0\xB1W_5`\xE0\x1C\x80c$\xD4\xE9\n\x11a\0yW\x80c$\xD4\xE9\n\x14a\x015W\x80cE\xB8\xBA\xFC\x14a\x01HW\x80c\xC1&b'\x14a\x01[W\x80c\xC2\xEE:\x08\x14a\x01nW\x80c\xCC\xC18\x14\x14a\x01yW\x80c\xE4gQ\xE3\x14a\x01\x8CW__\xFD[\x80c\x02x\x06w\x14a\0\xB5W\x80c\x13{\xF7\x98\x14a\0\xD7W\x80c\x14'\xF1h\x14a\0\xEAW\x80c\x1DX\x01#\x14a\x01\x12W\x80c$\x90.$\x14a\x01%W[__\xFD[a\0\xC4g\xB1r\x17\xF7\xD1\xCFy\xAC\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xC4a\0\xE56`\x04a\x0B\x11V[a\x01\x9FV[a\0\xFDa\0\xF86`\x04a\x0B;V[a\x027V[`@\x80Q\x92\x83R` \x83\x01\x91\x90\x91R\x01a\0\xCEV[a\0\xC4a\x01 6`\x04a\x0B\x11V[a\x03\x10V[a\0\xC4h\x01qTvR\xB8/\xE1w\x81V[a\0\xC4a\x01C6`\x04a\x0B;V[a\x03\x9DV[a\0\xC4a\x01V6`\x04a\x0B;V[a\x03\xFAV[a\0\xFDa\x01i6`\x04a\x0B;V[a\x04\x88V[a\0\xC4`\x01`@\x1B\x81V[a\0\xC4a\x01\x876`\x04a\x0BfV[a\n\x1AV[a\0\xC4a\x01\x9A6`\x04a\x0B;V[a\n\x84V[___a\x01\xAB\x85a\x027V[\x90\x92P\x90P_\x84`\x02\x81\x11\x15a\x01\xC3Wa\x01\xC3a\x0C.V[\x03a\x01\xD0WP\x90Pa\x021V[`\x01\x84`\x02\x81\x11\x15a\x01\xE4Wa\x01\xE4a\x0C.V[\x03a\x01\xF2W\x91Pa\x021\x90PV[`\x02\x84`\x02\x81\x11\x15a\x02\x06Wa\x02\x06a\x0C.V[\x03a\0\xB1W\x81`\x02a\x02\x18\x82\x84a\x0CVV[a\x02\"\x91\x90a\x0C\x90V[a\x02,\x91\x90a\x0C\xBCV[\x92PPP[\x92\x91PPV[___\x83\x11a\x02DW__\xFD[a\x02M\x83a\x03\xFAV[\x91P__\x83\x12\x15a\x02kWa\x02a\x83a\x0C\xE3V[\x84\x90\x1B\x90Pa\x02pV[P\x82\x82\x1C[a\x02~`\x01`@\x1B\x84a\x0C\xFDV[\x92P`\x01[`@\x81\x13a\x02\xF9W`\x01`@\x1B\x82\x03\x15a\x02\xF9W`\x01`@\x1Ba\x02\xA6\x83\x80a\r,V[a\x02\xB0\x91\x90a\rCV[\x91Pa\x02\xC1`\x01`@\x1B`\x02a\r,V[\x82\x10a\x02\xE7Wa\x02\xD7`\x01`@\x1B\x82\x1C\x85a\x0C\xBCV[\x93Pa\x02\xE4`\x02\x83a\rCV[\x91P[\x80a\x02\xF1\x81a\rVV[\x91PPa\x02\x83V[P\x82a\x03\x06\x81`\x04a\x0C\xBCV[\x92P\x92PP\x91P\x91V[___a\x03\x1C\x85a\x04\x88V[\x90\x92P\x90P_\x84`\x02\x81\x11\x15a\x034Wa\x034a\x0C.V[\x03a\x03AWP\x90Pa\x021V[`\x01\x84`\x02\x81\x11\x15a\x03UWa\x03Ua\x0C.V[\x03a\x03cW\x91Pa\x021\x90PV[`\x02\x84`\x02\x81\x11\x15a\x03wWa\x03wa\x0C.V[\x03a\0\xB1W\x81`\x02a\x03\x89\x82\x84a\rtV[a\x03\x93\x91\x90a\rCV[a\x02,\x91\x90a\r\x87V[___a\x03\xA9\x84a\x027V[\x90\x92P\x90Ph\x01qTvR\xB8/\xE1w`\x01`@\x1B\x83`\x02a\x03\xCA\x82\x86a\x0CVV[a\x03\xD4\x91\x90a\x0C\x90V[a\x03\xDE\x91\x90a\x0C\xBCV[a\x03\xE8\x91\x90a\x0C\xFDV[a\x03\xF2\x91\x90a\x0C\x90V[\x94\x93PPPPV[`?\x19`\xC1_`\x01a\x04\x0C\x84\x84a\x0C\xBCV[\x90\x1D\x90P[\x81a\x04\x1D\x84`\x01a\x0C\xBCV[\x12\x15a\x04\x81W_\x81\x12\x80\x15a\x04@WP`\x01`@\x1Ba\x04;\x82a\x0C\xE3V[\x85\x90\x1B\x10[\x80a\x04[WP_\x81\x12\x15\x80\x15a\x04[WP`\x01`@\x1B\x84\x82\x1C\x10[\x15a\x04hW\x80\x91Pa\x04lV[\x80\x92P[`\x01a\x04x\x84\x84a\x0C\xBCV[\x90\x1D\x90Pa\x04\x11V[PP\x91\x90PV[__h\xBF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x13\x15a\x04\x9FW__\xFD[h?\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x83\x12\x15a\x04\xBCWP_\x92`\x01\x92P\x90PV[___\x85\x12a\x04\xEAWa\x04\xD3`\x01`@\x1B\x86a\x0C\x90V[\x91Pa\x04\xE3`\x01`@\x1B\x86a\r\x9AV[\x90Pa\x05,V[`\x01`\x01`@\x1Ba\x04\xFB\x87\x83a\x0C\xBCV[a\x05\x05\x91\x90a\x0C\x90V[a\x05\x0F\x91\x90a\x0CVV[\x91Pa\x05\x1F\x82`\x01`@\x1Ba\x0C\xFDV[a\x05)\x90\x86a\x0CVV[\x90P[_\x81\x12\x15a\x05<Wa\x05<a\r\xADV[`\x01`\x80\x1B\x81a\x05T\x81g\xB1r\x17\xF7\xD1\xCFy\xABa\x0C\xFDV[a\x05^\x90\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x05o\x84\x83a\x0C\xFDV[a\x05y\x91\x90a\x0C\x90V[\x90P`\x02a\x05\x8F\x82g\xF5\xFD\xEF\xFC\x16,uCa\x0C\xFDV[a\x05\x9A\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x05\xAB\x84\x83a\x0C\xFDV[a\x05\xB5\x91\x90a\x0C\x90V[\x90P`\x04a\x05\xCB\x82g\xE3XF\xB8%\x05\xFCYa\x0C\xFDV[a\x05\xD6\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x05\xE7\x84\x83a\x0C\xFDV[a\x05\xF1\x91\x90a\x0C\x90V[\x90P`\x06a\x06\x07\x82g\x9D\x95[}\xD2s\xB9Na\x0C\xFDV[a\x06\x12\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x06#\x84\x83a\x0C\xFDV[a\x06-\x91\x90a\x0C\x90V[\x90P`\ta\x06C\x82g\xAE\xC3\xFF<S9\x88\x83a\x0C\xFDV[a\x06N\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x06_\x84\x83a\x0C\xFDV[a\x06i\x91\x90a\x0C\x90V[\x90P`\x0Ca\x06\x7F\x82g\xA1\x84\x89|6<;za\x0C\xFDV[a\x06\x8A\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x06\x9B\x84\x83a\x0C\xFDV[a\x06\xA5\x91\x90a\x0C\x90V[\x90P`\x10a\x06\xBB\x82g\xFF\xE5\xFE,E\x8645a\x0C\xFDV[a\x06\xC6\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x06\xD7\x84\x83a\x0C\xFDV[a\x06\xE1\x91\x90a\x0C\x90V[\x90P`\x13a\x06\xF7\x82g\xB1`\x11\x1D.A\x1F\xECa\x0C\xFDV[a\x07\x02\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x07\x13\x84\x83a\x0C\xFDV[a\x07\x1D\x91\x90a\x0C\x90V[\x90P`\x17a\x073\x82g\xDA\x92\x9E\x9C\xAF>\x1E\xD2a\x0C\xFDV[a\x07>\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x07O\x84\x83a\x0C\xFDV[a\x07Y\x91\x90a\x0C\x90V[\x90P`\x1Ba\x07o\x82g\xF2g\xA8\xAC\\vO\xB7a\x0C\xFDV[a\x07z\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x07\x8B\x84\x83a\x0C\xFDV[a\x07\x95\x91\x90a\x0C\x90V[\x90P`\x1Fa\x07\xAB\x82g\xF4ec\x9A\x8D\xD9&\x07a\x0C\xFDV[a\x07\xB6\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x07\xC7\x84\x83a\x0C\xFDV[a\x07\xD1\x91\x90a\x0C\x90V[\x90P`#a\x07\xE7\x82g\xE1\xDE\xB2\x87\xE1L/\x15a\x0C\xFDV[a\x07\xF2\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08\x03\x84\x83a\x0C\xFDV[a\x08\r\x91\x90a\x0C\x90V[\x90P`'a\x08#\x82g\xC0\xB0\xC9\x8B6\x87\xCB\x14a\x0C\xFDV[a\x08.\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08?\x84\x83a\x0C\xFDV[a\x08I\x91\x90a\x0C\x90V[\x90P`+a\x08_\x82g\x98\xA4\xB2j\xC3\xC5K\x9Fa\x0C\xFDV[a\x08j\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08{\x84\x83a\x0C\xFDV[a\x08\x85\x91\x90a\x0C\x90V[\x90P`0a\x08\x9B\x82g\xE1\xB7B\x1D\x82\x01\x0F3a\x0C\xFDV[a\x08\xA6\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08\xB7\x84\x83a\x0C\xFDV[a\x08\xC1\x91\x90a\x0C\x90V[\x90P`4a\x08\xD7\x82g\x9CtMs\xCF\xC5\x9C\x91a\x0C\xFDV[a\x08\xE2\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\x08\xF3\x84\x83a\x0C\xFDV[a\x08\xFD\x91\x90a\x0C\x90V[\x90P`9a\t\x13\x82g\xCC\"%\xA0\xE1->\xABa\x0C\xFDV[a\t\x1E\x91\x1D\x83a\x0C\xBCV[\x91P`\x01`@\x1Ba\t/\x84\x83a\x0C\xFDV[a\t9\x91\x90a\x0C\x90V[\x90P`>a\tO\x82g\xFB\x8B\xB5\xED\xA1\xB4\xAE\xB9a\x0C\xFDV[\x90\x1D\x90Pa\t]\x81\x83a\x0C\xBCV[\x91Pa\tn`\x01`@\x1B`\x08a\r,V[\x90Pa\t{`@\x85a\x0CVV[\x93P_\x84\x12a\t\xDEWa\t\x90\x84a\x01\0a\x0CVV[\x82\x90\x1D_\x03a\t\xCFW\x81\x84\x1B\x95P\x83\x1B\x85a\t\xAB\x82\x82a\r\x87V[\x10a\t\xC1Wa\t\xBA\x81\x87a\r\x87V[\x94Pa\t\xC6V[_\x19\x94P[PPPP\x91P\x91V[P_\x19\x96\x87\x96P\x94PPPPPV[a\t\xE7\x84a\x0C\xE3V[a\t\xF5\x90\x82\x90\x1D`\x01a\x0C\xBCV[\x90Pa\n\0\x84a\x0C\xE3V[\x82\x90\x1C\x95Pa\n\x0F\x81\x87a\r\x87V[\x94PPPPP\x91P\x91V[__\x82Q\x11a\n'W__\xFD[P`\x01`\xFF\x1B_[\x82Q\x81\x10\x15a\n~W\x81\x83\x82\x81Q\x81\x10a\nKWa\nKa\r\xC1V[` \x02` \x01\x01Q\x13\x15a\nvW\x82\x81\x81Q\x81\x10a\nkWa\nka\r\xC1V[` \x02` \x01\x01Q\x91P[`\x01\x01a\n/V[P\x91\x90PV[_h\x85\x15\x91\xF9\xDD[\x9B@\xD7\x82\x13\x15a\n\x9AW__\xFD[h,\\\x85\xFD\xF4s\xDEj\xF2\x19\x82\x13a\n\xB2WP_\x91\x90PV[_\x80a\n\xD8g\xB1r\x17\xF7\xD1\xCFy\xACa\n\xCE`\x01`@\x1B\x87a\x0C\xFDV[a\x01i\x91\x90a\x0C\x90V[\x90\x92P\x90P\x81`\x02a\n\xEA\x82\x84a\rtV[a\n\xF4\x91\x90a\rCV[a\x03\xF2\x91\x90a\r\x87V[\x805`\x03\x81\x10a\x0B\x0CW__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\x0B\"W__\xFD[\x825\x91Pa\x0B2` \x84\x01a\n\xFEV[\x90P\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\x0BKW__\xFD[P5\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x0BvW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x8CW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0B\x9CW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\xB6Wa\x0B\xB6a\x0BRV[\x80`\x05\x1B`@Q`\x1F\x19`?\x83\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0B\xE3Wa\x0B\xE3a\x0BRV[`@R\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x87\x84\x11\x15a\x0C\0W__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\x0C#W\x845\x80\x82R` \x95\x86\x01\x95\x90\x93P\x01a\x0C\x07V[P\x96\x95PPPPPPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15a\x0CuWa\x0Cua\x0CBV[P\x92\x91PPV[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[_\x82a\x0C\x9EWa\x0C\x9Ea\x0C|V[`\x01`\xFF\x1B\x82\x14_\x19\x84\x14\x16\x15a\x0C\xB7Wa\x0C\xB7a\x0CBV[P\x05\x90V[\x80\x82\x01\x82\x81\x12_\x83\x12\x80\x15\x82\x16\x82\x15\x82\x16\x17\x15a\x0C\xDBWa\x0C\xDBa\x0CBV[PP\x92\x91PPV[_`\x01`\xFF\x1B\x82\x01a\x0C\xF7Wa\x0C\xF7a\x0CBV[P_\x03\x90V[\x80\x82\x02_\x82\x12`\x01`\xFF\x1B\x84\x14\x16\x15a\r\x18Wa\r\x18a\x0CBV[\x81\x81\x05\x83\x14\x82\x15\x17a\x021Wa\x021a\x0CBV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x021Wa\x021a\x0CBV[_\x82a\rQWa\rQa\x0C|V[P\x04\x90V[_`\x01`\x01`\xFF\x1B\x01\x82\x01a\rmWa\rma\x0CBV[P`\x01\x01\x90V[\x81\x81\x03\x81\x81\x11\x15a\x021Wa\x021a\x0CBV[\x80\x82\x01\x80\x82\x11\x15a\x021Wa\x021a\x0CBV[_\x82a\r\xA8Wa\r\xA8a\x0C|V[P\x07\x90V[cNH{q`\xE0\x1B_R`\x01`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xCB\xF3]Z\x81\xAF>\x93h\xCD\xB0\x14F\xDE\xAF\x1A\xE5i(+\n6\xB4\xA2\xD0nl\x19\xB1\xDE\xD32dsolcC\0\x08\x1C\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EstimationMode(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<EstimationMode> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::Token<'_>
            {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::tokenize(self).0
            }
            #[inline]
            fn stv_abi_encode_packed_to(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::abi_encoded_size(
                    self,
                )
            }
        }
        #[automatically_derived]
        impl EstimationMode {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for EstimationMode {
            type RustType = u8;
            type Token<'a> =
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> =
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for EstimationMode {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(rust: &Self::RustType) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<8> as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    /**Function with signature `LN2()` and selector `0x02780677`.
    ```solidity
    function LN2() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LN2Call {}
    ///Container type for the return parameters of the [`LN2()`](LN2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LN2Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LN2Call> for UnderlyingRustTuple<'_> {
                fn from(value: LN2Call) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for LN2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LN2Return> for UnderlyingRustTuple<'_> {
                fn from(value: LN2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for LN2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for LN2Call {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = LN2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "LN2()";
            const SELECTOR: [u8; 4] = [2u8, 120u8, 6u8, 119u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `LOG2_E()` and selector `0x24902e24`.
    ```solidity
    function LOG2_E() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LOG2_ECall {}
    ///Container type for the return parameters of the [`LOG2_E()`](LOG2_ECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct LOG2_EReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LOG2_ECall> for UnderlyingRustTuple<'_> {
                fn from(value: LOG2_ECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for LOG2_ECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<LOG2_EReturn> for UnderlyingRustTuple<'_> {
                fn from(value: LOG2_EReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for LOG2_EReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for LOG2_ECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = LOG2_EReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "LOG2_E()";
            const SELECTOR: [u8; 4] = [36u8, 144u8, 46u8, 36u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `ONE()` and selector `0xc2ee3a08`.
    ```solidity
    function ONE() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ONECall {}
    ///Container type for the return parameters of the [`ONE()`](ONECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ONEReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ONECall> for UnderlyingRustTuple<'_> {
                fn from(value: ONECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ONECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ONEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ONEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ONEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ONECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = ONEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ONE()";
            const SELECTOR: [u8; 4] = [194u8, 238u8, 58u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `binaryLog(uint256,uint8)` and selector `0x6608bfff`.
    ```solidity
    function binaryLog(uint256 x, EstimationMode estimationMode) external pure returns (int256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct binaryLogCall {
        pub x: alloy::sol_types::private::primitives::aliases::U256,
        pub estimationMode: <EstimationMode as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`binaryLog(uint256,uint8)`](binaryLogCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct binaryLogReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>, EstimationMode);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                <EstimationMode as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<binaryLogCall> for UnderlyingRustTuple<'_> {
                fn from(value: binaryLogCall) -> Self {
                    (value.x, value.estimationMode)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for binaryLogCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x: tuple.0, estimationMode: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::I256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<binaryLogReturn> for UnderlyingRustTuple<'_> {
                fn from(value: binaryLogReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for binaryLogReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for binaryLogCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>, EstimationMode);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = binaryLogReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "binaryLog(uint256,uint8)";
            const SELECTOR: [u8; 4] = [102u8, 8u8, 191u8, 255u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.x,
                    ),
                    <EstimationMode as alloy_sol_types::SolType>::tokenize(&self.estimationMode),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `exp(int256)` and selector `0xe46751e3`.
    ```solidity
    function exp(int256 x) external pure returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expCall {
        pub x: alloy::sol_types::private::primitives::aliases::I256,
    }
    ///Container type for the return parameters of the [`exp(int256)`](expCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct expReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::I256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expCall> for UnderlyingRustTuple<'_> {
                fn from(value: expCall) -> Self {
                    (value.x,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for expCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<expReturn> for UnderlyingRustTuple<'_> {
                fn from(value: expReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for expReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for expCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = expReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "exp(int256)";
            const SELECTOR: [u8; 4] = [228u8, 103u8, 81u8, 227u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                    &self.x,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `floorLog2(uint256)` and selector `0x45b8bafc`.
    ```solidity
    function floorLog2(uint256 x) external pure returns (int256 lo);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct floorLog2Call {
        pub x: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`floorLog2(uint256)`](floorLog2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct floorLog2Return {
        pub lo: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<floorLog2Call> for UnderlyingRustTuple<'_> {
                fn from(value: floorLog2Call) -> Self {
                    (value.x,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for floorLog2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::I256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<floorLog2Return> for UnderlyingRustTuple<'_> {
                fn from(value: floorLog2Return) -> Self {
                    (value.lo,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for floorLog2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { lo: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for floorLog2Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = floorLog2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "floorLog2(uint256)";
            const SELECTOR: [u8; 4] = [69u8, 184u8, 186u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                    &self.x,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `ln(uint256)` and selector `0x24d4e90a`.
    ```solidity
    function ln(uint256 x) external pure returns (int256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lnCall {
        pub x: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ln(uint256)`](lnCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct lnReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lnCall> for UnderlyingRustTuple<'_> {
                fn from(value: lnCall) -> Self {
                    (value.x,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lnCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::I256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<lnReturn> for UnderlyingRustTuple<'_> {
                fn from(value: lnReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for lnReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for lnCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = lnReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ln(uint256)";
            const SELECTOR: [u8; 4] = [36u8, 212u8, 233u8, 10u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                    &self.x,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `log2Bounds(uint256)` and selector `0x1427f168`.
    ```solidity
    function log2Bounds(uint256 x) external pure returns (int256 lower, int256 upper);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct log2BoundsCall {
        pub x: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`log2Bounds(uint256)`](log2BoundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct log2BoundsReturn {
        pub lower: alloy::sol_types::private::primitives::aliases::I256,
        pub upper: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<log2BoundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: log2BoundsCall) -> Self {
                    (value.x,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for log2BoundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Int<256>, alloy::sol_types::sol_data::Int<256>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::I256,
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<log2BoundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: log2BoundsReturn) -> Self {
                    (value.lower, value.upper)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for log2BoundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { lower: tuple.0, upper: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for log2BoundsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = log2BoundsReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Int<256>, alloy::sol_types::sol_data::Int<256>);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "log2Bounds(uint256)";
            const SELECTOR: [u8; 4] = [20u8, 39u8, 241u8, 104u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                    &self.x,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `max(int256[])` and selector `0xccc13814`.
    ```solidity
    function max(int256[] memory nums) external pure returns (int256 maxNum);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxCall {
        pub nums:
            alloy::sol_types::private::Vec<alloy::sol_types::private::primitives::aliases::I256>,
    }
    ///Container type for the return parameters of the [`max(int256[])`](maxCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxReturn {
        pub maxNum: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Int<256>>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::I256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxCall> for UnderlyingRustTuple<'_> {
                fn from(value: maxCall) -> Self {
                    (value.nums,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { nums: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::I256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxReturn> for UnderlyingRustTuple<'_> {
                fn from(value: maxReturn) -> Self {
                    (value.maxNum,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for maxReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { maxNum: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxCall {
            type Parameters<'a> =
                (alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Int<256>>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = maxReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "max(int256[])";
            const SELECTOR: [u8; 4] = [204u8, 193u8, 56u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Int<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.nums),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `pow2(int256,uint8)` and selector `0x870cbeb1`.
    ```solidity
    function pow2(int256 x, EstimationMode estimationMode) external pure returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pow2Call {
        pub x: alloy::sol_types::private::primitives::aliases::I256,
        pub estimationMode: <EstimationMode as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`pow2(int256,uint8)`](pow2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pow2Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>, EstimationMode);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::I256,
                <EstimationMode as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pow2Call> for UnderlyingRustTuple<'_> {
                fn from(value: pow2Call) -> Self {
                    (value.x, value.estimationMode)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pow2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x: tuple.0, estimationMode: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pow2Return> for UnderlyingRustTuple<'_> {
                fn from(value: pow2Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pow2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pow2Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Int<256>, EstimationMode);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = pow2Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pow2(int256,uint8)";
            const SELECTOR: [u8; 4] = [135u8, 12u8, 190u8, 177u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                        &self.x,
                    ),
                    <EstimationMode as alloy_sol_types::SolType>::tokenize(&self.estimationMode),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `pow2Bounds(int256)` and selector `0xc1266227`.
    ```solidity
    function pow2Bounds(int256 x) external pure returns (uint256 lower, uint256 upper);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pow2BoundsCall {
        pub x: alloy::sol_types::private::primitives::aliases::I256,
    }
    ///Container type for the return parameters of the [`pow2Bounds(int256)`](pow2BoundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pow2BoundsReturn {
        pub lower: alloy::sol_types::private::primitives::aliases::U256,
        pub upper: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::I256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pow2BoundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: pow2BoundsCall) -> Self {
                    (value.x,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pow2BoundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> =
                (alloy::sol_types::sol_data::Uint<256>, alloy::sol_types::sol_data::Uint<256>);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pow2BoundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: pow2BoundsReturn) -> Self {
                    (value.lower, value.upper)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for pow2BoundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { lower: tuple.0, upper: tuple.1 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pow2BoundsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = pow2BoundsReturn;
            type ReturnTuple<'a> =
                (alloy::sol_types::sol_data::Uint<256>, alloy::sol_types::sol_data::Uint<256>);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pow2Bounds(int256)";
            const SELECTOR: [u8; 4] = [193u8, 38u8, 98u8, 39u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Int<256> as alloy_sol_types::SolType>::tokenize(
                    &self.x,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`Fixed192x64Math`](self) function calls.
    pub enum Fixed192x64MathCalls {
        LN2(LN2Call),
        LOG2_E(LOG2_ECall),
        ONE(ONECall),
        binaryLog(binaryLogCall),
        exp(expCall),
        floorLog2(floorLog2Call),
        ln(lnCall),
        log2Bounds(log2BoundsCall),
        max(maxCall),
        pow2(pow2Call),
        pow2Bounds(pow2BoundsCall),
    }
    #[automatically_derived]
    impl Fixed192x64MathCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [2u8, 120u8, 6u8, 119u8],
            [20u8, 39u8, 241u8, 104u8],
            [36u8, 144u8, 46u8, 36u8],
            [36u8, 212u8, 233u8, 10u8],
            [69u8, 184u8, 186u8, 252u8],
            [102u8, 8u8, 191u8, 255u8],
            [135u8, 12u8, 190u8, 177u8],
            [193u8, 38u8, 98u8, 39u8],
            [194u8, 238u8, 58u8, 8u8],
            [204u8, 193u8, 56u8, 20u8],
            [228u8, 103u8, 81u8, 227u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for Fixed192x64MathCalls {
        const NAME: &'static str = "Fixed192x64MathCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 11usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::LN2(_) => <LN2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::LOG2_E(_) => <LOG2_ECall as alloy_sol_types::SolCall>::SELECTOR,
                Self::ONE(_) => <ONECall as alloy_sol_types::SolCall>::SELECTOR,
                Self::binaryLog(_) => <binaryLogCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::exp(_) => <expCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::floorLog2(_) => <floorLog2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::ln(_) => <lnCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::log2Bounds(_) => <log2BoundsCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::max(_) => <maxCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pow2(_) => <pow2Call as alloy_sol_types::SolCall>::SELECTOR,
                Self::pow2Bounds(_) => <pow2BoundsCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<Fixed192x64MathCalls>] = &[
                {
                    fn LN2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <LN2Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::LN2)
                    }
                    LN2
                },
                {
                    fn log2Bounds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <log2BoundsCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::log2Bounds)
                    }
                    log2Bounds
                },
                {
                    fn LOG2_E(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <LOG2_ECall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::LOG2_E)
                    }
                    LOG2_E
                },
                {
                    fn ln(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <lnCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::ln)
                    }
                    ln
                },
                {
                    fn floorLog2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <floorLog2Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::floorLog2)
                    }
                    floorLog2
                },
                {
                    fn binaryLog(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <binaryLogCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::binaryLog)
                    }
                    binaryLog
                },
                {
                    fn pow2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <pow2Call as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::pow2)
                    }
                    pow2
                },
                {
                    fn pow2Bounds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <pow2BoundsCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::pow2Bounds)
                    }
                    pow2Bounds
                },
                {
                    fn ONE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <ONECall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::ONE)
                    }
                    ONE
                },
                {
                    fn max(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <maxCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::max)
                    }
                    max
                },
                {
                    fn exp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<Fixed192x64MathCalls> {
                        <expCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(Fixed192x64MathCalls::exp)
                    }
                    exp
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::LN2(inner) => <LN2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::LOG2_E(inner) => {
                    <LOG2_ECall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::ONE(inner) => <ONECall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::binaryLog(inner) => {
                    <binaryLogCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::exp(inner) => <expCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::floorLog2(inner) => {
                    <floorLog2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::ln(inner) => <lnCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::log2Bounds(inner) => {
                    <log2BoundsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::max(inner) => <maxCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::pow2(inner) => {
                    <pow2Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pow2Bounds(inner) => {
                    <pow2BoundsCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::LN2(inner) => {
                    <LN2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::LOG2_E(inner) => {
                    <LOG2_ECall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::ONE(inner) => {
                    <ONECall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::binaryLog(inner) => {
                    <binaryLogCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::exp(inner) => {
                    <expCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::floorLog2(inner) => {
                    <floorLog2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::ln(inner) => <lnCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out),
                Self::log2Bounds(inner) => {
                    <log2BoundsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::max(inner) => {
                    <maxCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pow2(inner) => {
                    <pow2Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pow2Bounds(inner) => {
                    <pow2BoundsCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Fixed192x64Math`](self) contract instance.

    See the [wrapper's documentation](`Fixed192x64MathInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> Fixed192x64MathInstance<T, P, N> {
        Fixed192x64MathInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<Fixed192x64MathInstance<T, P, N>>>
    {
        Fixed192x64MathInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        Fixed192x64MathInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Fixed192x64Math`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`Fixed192x64Math`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct Fixed192x64MathInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for Fixed192x64MathInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("Fixed192x64MathInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > Fixed192x64MathInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`Fixed192x64Math`](self) contract instance.

        See the [wrapper's documentation](`Fixed192x64MathInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<Fixed192x64MathInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> Fixed192x64MathInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> Fixed192x64MathInstance<T, P, N> {
            Fixed192x64MathInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > Fixed192x64MathInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`LN2`] function.
        pub fn LN2(&self) -> alloy_contract::SolCallBuilder<T, &P, LN2Call, N> {
            self.call_builder(&LN2Call {})
        }
        ///Creates a new call builder for the [`LOG2_E`] function.
        pub fn LOG2_E(&self) -> alloy_contract::SolCallBuilder<T, &P, LOG2_ECall, N> {
            self.call_builder(&LOG2_ECall {})
        }
        ///Creates a new call builder for the [`ONE`] function.
        pub fn ONE(&self) -> alloy_contract::SolCallBuilder<T, &P, ONECall, N> {
            self.call_builder(&ONECall {})
        }
        ///Creates a new call builder for the [`binaryLog`] function.
        pub fn binaryLog(
            &self,
            x: alloy::sol_types::private::primitives::aliases::U256,
            estimationMode: <EstimationMode as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, binaryLogCall, N> {
            self.call_builder(&binaryLogCall { x, estimationMode })
        }
        ///Creates a new call builder for the [`exp`] function.
        pub fn exp(
            &self,
            x: alloy::sol_types::private::primitives::aliases::I256,
        ) -> alloy_contract::SolCallBuilder<T, &P, expCall, N> {
            self.call_builder(&expCall { x })
        }
        ///Creates a new call builder for the [`floorLog2`] function.
        pub fn floorLog2(
            &self,
            x: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, floorLog2Call, N> {
            self.call_builder(&floorLog2Call { x })
        }
        ///Creates a new call builder for the [`ln`] function.
        pub fn ln(
            &self,
            x: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, lnCall, N> {
            self.call_builder(&lnCall { x })
        }
        ///Creates a new call builder for the [`log2Bounds`] function.
        pub fn log2Bounds(
            &self,
            x: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, log2BoundsCall, N> {
            self.call_builder(&log2BoundsCall { x })
        }
        ///Creates a new call builder for the [`max`] function.
        pub fn max(
            &self,
            nums: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::I256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, maxCall, N> {
            self.call_builder(&maxCall { nums })
        }
        ///Creates a new call builder for the [`pow2`] function.
        pub fn pow2(
            &self,
            x: alloy::sol_types::private::primitives::aliases::I256,
            estimationMode: <EstimationMode as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, pow2Call, N> {
            self.call_builder(&pow2Call { x, estimationMode })
        }
        ///Creates a new call builder for the [`pow2Bounds`] function.
        pub fn pow2Bounds(
            &self,
            x: alloy::sol_types::private::primitives::aliases::I256,
        ) -> alloy_contract::SolCallBuilder<T, &P, pow2BoundsCall, N> {
            self.call_builder(&pow2BoundsCall { x })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > Fixed192x64MathInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
