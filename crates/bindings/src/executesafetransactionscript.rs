/**

Generated by the following Solidity interface...
```solidity
interface ExecuteSafeTransactionScript {
    function IS_SCRIPT() external view returns (bool);
    function factory() external view returns (address);
    function run() external;
    function safeSingleton() external view returns (address);
    function setUp() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "factory",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract SafeProxyFactory"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "safeSingleton",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract Safe"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "setUp",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod ExecuteSafeTransactionScript {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b506109868061002d5f395ff3fe608060405234801561000f575f5ffd5b5060043610610055575f3560e01c80630a9254e414610059578063ac7d146b1461005b578063c040622614610092578063c45a01551461009a578063f8ccbf47146100ad575b5f5ffd5b005b600c5461007590630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100596100d0565b600d54610075906001600160a01b031681565b600c546100c09062010000900460ff1681565b6040519015158152602001610089565b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa15801561013b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061015f9190610721565b60405163ce817d4760e01b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b1580156101ac575f5ffd5b505af11580156101be573d5f5f3e3d5ffd5b505060405163350d56bf60e01b815260206004820152600c60248201526b534146455f4144445245535360a01b60448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa15801561022e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102529190610738565b90505f816001600160a01b03166702c68af0bb1400006040515f6040518083038185875af1925050503d805f81146102a5576040519150601f19603f3d011682016040523d82523d5f602084013e6102aa565b606091505b50509050806102ff5760405162461bcd60e51b815260206004820152601a60248201527f4661696c656420746f2073656e642045544820746f2053616665000000000000604482015260640160405180910390fd5b61033d6040518060400160405280601881526020017f46756e6465642053616665207769746820302e32204554480000000000000000815250610572565b5f8080737109709ecfa91a80626ff3989d68f67f5b1dd12d63e341eaa487610364886105b8565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401606060405180830381865afa1580156103a3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c79190610765565b925092509250846001600160a01b0316636a76120273f39fd6e51aad88f6f4ce6ab8827279cfffb9226667016345785d8a00005f5f5f5f5f5f8b8b8e60405160200161043393929190928352602083019190915260f81b6001600160f81b031916604082015260410190565b6040516020818303038152906040526040518a63ffffffff1660e01b815260040161046699989796959493929190610801565b6020604051808303815f875af1158015610482573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a69190610885565b506104fa6040518060400160405280601881526020017f4578656375746564207472616e73616374696f6e20746f3a000000000000000081525073f39fd6e51aad88f6f4ce6ab8827279cfffb922666106b5565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610554575f5ffd5b505af1158015610566573d5f5f3e3d5ffd5b50505050505050505050565b6105b58160405160240161058691906108a4565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526106fe565b50565b5f816001600160a01b031663d8d11f7873f39fd6e51aad88f6f4ce6ab8827279cfffb9226667016345785d8a00005f5f5f5f5f5f8b6001600160a01b031663affed0e06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610628573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061064c9190610721565b6040518a63ffffffff1660e01b8152600401610670999897969594939291906108b6565b602060405180830381865afa15801561068b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106af9190610721565b92915050565b6106fa82826040516024016106cb929190610927565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526106fe565b5050565b6105b5815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f60208284031215610731575f5ffd5b5051919050565b5f60208284031215610748575f5ffd5b81516001600160a01b038116811461075e575f5ffd5b9392505050565b5f5f5f60608486031215610777575f5ffd5b835160ff81168114610787575f5ffd5b602085015160409095015190969495509392505050565b600281106107ba57634e487b7160e01b5f52602160045260245ffd5b9052565b5f81518084525f5b818110156107e2576020818501810151868301820152016107c6565b505f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038a16815260208101899052610140604082018190525f90820152610830606082018961079e565b6080810187905260a0810186905260c081018590526001600160a01b0384811660e0830152831661010082015261016061012082018190525f90610876908301846107be565b9b9a5050505050505050505050565b5f60208284031215610895575f5ffd5b8151801515811461075e575f5ffd5b602081525f61075e60208301846107be565b6001600160a01b038a16815260208101899052610140604082018190525f9082015261016081016108ea606083018a61079e565b608082019790975260a081019590955260c08501939093526001600160a01b0391821660e085015216610100830152610120909101529392505050565b604081525f61093960408301856107be565b905060018060a01b0383166020830152939250505056fea26469706673582212205184941bc54c45f9d566239a4a9762dc646a944e0f7aba3f65dddd119cee9eed64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa\t\x86\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0UW_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0YW\x80c\xAC}\x14k\x14a\0[W\x80c\xC0@b&\x14a\0\x92W\x80c\xC4Z\x01U\x14a\0\x9AW\x80c\xF8\xCC\xBFG\x14a\0\xADW[__\xFD[\0[`\x0CTa\0u\x90c\x01\0\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0Ya\0\xD0V[`\rTa\0u\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x0CTa\0\xC0\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\x89V[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01;W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01_\x91\x90a\x07!V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xACW__\xFD[PZ\xF1\x15\x80\x15a\x01\xBEW=__>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01RkSAFE_ADDRESS`\xA0\x1B`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02.W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02R\x91\x90a\x078V[\x90P_\x81`\x01`\x01`\xA0\x1B\x03\x16g\x02\xC6\x8A\xF0\xBB\x14\0\0`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x02\xA5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02\xAAV[``\x91P[PP\x90P\x80a\x02\xFFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FFailed to send ETH to Safe\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[a\x03=`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FFunded Safe with 0.2 ETH\0\0\0\0\0\0\0\0\x81RPa\x05rV[_\x80\x80sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-c\xE3A\xEA\xA4\x87a\x03d\x88a\x05\xB8V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01```@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xA3W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC7\x91\x90a\x07eV[\x92P\x92P\x92P\x84`\x01`\x01`\xA0\x1B\x03\x16cjv\x12\x02s\xF3\x9F\xD6\xE5\x1A\xAD\x88\xF6\xF4\xCEj\xB8\x82ry\xCF\xFF\xB9\"fg\x01cEx]\x8A\0\0______\x8B\x8B\x8E`@Q` \x01a\x043\x93\x92\x91\x90\x92\x83R` \x83\x01\x91\x90\x91R`\xF8\x1B`\x01`\x01`\xF8\x1B\x03\x19\x16`@\x82\x01R`A\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x8Ac\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04f\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x08\x01V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04\x82W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xA6\x91\x90a\x08\x85V[Pa\x04\xFA`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FExecuted transaction to:\0\0\0\0\0\0\0\0\x81RPs\xF3\x9F\xD6\xE5\x1A\xAD\x88\xF6\xF4\xCEj\xB8\x82ry\xCF\xFF\xB9\"fa\x06\xB5V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05TW__\xFD[PZ\xF1\x15\x80\x15a\x05fW=__>=_\xFD[PPPPPPPPPPV[a\x05\xB5\x81`@Q`$\x01a\x05\x86\x91\x90a\x08\xA4V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x06\xFEV[PV[_\x81`\x01`\x01`\xA0\x1B\x03\x16c\xD8\xD1\x1Fxs\xF3\x9F\xD6\xE5\x1A\xAD\x88\xF6\xF4\xCEj\xB8\x82ry\xCF\xFF\xB9\"fg\x01cEx]\x8A\0\0______\x8B`\x01`\x01`\xA0\x1B\x03\x16c\xAF\xFE\xD0\xE0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06(W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06L\x91\x90a\x07!V[`@Q\x8Ac\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06p\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x08\xB6V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06\x8BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\xAF\x91\x90a\x07!V[\x92\x91PPV[a\x06\xFA\x82\x82`@Q`$\x01a\x06\xCB\x92\x91\x90a\t'V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x06\xFEV[PPV[a\x05\xB5\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[_` \x82\x84\x03\x12\x15a\x071W__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x07HW__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07^W__\xFD[\x93\x92PPPV[___``\x84\x86\x03\x12\x15a\x07wW__\xFD[\x83Q`\xFF\x81\x16\x81\x14a\x07\x87W__\xFD[` \x85\x01Q`@\x90\x95\x01Q\x90\x96\x94\x95P\x93\x92PPPV[`\x02\x81\x10a\x07\xBAWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[_\x81Q\x80\x84R_[\x81\x81\x10\x15a\x07\xE2W` \x81\x85\x01\x81\x01Q\x86\x83\x01\x82\x01R\x01a\x07\xC6V[P_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x8A\x16\x81R` \x81\x01\x89\x90Ra\x01@`@\x82\x01\x81\x90R_\x90\x82\x01Ra\x080``\x82\x01\x89a\x07\x9EV[`\x80\x81\x01\x87\x90R`\xA0\x81\x01\x86\x90R`\xC0\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`\xE0\x83\x01R\x83\x16a\x01\0\x82\x01Ra\x01`a\x01 \x82\x01\x81\x90R_\x90a\x08v\x90\x83\x01\x84a\x07\xBEV[\x9B\x9APPPPPPPPPPPV[_` \x82\x84\x03\x12\x15a\x08\x95W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x07^W__\xFD[` \x81R_a\x07^` \x83\x01\x84a\x07\xBEV[`\x01`\x01`\xA0\x1B\x03\x8A\x16\x81R` \x81\x01\x89\x90Ra\x01@`@\x82\x01\x81\x90R_\x90\x82\x01Ra\x01`\x81\x01a\x08\xEA``\x83\x01\x8Aa\x07\x9EV[`\x80\x82\x01\x97\x90\x97R`\xA0\x81\x01\x95\x90\x95R`\xC0\x85\x01\x93\x90\x93R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\xE0\x85\x01R\x16a\x01\0\x83\x01Ra\x01 \x90\x91\x01R\x93\x92PPPV[`@\x81R_a\t9`@\x83\x01\x85a\x07\xBEV[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV\xFE\xA2dipfsX\"\x12 Q\x84\x94\x1B\xC5LE\xF9\xD5f#\x9AJ\x97b\xDCdj\x94N\x0Fz\xBA?e\xDD\xDD\x11\x9C\xEE\x9E\xEDdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610055575f3560e01c80630a9254e414610059578063ac7d146b1461005b578063c040622614610092578063c45a01551461009a578063f8ccbf47146100ad575b5f5ffd5b005b600c5461007590630100000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100596100d0565b600d54610075906001600160a01b031681565b600c546100c09062010000900460ff1681565b6040519015158152602001610089565b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa15801561013b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061015f9190610721565b60405163ce817d4760e01b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b1580156101ac575f5ffd5b505af11580156101be573d5f5f3e3d5ffd5b505060405163350d56bf60e01b815260206004820152600c60248201526b534146455f4144445245535360a01b60448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa15801561022e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102529190610738565b90505f816001600160a01b03166702c68af0bb1400006040515f6040518083038185875af1925050503d805f81146102a5576040519150601f19603f3d011682016040523d82523d5f602084013e6102aa565b606091505b50509050806102ff5760405162461bcd60e51b815260206004820152601a60248201527f4661696c656420746f2073656e642045544820746f2053616665000000000000604482015260640160405180910390fd5b61033d6040518060400160405280601881526020017f46756e6465642053616665207769746820302e32204554480000000000000000815250610572565b5f8080737109709ecfa91a80626ff3989d68f67f5b1dd12d63e341eaa487610364886105b8565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401606060405180830381865afa1580156103a3573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c79190610765565b925092509250846001600160a01b0316636a76120273f39fd6e51aad88f6f4ce6ab8827279cfffb9226667016345785d8a00005f5f5f5f5f5f8b8b8e60405160200161043393929190928352602083019190915260f81b6001600160f81b031916604082015260410190565b6040516020818303038152906040526040518a63ffffffff1660e01b815260040161046699989796959493929190610801565b6020604051808303815f875af1158015610482573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a69190610885565b506104fa6040518060400160405280601881526020017f4578656375746564207472616e73616374696f6e20746f3a000000000000000081525073f39fd6e51aad88f6f4ce6ab8827279cfffb922666106b5565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610554575f5ffd5b505af1158015610566573d5f5f3e3d5ffd5b50505050505050505050565b6105b58160405160240161058691906108a4565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526106fe565b50565b5f816001600160a01b031663d8d11f7873f39fd6e51aad88f6f4ce6ab8827279cfffb9226667016345785d8a00005f5f5f5f5f5f8b6001600160a01b031663affed0e06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610628573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061064c9190610721565b6040518a63ffffffff1660e01b8152600401610670999897969594939291906108b6565b602060405180830381865afa15801561068b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106af9190610721565b92915050565b6106fa82826040516024016106cb929190610927565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526106fe565b5050565b6105b5815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f60208284031215610731575f5ffd5b5051919050565b5f60208284031215610748575f5ffd5b81516001600160a01b038116811461075e575f5ffd5b9392505050565b5f5f5f60608486031215610777575f5ffd5b835160ff81168114610787575f5ffd5b602085015160409095015190969495509392505050565b600281106107ba57634e487b7160e01b5f52602160045260245ffd5b9052565b5f81518084525f5b818110156107e2576020818501810151868301820152016107c6565b505f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038a16815260208101899052610140604082018190525f90820152610830606082018961079e565b6080810187905260a0810186905260c081018590526001600160a01b0384811660e0830152831661010082015261016061012082018190525f90610876908301846107be565b9b9a5050505050505050505050565b5f60208284031215610895575f5ffd5b8151801515811461075e575f5ffd5b602081525f61075e60208301846107be565b6001600160a01b038a16815260208101899052610140604082018190525f9082015261016081016108ea606083018a61079e565b608082019790975260a081019590955260c08501939093526001600160a01b0391821660e085015216610100830152610120909101529392505050565b604081525f61093960408301856107be565b905060018060a01b0383166020830152939250505056fea26469706673582212205184941bc54c45f9d566239a4a9762dc646a944e0f7aba3f65dddd119cee9eed64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0UW_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0YW\x80c\xAC}\x14k\x14a\0[W\x80c\xC0@b&\x14a\0\x92W\x80c\xC4Z\x01U\x14a\0\x9AW\x80c\xF8\xCC\xBFG\x14a\0\xADW[__\xFD[\0[`\x0CTa\0u\x90c\x01\0\0\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0Ya\0\xD0V[`\rTa\0u\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`\x0CTa\0\xC0\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\0\x89V[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01;W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01_\x91\x90a\x07!V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xACW__\xFD[PZ\xF1\x15\x80\x15a\x01\xBEW=__>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01RkSAFE_ADDRESS`\xA0\x1B`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02.W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02R\x91\x90a\x078V[\x90P_\x81`\x01`\x01`\xA0\x1B\x03\x16g\x02\xC6\x8A\xF0\xBB\x14\0\0`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x02\xA5W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02\xAAV[``\x91P[PP\x90P\x80a\x02\xFFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FFailed to send ETH to Safe\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[a\x03=`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FFunded Safe with 0.2 ETH\0\0\0\0\0\0\0\0\x81RPa\x05rV[_\x80\x80sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-c\xE3A\xEA\xA4\x87a\x03d\x88a\x05\xB8V[`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01```@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xA3W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xC7\x91\x90a\x07eV[\x92P\x92P\x92P\x84`\x01`\x01`\xA0\x1B\x03\x16cjv\x12\x02s\xF3\x9F\xD6\xE5\x1A\xAD\x88\xF6\xF4\xCEj\xB8\x82ry\xCF\xFF\xB9\"fg\x01cEx]\x8A\0\0______\x8B\x8B\x8E`@Q` \x01a\x043\x93\x92\x91\x90\x92\x83R` \x83\x01\x91\x90\x91R`\xF8\x1B`\x01`\x01`\xF8\x1B\x03\x19\x16`@\x82\x01R`A\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R`@Q\x8Ac\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04f\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x08\x01V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x04\x82W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xA6\x91\x90a\x08\x85V[Pa\x04\xFA`@Q\x80`@\x01`@R\x80`\x18\x81R` \x01\x7FExecuted transaction to:\0\0\0\0\0\0\0\0\x81RPs\xF3\x9F\xD6\xE5\x1A\xAD\x88\xF6\xF4\xCEj\xB8\x82ry\xCF\xFF\xB9\"fa\x06\xB5V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x05TW__\xFD[PZ\xF1\x15\x80\x15a\x05fW=__>=_\xFD[PPPPPPPPPPV[a\x05\xB5\x81`@Q`$\x01a\x05\x86\x91\x90a\x08\xA4V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x06\xFEV[PV[_\x81`\x01`\x01`\xA0\x1B\x03\x16c\xD8\xD1\x1Fxs\xF3\x9F\xD6\xE5\x1A\xAD\x88\xF6\xF4\xCEj\xB8\x82ry\xCF\xFF\xB9\"fg\x01cEx]\x8A\0\0______\x8B`\x01`\x01`\xA0\x1B\x03\x16c\xAF\xFE\xD0\xE0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06(W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06L\x91\x90a\x07!V[`@Q\x8Ac\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06p\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x08\xB6V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06\x8BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\xAF\x91\x90a\x07!V[\x92\x91PPV[a\x06\xFA\x82\x82`@Q`$\x01a\x06\xCB\x92\x91\x90a\t'V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x06\xFEV[PPV[a\x05\xB5\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[_` \x82\x84\x03\x12\x15a\x071W__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x07HW__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x07^W__\xFD[\x93\x92PPPV[___``\x84\x86\x03\x12\x15a\x07wW__\xFD[\x83Q`\xFF\x81\x16\x81\x14a\x07\x87W__\xFD[` \x85\x01Q`@\x90\x95\x01Q\x90\x96\x94\x95P\x93\x92PPPV[`\x02\x81\x10a\x07\xBAWcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x90RV[_\x81Q\x80\x84R_[\x81\x81\x10\x15a\x07\xE2W` \x81\x85\x01\x81\x01Q\x86\x83\x01\x82\x01R\x01a\x07\xC6V[P_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x8A\x16\x81R` \x81\x01\x89\x90Ra\x01@`@\x82\x01\x81\x90R_\x90\x82\x01Ra\x080``\x82\x01\x89a\x07\x9EV[`\x80\x81\x01\x87\x90R`\xA0\x81\x01\x86\x90R`\xC0\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`\xE0\x83\x01R\x83\x16a\x01\0\x82\x01Ra\x01`a\x01 \x82\x01\x81\x90R_\x90a\x08v\x90\x83\x01\x84a\x07\xBEV[\x9B\x9APPPPPPPPPPPV[_` \x82\x84\x03\x12\x15a\x08\x95W__\xFD[\x81Q\x80\x15\x15\x81\x14a\x07^W__\xFD[` \x81R_a\x07^` \x83\x01\x84a\x07\xBEV[`\x01`\x01`\xA0\x1B\x03\x8A\x16\x81R` \x81\x01\x89\x90Ra\x01@`@\x82\x01\x81\x90R_\x90\x82\x01Ra\x01`\x81\x01a\x08\xEA``\x83\x01\x8Aa\x07\x9EV[`\x80\x82\x01\x97\x90\x97R`\xA0\x81\x01\x95\x90\x95R`\xC0\x85\x01\x93\x90\x93R`\x01`\x01`\xA0\x1B\x03\x91\x82\x16`\xE0\x85\x01R\x16a\x01\0\x83\x01Ra\x01 \x90\x91\x01R\x93\x92PPPV[`@\x81R_a\t9`@\x83\x01\x85a\x07\xBEV[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV\xFE\xA2dipfsX\"\x12 Q\x84\x94\x1B\xC5LE\xF9\xD5f#\x9AJ\x97b\xDCdj\x94N\x0Fz\xBA?e\xDD\xDD\x11\x9C\xEE\x9E\xEDdsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `factory()` and selector `0xc45a0155`.
    ```solidity
    function factory() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct factoryCall {}
    ///Container type for the return parameters of the [`factory()`](factoryCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct factoryReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<factoryCall> for UnderlyingRustTuple<'_> {
                fn from(value: factoryCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for factoryCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<factoryReturn> for UnderlyingRustTuple<'_> {
                fn from(value: factoryReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for factoryReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for factoryCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = factoryReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "factory()";
            const SELECTOR: [u8; 4] = [196u8, 90u8, 1u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
    ```solidity
    function run() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `safeSingleton()` and selector `0xac7d146b`.
    ```solidity
    function safeSingleton() external view returns (address);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeSingletonCall {}
    ///Container type for the return parameters of the [`safeSingleton()`](safeSingletonCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeSingletonReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeSingletonCall> for UnderlyingRustTuple<'_> {
                fn from(value: safeSingletonCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for safeSingletonCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeSingletonReturn> for UnderlyingRustTuple<'_> {
                fn from(value: safeSingletonReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for safeSingletonReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeSingletonCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeSingletonReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeSingleton()";
            const SELECTOR: [u8; 4] = [172u8, 125u8, 20u8, 107u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `setUp()` and selector `0x0a9254e4`.
    ```solidity
    function setUp() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpCall {}
    ///Container type for the return parameters of the [`setUp()`](setUpCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpCall> for UnderlyingRustTuple<'_> {
                fn from(value: setUpCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setUpReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUpCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUpReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUp()";
            const SELECTOR: [u8; 4] = [10u8, 146u8, 84u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`ExecuteSafeTransactionScript`](self) function calls.
    pub enum ExecuteSafeTransactionScriptCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        factory(factoryCall),
        run(runCall),
        safeSingleton(safeSingletonCall),
        setUp(setUpCall),
    }
    #[automatically_derived]
    impl ExecuteSafeTransactionScriptCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 146u8, 84u8, 228u8],
            [172u8, 125u8, 20u8, 107u8],
            [192u8, 64u8, 98u8, 38u8],
            [196u8, 90u8, 1u8, 85u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ExecuteSafeTransactionScriptCalls {
        const NAME: &'static str = "ExecuteSafeTransactionScriptCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::factory(_) => <factoryCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::safeSingleton(_) => <safeSingletonCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setUp(_) => <setUpCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<
                ExecuteSafeTransactionScriptCalls,
            >] = &[
                {
                    fn setUp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecuteSafeTransactionScriptCalls>
                    {
                        <setUpCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ExecuteSafeTransactionScriptCalls::setUp)
                    }
                    setUp
                },
                {
                    fn safeSingleton(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecuteSafeTransactionScriptCalls>
                    {
                        <safeSingletonCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(ExecuteSafeTransactionScriptCalls::safeSingleton)
                    }
                    safeSingleton
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecuteSafeTransactionScriptCalls>
                    {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ExecuteSafeTransactionScriptCalls::run)
                    }
                    run
                },
                {
                    fn factory(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecuteSafeTransactionScriptCalls>
                    {
                        <factoryCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ExecuteSafeTransactionScriptCalls::factory)
                    }
                    factory
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ExecuteSafeTransactionScriptCalls>
                    {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(ExecuteSafeTransactionScriptCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::factory(inner) => {
                    <factoryCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
                Self::safeSingleton(inner) => {
                    <safeSingletonCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::factory(inner) => {
                    <factoryCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::safeSingleton(inner) => {
                    <safeSingletonCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ExecuteSafeTransactionScript`](self) contract instance.

    See the [wrapper's documentation](`ExecuteSafeTransactionScriptInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ExecuteSafeTransactionScriptInstance<T, P, N> {
        ExecuteSafeTransactionScriptInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ExecuteSafeTransactionScriptInstance<T, P, N>>,
    > {
        ExecuteSafeTransactionScriptInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ExecuteSafeTransactionScriptInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`ExecuteSafeTransactionScript`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`ExecuteSafeTransactionScript`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ExecuteSafeTransactionScriptInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ExecuteSafeTransactionScriptInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ExecuteSafeTransactionScriptInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ExecuteSafeTransactionScriptInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`ExecuteSafeTransactionScript`](self) contract instance.

        See the [wrapper's documentation](`ExecuteSafeTransactionScriptInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ExecuteSafeTransactionScriptInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ExecuteSafeTransactionScriptInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ExecuteSafeTransactionScriptInstance<T, P, N> {
            ExecuteSafeTransactionScriptInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ExecuteSafeTransactionScriptInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`factory`] function.
        pub fn factory(&self) -> alloy_contract::SolCallBuilder<T, &P, factoryCall, N> {
            self.call_builder(&factoryCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`safeSingleton`] function.
        pub fn safeSingleton(&self) -> alloy_contract::SolCallBuilder<T, &P, safeSingletonCall, N> {
            self.call_builder(&safeSingletonCall {})
        }
        ///Creates a new call builder for the [`setUp`] function.
        pub fn setUp(&self) -> alloy_contract::SolCallBuilder<T, &P, setUpCall, N> {
            self.call_builder(&setUpCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > ExecuteSafeTransactionScriptInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
