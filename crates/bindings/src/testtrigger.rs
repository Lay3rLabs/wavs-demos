/**

Generated by the following Solidity interface...
```solidity
interface TestTrigger {
    function IS_SCRIPT() external view returns (bool);
    function run(string memory testMessage) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [
      {
        "name": "testMessage",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TestTrigger {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b506107fa8061002d5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80639352fad214610038578063f8ccbf471461004d575b5f5ffd5b61004b61004636600461056c565b610074565b005b600c546100609062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100df573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061010391906105e6565b60405163350d56bf60e01b815260206004820152600b60248201526a4e46545f4144445245535360a81b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610171573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101959190610618565b60405163ce817d4760e01b8152600481018490529091508190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b1580156101e4575f5ffd5b505af11580156101f6573d5f5f3e3d5ffd5b505050505f8460405160200161020c9190610685565b60408051601f1981840301815290829052631c63c0f160e31b825291506001600160a01b0383169063e31e07889067016345785d8a000090610252908590600401610685565b5f604051808303818588803b158015610269575f5ffd5b505af115801561027b573d5f5f3e3d5ffd5b50505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156102da575f5ffd5b505af11580156102ec573d5f5f3e3d5ffd5b505060405163e328ed7760e01b81525f6004820181905292508291506001600160a01b0385169063e328ed77906024015f60405180830381865afa158015610336573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261035d9190810190610697565b9050610398604051806040016040528060138152602001722a3934b3b3b2b91031b932b0ba32b210313c9d60691b81525082602001516103e0565b6103ca6040518060400160405280601081526020016f2a3934b3b3b2b91036b2b9b9b0b3b29d60811b81525088610429565b6103d7816040015161046e565b50505050505050565b61042582826040516024016103f692919061076e565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526104b4565b5050565b610425828260405160240161043f929190610797565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526104b4565b6104b1816040516024016104829190610685565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b1790526104b4565b50565b6104b1815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b634e487b7160e01b5f52604160045260245ffd5b6040516060810167ffffffffffffffff8111828210171561050e5761050e6104d7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561053d5761053d6104d7565b604052919050565b5f67ffffffffffffffff82111561055e5761055e6104d7565b50601f01601f191660200190565b5f6020828403121561057c575f5ffd5b813567ffffffffffffffff811115610592575f5ffd5b8201601f810184136105a2575f5ffd5b80356105b56105b082610545565b610514565b8181528560208385010111156105c9575f5ffd5b816020840160208301375f91810160200191909152949350505050565b5f602082840312156105f6575f5ffd5b5051919050565b80516001600160a01b0381168114610613575f5ffd5b919050565b5f60208284031215610628575f5ffd5b610631826105fd565b9392505050565b5f5b8381101561065257818101518382015260200161063a565b50505f910152565b5f8151808452610671816020860160208601610638565b601f01601f19169290920160200192915050565b602081525f610631602083018461065a565b5f602082840312156106a7575f5ffd5b815167ffffffffffffffff8111156106bd575f5ffd5b8201606081850312156106ce575f5ffd5b6106d66104eb565b815167ffffffffffffffff811681146106ed575f5ffd5b81526106fb602083016105fd565b6020820152604082015167ffffffffffffffff811115610719575f5ffd5b80830192505084601f83011261072d575f5ffd5b815161073b6105b082610545565b81815286602083860101111561074f575f5ffd5b610760826020830160208701610638565b604083015250949350505050565b604081525f610780604083018561065a565b905060018060a01b03831660208301529392505050565b604081525f6107a9604083018561065a565b82810360208401526107bb818561065a565b9594505050505056fea26469706673582212209f11924b19cc2c603f064da4b68ee95e4da7a0b960dbd8b679044da3ee52629e64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa\x07\xFA\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x93R\xFA\xD2\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0MW[__\xFD[a\0Ka\0F6`\x04a\x05lV[a\0tV[\0[`\x0CTa\0`\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xDFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x03\x91\x90a\x05\xE6V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjNFT_ADDRESS`\xA8\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01qW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x95\x91\x90a\x06\x18V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x84\x90R\x90\x91P\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xE4W__\xFD[PZ\xF1\x15\x80\x15a\x01\xF6W=__>=_\xFD[PPPP_\x84`@Q` \x01a\x02\x0C\x91\x90a\x06\x85V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rc\x1Cc\xC0\xF1`\xE3\x1B\x82R\x91P`\x01`\x01`\xA0\x1B\x03\x83\x16\x90c\xE3\x1E\x07\x88\x90g\x01cEx]\x8A\0\0\x90a\x02R\x90\x85\x90`\x04\x01a\x06\x85V[_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x02iW__\xFD[PZ\xF1\x15\x80\x15a\x02{W=__>=_\xFD[PPPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xDAW__\xFD[PZ\xF1\x15\x80\x15a\x02\xECW=__>=_\xFD[PP`@Qc\xE3(\xEDw`\xE0\x1B\x81R_`\x04\x82\x01\x81\x90R\x92P\x82\x91P`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xE3(\xEDw\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x036W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x03]\x91\x90\x81\x01\x90a\x06\x97V[\x90Pa\x03\x98`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01r*94\xB3\xB3\xB2\xB9\x101\xB92\xB0\xBA2\xB2\x101<\x9D`i\x1B\x81RP\x82` \x01Qa\x03\xE0V[a\x03\xCA`@Q\x80`@\x01`@R\x80`\x10\x81R` \x01o*94\xB3\xB3\xB2\xB9\x106\xB2\xB9\xB9\xB0\xB3\xB2\x9D`\x81\x1B\x81RP\x88a\x04)V[a\x03\xD7\x81`@\x01Qa\x04nV[PPPPPPPV[a\x04%\x82\x82`@Q`$\x01a\x03\xF6\x92\x91\x90a\x07nV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x04\xB4V[PPV[a\x04%\x82\x82`@Q`$\x01a\x04?\x92\x91\x90a\x07\x97V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\x04\xB4V[a\x04\xB1\x81`@Q`$\x01a\x04\x82\x91\x90a\x06\x85V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x05\xF3\xBF\xAB`\xE1\x1B\x17\x90Ra\x04\xB4V[PV[a\x04\xB1\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05\x0EWa\x05\x0Ea\x04\xD7V[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05=Wa\x05=a\x04\xD7V[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05^Wa\x05^a\x04\xD7V[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[_` \x82\x84\x03\x12\x15a\x05|W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x92W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x05\xA2W__\xFD[\x805a\x05\xB5a\x05\xB0\x82a\x05EV[a\x05\x14V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x05\xC9W__\xFD[\x81` \x84\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x05\xF6W__\xFD[PQ\x91\x90PV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06\x13W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x06(W__\xFD[a\x061\x82a\x05\xFDV[\x93\x92PPPV[_[\x83\x81\x10\x15a\x06RW\x81\x81\x01Q\x83\x82\x01R` \x01a\x06:V[PP_\x91\x01RV[_\x81Q\x80\x84Ra\x06q\x81` \x86\x01` \x86\x01a\x068V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x061` \x83\x01\x84a\x06ZV[_` \x82\x84\x03\x12\x15a\x06\xA7W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xBDW__\xFD[\x82\x01``\x81\x85\x03\x12\x15a\x06\xCEW__\xFD[a\x06\xD6a\x04\xEBV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x06\xEDW__\xFD[\x81Ra\x06\xFB` \x83\x01a\x05\xFDV[` \x82\x01R`@\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\x19W__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a\x07-W__\xFD[\x81Qa\x07;a\x05\xB0\x82a\x05EV[\x81\x81R\x86` \x83\x86\x01\x01\x11\x15a\x07OW__\xFD[a\x07`\x82` \x83\x01` \x87\x01a\x068V[`@\x83\x01RP\x94\x93PPPPV[`@\x81R_a\x07\x80`@\x83\x01\x85a\x06ZV[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R_a\x07\xA9`@\x83\x01\x85a\x06ZV[\x82\x81\x03` \x84\x01Ra\x07\xBB\x81\x85a\x06ZV[\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 \x9F\x11\x92K\x19\xCC,`?\x06M\xA4\xB6\x8E\xE9^M\xA7\xA0\xB9`\xDB\xD8\xB6y\x04M\xA3\xEERb\x9EdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80639352fad214610038578063f8ccbf471461004d575b5f5ffd5b61004b61004636600461056c565b610074565b005b600c546100609062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100df573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061010391906105e6565b60405163350d56bf60e01b815260206004820152600b60248201526a4e46545f4144445245535360a81b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610171573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101959190610618565b60405163ce817d4760e01b8152600481018490529091508190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b1580156101e4575f5ffd5b505af11580156101f6573d5f5f3e3d5ffd5b505050505f8460405160200161020c9190610685565b60408051601f1981840301815290829052631c63c0f160e31b825291506001600160a01b0383169063e31e07889067016345785d8a000090610252908590600401610685565b5f604051808303818588803b158015610269575f5ffd5b505af115801561027b573d5f5f3e3d5ffd5b50505050507f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156102da575f5ffd5b505af11580156102ec573d5f5f3e3d5ffd5b505060405163e328ed7760e01b81525f6004820181905292508291506001600160a01b0385169063e328ed77906024015f60405180830381865afa158015610336573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261035d9190810190610697565b9050610398604051806040016040528060138152602001722a3934b3b3b2b91031b932b0ba32b210313c9d60691b81525082602001516103e0565b6103ca6040518060400160405280601081526020016f2a3934b3b3b2b91036b2b9b9b0b3b29d60811b81525088610429565b6103d7816040015161046e565b50505050505050565b61042582826040516024016103f692919061076e565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526104b4565b5050565b610425828260405160240161043f929190610797565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526104b4565b6104b1816040516024016104829190610685565b60408051601f198184030181529190526020810180516001600160e01b03166305f3bfab60e11b1790526104b4565b50565b6104b1815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b634e487b7160e01b5f52604160045260245ffd5b6040516060810167ffffffffffffffff8111828210171561050e5761050e6104d7565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561053d5761053d6104d7565b604052919050565b5f67ffffffffffffffff82111561055e5761055e6104d7565b50601f01601f191660200190565b5f6020828403121561057c575f5ffd5b813567ffffffffffffffff811115610592575f5ffd5b8201601f810184136105a2575f5ffd5b80356105b56105b082610545565b610514565b8181528560208385010111156105c9575f5ffd5b816020840160208301375f91810160200191909152949350505050565b5f602082840312156105f6575f5ffd5b5051919050565b80516001600160a01b0381168114610613575f5ffd5b919050565b5f60208284031215610628575f5ffd5b610631826105fd565b9392505050565b5f5b8381101561065257818101518382015260200161063a565b50505f910152565b5f8151808452610671816020860160208601610638565b601f01601f19169290920160200192915050565b602081525f610631602083018461065a565b5f602082840312156106a7575f5ffd5b815167ffffffffffffffff8111156106bd575f5ffd5b8201606081850312156106ce575f5ffd5b6106d66104eb565b815167ffffffffffffffff811681146106ed575f5ffd5b81526106fb602083016105fd565b6020820152604082015167ffffffffffffffff811115610719575f5ffd5b80830192505084601f83011261072d575f5ffd5b815161073b6105b082610545565b81815286602083860101111561074f575f5ffd5b610760826020830160208701610638565b604083015250949350505050565b604081525f610780604083018561065a565b905060018060a01b03831660208301529392505050565b604081525f6107a9604083018561065a565b82810360208401526107bb818561065a565b9594505050505056fea26469706673582212209f11924b19cc2c603f064da4b68ee95e4da7a0b960dbd8b679044da3ee52629e64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x93R\xFA\xD2\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0MW[__\xFD[a\0Ka\0F6`\x04a\x05lV[a\0tV[\0[`\x0CTa\0`\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xDFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x03\x91\x90a\x05\xE6V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjNFT_ADDRESS`\xA8\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01qW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x95\x91\x90a\x06\x18V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x84\x90R\x90\x91P\x81\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01\xE4W__\xFD[PZ\xF1\x15\x80\x15a\x01\xF6W=__>=_\xFD[PPPP_\x84`@Q` \x01a\x02\x0C\x91\x90a\x06\x85V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Rc\x1Cc\xC0\xF1`\xE3\x1B\x82R\x91P`\x01`\x01`\xA0\x1B\x03\x83\x16\x90c\xE3\x1E\x07\x88\x90g\x01cEx]\x8A\0\0\x90a\x02R\x90\x85\x90`\x04\x01a\x06\x85V[_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x02iW__\xFD[PZ\xF1\x15\x80\x15a\x02{W=__>=_\xFD[PPPPP\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02\xDAW__\xFD[PZ\xF1\x15\x80\x15a\x02\xECW=__>=_\xFD[PP`@Qc\xE3(\xEDw`\xE0\x1B\x81R_`\x04\x82\x01\x81\x90R\x92P\x82\x91P`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xE3(\xEDw\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x036W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x03]\x91\x90\x81\x01\x90a\x06\x97V[\x90Pa\x03\x98`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01r*94\xB3\xB3\xB2\xB9\x101\xB92\xB0\xBA2\xB2\x101<\x9D`i\x1B\x81RP\x82` \x01Qa\x03\xE0V[a\x03\xCA`@Q\x80`@\x01`@R\x80`\x10\x81R` \x01o*94\xB3\xB3\xB2\xB9\x106\xB2\xB9\xB9\xB0\xB3\xB2\x9D`\x81\x1B\x81RP\x88a\x04)V[a\x03\xD7\x81`@\x01Qa\x04nV[PPPPPPPV[a\x04%\x82\x82`@Q`$\x01a\x03\xF6\x92\x91\x90a\x07nV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x04\xB4V[PPV[a\x04%\x82\x82`@Q`$\x01a\x04?\x92\x91\x90a\x07\x97V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\x04\xB4V[a\x04\xB1\x81`@Q`$\x01a\x04\x82\x91\x90a\x06\x85V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x05\xF3\xBF\xAB`\xE1\x1B\x17\x90Ra\x04\xB4V[PV[a\x04\xB1\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q``\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05\x0EWa\x05\x0Ea\x04\xD7V[`@R\x90V[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x05=Wa\x05=a\x04\xD7V[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x05^Wa\x05^a\x04\xD7V[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[_` \x82\x84\x03\x12\x15a\x05|W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05\x92W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x05\xA2W__\xFD[\x805a\x05\xB5a\x05\xB0\x82a\x05EV[a\x05\x14V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x05\xC9W__\xFD[\x81` \x84\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x05\xF6W__\xFD[PQ\x91\x90PV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x06\x13W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x06(W__\xFD[a\x061\x82a\x05\xFDV[\x93\x92PPPV[_[\x83\x81\x10\x15a\x06RW\x81\x81\x01Q\x83\x82\x01R` \x01a\x06:V[PP_\x91\x01RV[_\x81Q\x80\x84Ra\x06q\x81` \x86\x01` \x86\x01a\x068V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x061` \x83\x01\x84a\x06ZV[_` \x82\x84\x03\x12\x15a\x06\xA7W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x06\xBDW__\xFD[\x82\x01``\x81\x85\x03\x12\x15a\x06\xCEW__\xFD[a\x06\xD6a\x04\xEBV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x16\x81\x14a\x06\xEDW__\xFD[\x81Ra\x06\xFB` \x83\x01a\x05\xFDV[` \x82\x01R`@\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\x19W__\xFD[\x80\x83\x01\x92PP\x84`\x1F\x83\x01\x12a\x07-W__\xFD[\x81Qa\x07;a\x05\xB0\x82a\x05EV[\x81\x81R\x86` \x83\x86\x01\x01\x11\x15a\x07OW__\xFD[a\x07`\x82` \x83\x01` \x87\x01a\x068V[`@\x83\x01RP\x94\x93PPPPV[`@\x81R_a\x07\x80`@\x83\x01\x85a\x06ZV[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R_a\x07\xA9`@\x83\x01\x85a\x06ZV[\x82\x81\x03` \x84\x01Ra\x07\xBB\x81\x85a\x06ZV[\x95\x94PPPPPV\xFE\xA2dipfsX\"\x12 \x9F\x11\x92K\x19\xCC,`?\x06M\xA4\xB6\x8E\xE9^M\xA7\xA0\xB9`\xDB\xD8\xB6y\x04M\xA3\xEERb\x9EdsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run(string)` and selector `0x9352fad2`.
    ```solidity
    function run(string memory testMessage) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {
        pub testMessage: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`run(string)`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    (value.testMessage,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { testMessage: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run(string)";
            const SELECTOR: [u8; 4] = [147u8, 82u8, 250u8, 210u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                    &self.testMessage,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`TestTrigger`](self) function calls.
    pub enum TestTriggerCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
    }
    #[automatically_derived]
    impl TestTriggerCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] =
            &[[147u8, 82u8, 250u8, 210u8], [248u8, 204u8, 191u8, 71u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TestTriggerCalls {
        const NAME: &'static str = "TestTriggerCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(&[u8], bool) -> alloy_sol_types::Result<TestTriggerCalls>] =
                &[
                    {
                        fn run(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<TestTriggerCalls> {
                            <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                                .map(TestTriggerCalls::run)
                        }
                        run
                    },
                    {
                        fn IS_SCRIPT(
                            data: &[u8],
                            validate: bool,
                        ) -> alloy_sol_types::Result<TestTriggerCalls> {
                            <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data, validate,
                            )
                            .map(TestTriggerCalls::IS_SCRIPT)
                        }
                        IS_SCRIPT
                    },
                ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TestTrigger`](self) contract instance.

    See the [wrapper's documentation](`TestTriggerInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TestTriggerInstance<T, P, N> {
        TestTriggerInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<TestTriggerInstance<T, P, N>>>
    {
        TestTriggerInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        TestTriggerInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`TestTrigger`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`TestTrigger`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TestTriggerInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TestTriggerInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TestTriggerInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > TestTriggerInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`TestTrigger`](self) contract instance.

        See the [wrapper's documentation](`TestTriggerInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(provider: P) -> alloy_contract::Result<TestTriggerInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TestTriggerInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TestTriggerInstance<T, P, N> {
            TestTriggerInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > TestTriggerInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(
            &self,
            testMessage: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall { testMessage })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > TestTriggerInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
