/**

Generated by the following Solidity interface...
```solidity
interface TriggerScript {
    function IS_SCRIPT() external view returns (bool);
    function addTrigger(bytes memory triggerData) external;
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "addTrigger",
    "inputs": [
      {
        "name": "triggerData",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod TriggerScript {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b506114198061002d5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c8063c040622614610043578063e31e078814610045578063f8ccbf4714610058575b5f5ffd5b005b610043610053366004610f98565b61007f565b600c5461006b9062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100ea573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061010e9190611006565b60405163c88a5e6d60e01b8152306004820152670de0b6b3a76400006024820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d906044015f604051808303815f87803b158015610168575f5ffd5b505af115801561017a573d5f5f3e3d5ffd5b505050506101bc6040518060400160405280601c81526020017f5374617274696e672074726967676572206164646974696f6e2e2e2e00000000815250610b7c565b6040805180820190915260148152732a3934b3b3b2b9103230ba30903632b733ba341d60611b60208201526101f19083610bc2565b60405163ce817d4760e01b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b15801561023b575f5ffd5b505af115801561024d573d5f5f3e3d5ffd5b505060405163350d56bf60e01b815260206004820152601060248201526f574156535f534146455f4d4f44554c4560801b60448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa1580156102c1573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102e5919061101d565b90506001600160a01b03811661033b5760405162461bcd60e51b8152602060048201526016602482015275496e76616c6964206d6f64756c65206164647265737360501b60448201526064015b60405180910390fd5b61036c6040518060400160405280600f81526020016e26b7b23ab6329030b2323932b9b99d60891b81525082610c0b565b6103956040518060400160405280600781526020016629b2b73232b91d60c91b81525033610c0b565b60408051808201909152600f81526e29b2b73232b9103130b630b731b29d60891b60208201526103c6903331610bc2565b6103f76040518060400160405280600f81526020016e29b1b934b83a103130b630b731b29d60891b81525047610bc2565b67016345785d8a00003331101561045b5760405162461bcd60e51b815260206004820152602260248201527f496e73756666696369656e74204554482062616c616e636520696e2073656e6460448201526132b960f11b6064820152608401610332565b67016345785d8a00004710156104be5760405162461bcd60e51b815260206004820152602260248201527f496e73756666696369656e74204554482062616c616e636520696e20736372696044820152611c1d60f21b6064820152608401610332565b806001600160a01b0381163b6105165760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f6465206174206d6f64756c652061646472657373000000000000006044820152606401610332565b6105546040518060400160405280601d81526020017f4d6f64756c6520636f6465206578697374732061742061646472657373000000815250610b7c565b806001600160a01b031663186f03546040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156105ae575060408051601f3d908101601f191682019092526105ab9181019061101d565b60015b6106bd573d8080156105db576040519150601f19603f3d011682016040523d82523d5f602084013e6105e0565b606091505b5061061e6040518060400160405280601181526020017026b7b23ab6329031b7b2329039b4bd329d60791b815250846001600160a01b03163b610bc2565b61063f60405180608001604052806047815260200161136c60479139610b7c565b60405162461bcd60e51b815260206004820152604760248201527f4661696c656420746f207265616420536166652061646472657373202d206d6f60448201527f64756c65206d69676874206e6f74206578697374206f72206e6f742062652064606482015266195c1b1bde595960ca1b608482015260a401610332565b6106ec6040518060400160405280600d81526020016c29b0b3329030b2323932b9b99d60991b81525082610c0b565b6001600160a01b0381166107395760405162461bcd60e51b8152602060048201526014602482015273536166652061646472657373206973207a65726f60601b6044820152606401610332565b50806001600160a01b031663158ef93e6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610794575060408051601f3d908101601f191682019092526107919181019061104a565b60015b6107ee5760405162461bcd60e51b815260206004820152602560248201527f4661696c656420746f20636865636b206d6f64756c6520696e697469616c697a60448201526430ba34b7b760d91b6064820152608401610332565b6108236040518060400160405280601381526020017226b7b23ab6329034b734ba34b0b634bd32b21d60691b81525082610c50565b806108695760405162461bcd60e51b8152602060048201526016602482015275135bd91d5b19481b9bdd081a5b9a5d1a585b1a5e995960521b6044820152606401610332565b50604051631c63c0f160e31b81526001600160a01b0382169063e31e07889067016345785d8a0000906108a29089908990600401611069565b5f604051808303818588803b1580156108b9575f5ffd5b505af1935050505080156108cb575060015b610ac7576108d7611097565b806308c379a00361094f57506108eb6110f1565b806108f657506109b7565b6109356040518060400160405280601f81526020017f5472616e73616374696f6e206661696c6564207769746820726561736f6e3a0081525082610c95565b8060405162461bcd60e51b815260040161033291906111c2565b634e487b71036109b7576109616111d4565b9061096c57506109b7565b5f61097682610cda565b90506109356040518060400160405280601e81526020017f5472616e73616374696f6e206661696c656420776974682070616e69633a000081525082610c95565b3d8080156109e0576040519150601f19603f3d011682016040523d82523d5f602084013e6109e5565b606091505b50610a7f60405180606001604052806021815260200161134b602191396040516371aad10d60e01b8152737109709ecfa91a80626ff3989d68f67f5b1dd12d906371aad10d90610a399086906004016111c2565b5f60405180830381865afa158015610a53573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a7a91908101906111f1565b610c95565b60405162461bcd60e51b815260206004820181905260248201527f5472616e73616374696f6e206661696c656420776974682072617720646174616044820152606401610332565b610b056040518060400160405280601a81526020017f5375636365737366756c6c792061646465642074726967676572000000000000815250610b7c565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610b5f575f5ffd5b505af1158015610b71573d5f5f3e3d5ffd5b505050505050505050565b610bbf81604051602401610b9091906111c2565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610f75565b50565b610c078282604051602401610bd8929190611286565b60408051601f198184030181529190526020810180516001600160e01b0316632d839cb360e21b179052610f75565b5050565b610c078282604051602401610c219291906112a7565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610f75565b610c078282604051602401610c669291906112d0565b60408051601f198184030181529190526020810180516001600160e01b031663c3b5563560e01b179052610f75565b610c078282604051602401610cab9291906112f3565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052610f75565b606081600103610d1057505060408051808201909152601081526f105cdcd95c9d1a5bdb8819985a5b195960821b602082015290565b81601103610d5157505060408051808201909152601d81527f41726974686d65746963206f766572666c6f772f756e646572666c6f77000000602082015290565b81601203610d8557505060408051808201909152601081526f4469766973696f6e206279207a65726f60801b602082015290565b81602103610dbb575050604080518082019091526012815271496e76616c696420656e756d2076616c756560701b602082015290565b81602203610de2576040518060600160405280603181526020016113b36031913992915050565b81603103610e18575050604080518082019091526012815271506f70206f6e20656d70747920617272617960701b602082015290565b81603203610e5957505060408051808201909152601981527f417272617920696e646578206f7574206f6620626f756e647300000000000000602082015290565b81604103610e9a57505060408051808201909152601a81527f4d656d6f727920616c6c6f636174696f6e206f766572666c6f77000000000000602082015290565b81605103610edb57505060408051808201909152601981527f5a65726f20696e697469616c697a6564207661726961626c6500000000000000602082015290565b60405163348051d760e11b815260048101839052737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024015f60405180830381865afa158015610f28573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f4f91908101906111f1565b604051602001610f5f9190611317565b6040516020818303038152906040529050919050565b610bbf815f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f5f60208385031215610fa9575f5ffd5b823567ffffffffffffffff811115610fbf575f5ffd5b8301601f81018513610fcf575f5ffd5b803567ffffffffffffffff811115610fe5575f5ffd5b856020828401011115610ff6575f5ffd5b6020919091019590945092505050565b5f60208284031215611016575f5ffd5b5051919050565b5f6020828403121561102d575f5ffd5b81516001600160a01b0381168114611043575f5ffd5b9392505050565b5f6020828403121561105a575f5ffd5b81518015158114611043575f5ffd5b60208152816020820152818360408301375f818301604090810191909152601f909201601f19160101919050565b5f60033d11156110ad5760045f5f3e505f5160e01c5b90565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f1916810167ffffffffffffffff811182821017156110ea576110ea6110b0565b6040525050565b5f60443d10156110fe5790565b6040513d600319016004823e80513d602482011167ffffffffffffffff8211171561112857505090565b808201805167ffffffffffffffff811115611144575050505090565b3d840160031901828201602001111561115e575050505090565b61116d602082850101856110c4565b509392505050565b5f5b8381101561118f578181015183820152602001611177565b50505f910152565b5f81518084526111ae816020860160208601611175565b601f01601f19169290920160200192915050565b602081525f6110436020830184611197565b5f5f60233d11156111ed57602060045f3e50505f516001905b9091565b5f60208284031215611201575f5ffd5b815167ffffffffffffffff811115611217575f5ffd5b8201601f81018413611227575f5ffd5b805167ffffffffffffffff811115611241576112416110b0565b604051611258601f8301601f1916602001826110c4565b81815285602083850101111561126c575f5ffd5b61127d826020830160208601611175565b95945050505050565b604081525f6112986040830185611197565b90508260208301529392505050565b604081525f6112b96040830185611197565b905060018060a01b03831660208301529392505050565b604081525f6112e26040830185611197565b905082151560208301529392505050565b604081525f6113056040830185611197565b828103602084015261127d8185611197565b6b02830b734b19031b7b2329d160a51b81525f825161133d81600c850160208701611175565b91909101600c019291505056fe5472616e73616374696f6e206661696c656420776974682072617720646174613a5261772063616c6c20746f206d6f64756c65206661696c6564202d206c696b656c792077726f6e672061646472657373206f7220756e6465706c6f79656420636f6e747261637453746f7261676520777269746520746f20696e636f72726563746c7920656e636f6465642073746f7261676520736c6f74a2646970667358221220c30bd584cd4cf253031781051089e9a67dad325d05d6b301f561c1b8d13d95f464736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa\x14\x19\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\xC0@b&\x14a\0CW\x80c\xE3\x1E\x07\x88\x14a\0EW\x80c\xF8\xCC\xBFG\x14a\0XW[__\xFD[\0[a\0Ca\0S6`\x04a\x0F\x98V[a\0\x7FV[`\x0CTa\0k\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xEAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x0E\x91\x90a\x10\x06V[`@Qc\xC8\x8A^m`\xE0\x1B\x81R0`\x04\x82\x01Rg\r\xE0\xB6\xB3\xA7d\0\0`$\x82\x01R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC8\x8A^m\x90`D\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01hW__\xFD[PZ\xF1\x15\x80\x15a\x01zW=__>=_\xFD[PPPPa\x01\xBC`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7FStarting trigger addition...\0\0\0\0\x81RPa\x0B|V[`@\x80Q\x80\x82\x01\x90\x91R`\x14\x81Rs*94\xB3\xB3\xB2\xB9\x1020\xBA0\x9062\xB73\xBA4\x1D`a\x1B` \x82\x01Ra\x01\xF1\x90\x83a\x0B\xC2V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02;W__\xFD[PZ\xF1\x15\x80\x15a\x02MW=__>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01RoWAVS_SAFE_MODULE`\x80\x1B`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xC1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xE5\x91\x90a\x10\x1DV[\x90P`\x01`\x01`\xA0\x1B\x03\x81\x16a\x03;W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01RuInvalid module address`P\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x03l`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01n&\xB7\xB2:\xB62\x900\xB2292\xB9\xB9\x9D`\x89\x1B\x81RP\x82a\x0C\x0BV[a\x03\x95`@Q\x80`@\x01`@R\x80`\x07\x81R` \x01f)\xB2\xB722\xB9\x1D`\xC9\x1B\x81RP3a\x0C\x0BV[`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81Rn)\xB2\xB722\xB9\x1010\xB60\xB71\xB2\x9D`\x89\x1B` \x82\x01Ra\x03\xC6\x9031a\x0B\xC2V[a\x03\xF7`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01n)\xB1\xB94\xB8:\x1010\xB60\xB71\xB2\x9D`\x89\x1B\x81RPGa\x0B\xC2V[g\x01cEx]\x8A\0\x0031\x10\x15a\x04[W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FInsufficient ETH balance in send`D\x82\x01Ra2\xB9`\xF1\x1B`d\x82\x01R`\x84\x01a\x032V[g\x01cEx]\x8A\0\0G\x10\x15a\x04\xBEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FInsufficient ETH balance in scri`D\x82\x01Ra\x1C\x1D`\xF2\x1B`d\x82\x01R`\x84\x01a\x032V[\x80`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x05\x16W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FNo code at module address\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x032V[a\x05T`@Q\x80`@\x01`@R\x80`\x1D\x81R` \x01\x7FModule code exists at address\0\0\0\x81RPa\x0B|V[\x80`\x01`\x01`\xA0\x1B\x03\x16c\x18o\x03T`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x05\xAEWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x05\xAB\x91\x81\x01\x90a\x10\x1DV[`\x01[a\x06\xBDW=\x80\x80\x15a\x05\xDBW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x05\xE0V[``\x91P[Pa\x06\x1E`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p&\xB7\xB2:\xB62\x901\xB7\xB22\x909\xB4\xBD2\x9D`y\x1B\x81RP\x84`\x01`\x01`\xA0\x1B\x03\x16;a\x0B\xC2V[a\x06?`@Q\x80`\x80\x01`@R\x80`G\x81R` \x01a\x13l`G\x919a\x0B|V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FFailed to read Safe address - mo`D\x82\x01R\x7Fdule might not exist or not be d`d\x82\x01Rf\x19\\\x1B\x1B\xDEYY`\xCA\x1B`\x84\x82\x01R`\xA4\x01a\x032V[a\x06\xEC`@Q\x80`@\x01`@R\x80`\r\x81R` \x01l)\xB0\xB32\x900\xB2292\xB9\xB9\x9D`\x99\x1B\x81RP\x82a\x0C\x0BV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x079W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01RsSafe address is zero``\x1B`D\x82\x01R`d\x01a\x032V[P\x80`\x01`\x01`\xA0\x1B\x03\x16c\x15\x8E\xF9>`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x07\x94WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x07\x91\x91\x81\x01\x90a\x10JV[`\x01[a\x07\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FFailed to check module initializ`D\x82\x01Rd0\xBA4\xB7\xB7`\xD9\x1B`d\x82\x01R`\x84\x01a\x032V[a\x08#`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01r&\xB7\xB2:\xB62\x904\xB74\xBA4\xB0\xB64\xBD2\xB2\x1D`i\x1B\x81RP\x82a\x0CPV[\x80a\x08iW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01Ru\x13[\xD9\x1D[\x19H\x1B\x9B\xDD\x08\x1A[\x9A]\x1AX[\x1A^\x99Y`R\x1B`D\x82\x01R`d\x01a\x032V[P`@Qc\x1Cc\xC0\xF1`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16\x90c\xE3\x1E\x07\x88\x90g\x01cEx]\x8A\0\0\x90a\x08\xA2\x90\x89\x90\x89\x90`\x04\x01a\x10iV[_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x08\xB9W__\xFD[PZ\xF1\x93PPPP\x80\x15a\x08\xCBWP`\x01[a\n\xC7Wa\x08\xD7a\x10\x97V[\x80c\x08\xC3y\xA0\x03a\tOWPa\x08\xEBa\x10\xF1V[\x80a\x08\xF6WPa\t\xB7V[a\t5`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7FTransaction failed with reason:\0\x81RP\x82a\x0C\x95V[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x032\x91\x90a\x11\xC2V[cNH{q\x03a\t\xB7Wa\taa\x11\xD4V[\x90a\tlWPa\t\xB7V[_a\tv\x82a\x0C\xDAV[\x90Pa\t5`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FTransaction failed with panic:\0\0\x81RP\x82a\x0C\x95V[=\x80\x80\x15a\t\xE0W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xE5V[``\x91P[Pa\n\x7F`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x13K`!\x919`@Qcq\xAA\xD1\r`\xE0\x1B\x81Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cq\xAA\xD1\r\x90a\n9\x90\x86\x90`\x04\x01a\x11\xC2V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\nSW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\nz\x91\x90\x81\x01\x90a\x11\xF1V[a\x0C\x95V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FTransaction failed with raw data`D\x82\x01R`d\x01a\x032V[a\x0B\x05`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FSuccessfully added trigger\0\0\0\0\0\0\x81RPa\x0B|V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x0B_W__\xFD[PZ\xF1\x15\x80\x15a\x0BqW=__>=_\xFD[PPPPPPPPPV[a\x0B\xBF\x81`@Q`$\x01a\x0B\x90\x91\x90a\x11\xC2V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x0FuV[PV[a\x0C\x07\x82\x82`@Q`$\x01a\x0B\xD8\x92\x91\x90a\x12\x86V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90Ra\x0FuV[PPV[a\x0C\x07\x82\x82`@Q`$\x01a\x0C!\x92\x91\x90a\x12\xA7V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0FuV[a\x0C\x07\x82\x82`@Q`$\x01a\x0Cf\x92\x91\x90a\x12\xD0V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xC3\xB5V5`\xE0\x1B\x17\x90Ra\x0FuV[a\x0C\x07\x82\x82`@Q`$\x01a\x0C\xAB\x92\x91\x90a\x12\xF3V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\x0FuV[``\x81`\x01\x03a\r\x10WPP`@\x80Q\x80\x82\x01\x90\x91R`\x10\x81Ro\x10\\\xDC\xD9\\\x9D\x1A[\xDB\x88\x19\x98Z[\x19Y`\x82\x1B` \x82\x01R\x90V[\x81`\x11\x03a\rQWPP`@\x80Q\x80\x82\x01\x90\x91R`\x1D\x81R\x7FArithmetic overflow/underflow\0\0\0` \x82\x01R\x90V[\x81`\x12\x03a\r\x85WPP`@\x80Q\x80\x82\x01\x90\x91R`\x10\x81RoDivision by zero`\x80\x1B` \x82\x01R\x90V[\x81`!\x03a\r\xBBWPP`@\x80Q\x80\x82\x01\x90\x91R`\x12\x81RqInvalid enum value`p\x1B` \x82\x01R\x90V[\x81`\"\x03a\r\xE2W`@Q\x80``\x01`@R\x80`1\x81R` \x01a\x13\xB3`1\x919\x92\x91PPV[\x81`1\x03a\x0E\x18WPP`@\x80Q\x80\x82\x01\x90\x91R`\x12\x81RqPop on empty array`p\x1B` \x82\x01R\x90V[\x81`2\x03a\x0EYWPP`@\x80Q\x80\x82\x01\x90\x91R`\x19\x81R\x7FArray index out of bounds\0\0\0\0\0\0\0` \x82\x01R\x90V[\x81`A\x03a\x0E\x9AWPP`@\x80Q\x80\x82\x01\x90\x91R`\x1A\x81R\x7FMemory allocation overflow\0\0\0\0\0\0` \x82\x01R\x90V[\x81`Q\x03a\x0E\xDBWPP`@\x80Q\x80\x82\x01\x90\x91R`\x19\x81R\x7FZero initialized variable\0\0\0\0\0\0\0` \x82\x01R\x90V[`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x83\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F(W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0FO\x91\x90\x81\x01\x90a\x11\xF1V[`@Q` \x01a\x0F_\x91\x90a\x13\x17V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x91\x90PV[a\x0B\xBF\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[__` \x83\x85\x03\x12\x15a\x0F\xA9W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xBFW__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0F\xCFW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xE5W__\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x0F\xF6W__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_` \x82\x84\x03\x12\x15a\x10\x16W__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x10-W__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x10CW__\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x10ZW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x10CW__\xFD[` \x81R\x81` \x82\x01R\x81\x83`@\x83\x017_\x81\x83\x01`@\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01`\x1F\x19\x16\x01\x01\x91\x90PV[_`\x03=\x11\x15a\x10\xADW`\x04__>P_Q`\xE0\x1C[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x10\xEAWa\x10\xEAa\x10\xB0V[`@RPPV[_`D=\x10\x15a\x10\xFEW\x90V[`@Q=`\x03\x19\x01`\x04\x82>\x80Q=`$\x82\x01\x11g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x11(WPP\x90V[\x80\x82\x01\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11DWPPPP\x90V[=\x84\x01`\x03\x19\x01\x82\x82\x01` \x01\x11\x15a\x11^WPPPP\x90V[a\x11m` \x82\x85\x01\x01\x85a\x10\xC4V[P\x93\x92PPPV[_[\x83\x81\x10\x15a\x11\x8FW\x81\x81\x01Q\x83\x82\x01R` \x01a\x11wV[PP_\x91\x01RV[_\x81Q\x80\x84Ra\x11\xAE\x81` \x86\x01` \x86\x01a\x11uV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x10C` \x83\x01\x84a\x11\x97V[__`#=\x11\x15a\x11\xEDW` `\x04_>PP_Q`\x01\x90[\x90\x91V[_` \x82\x84\x03\x12\x15a\x12\x01W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\x17W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x12'W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12AWa\x12Aa\x10\xB0V[`@Qa\x12X`\x1F\x83\x01`\x1F\x19\x16` \x01\x82a\x10\xC4V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x12lW__\xFD[a\x12}\x82` \x83\x01` \x86\x01a\x11uV[\x95\x94PPPPPV[`@\x81R_a\x12\x98`@\x83\x01\x85a\x11\x97V[\x90P\x82` \x83\x01R\x93\x92PPPV[`@\x81R_a\x12\xB9`@\x83\x01\x85a\x11\x97V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R_a\x12\xE2`@\x83\x01\x85a\x11\x97V[\x90P\x82\x15\x15` \x83\x01R\x93\x92PPPV[`@\x81R_a\x13\x05`@\x83\x01\x85a\x11\x97V[\x82\x81\x03` \x84\x01Ra\x12}\x81\x85a\x11\x97V[k\x02\x83\x0BsK\x19\x03\x1B{#)\xD1`\xA5\x1B\x81R_\x82Qa\x13=\x81`\x0C\x85\x01` \x87\x01a\x11uV[\x91\x90\x91\x01`\x0C\x01\x92\x91PPV\xFETransaction failed with raw data:Raw call to module failed - likely wrong address or undeployed contractStorage write to incorrectly encoded storage slot\xA2dipfsX\"\x12 \xC3\x0B\xD5\x84\xCDL\xF2S\x03\x17\x81\x05\x10\x89\xE9\xA6}\xAD2]\x05\xD6\xB3\x01\xF5a\xC1\xB8\xD1=\x95\xF4dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\xC0@b&\x14a\0CW\x80c\xE3\x1E\x07\x88\x14a\0EW\x80c\xF8\xCC\xBFG\x14a\0XW[__\xFD[\0[a\0Ca\0S6`\x04a\x0F\x98V[a\0\x7FV[`\x0CTa\0k\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xEAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x0E\x91\x90a\x10\x06V[`@Qc\xC8\x8A^m`\xE0\x1B\x81R0`\x04\x82\x01Rg\r\xE0\xB6\xB3\xA7d\0\0`$\x82\x01R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC8\x8A^m\x90`D\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01hW__\xFD[PZ\xF1\x15\x80\x15a\x01zW=__>=_\xFD[PPPPa\x01\xBC`@Q\x80`@\x01`@R\x80`\x1C\x81R` \x01\x7FStarting trigger addition...\0\0\0\0\x81RPa\x0B|V[`@\x80Q\x80\x82\x01\x90\x91R`\x14\x81Rs*94\xB3\xB3\xB2\xB9\x1020\xBA0\x9062\xB73\xBA4\x1D`a\x1B` \x82\x01Ra\x01\xF1\x90\x83a\x0B\xC2V[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02;W__\xFD[PZ\xF1\x15\x80\x15a\x02MW=__>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01RoWAVS_SAFE_MODULE`\x80\x1B`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\xC1W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xE5\x91\x90a\x10\x1DV[\x90P`\x01`\x01`\xA0\x1B\x03\x81\x16a\x03;W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01RuInvalid module address`P\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[a\x03l`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01n&\xB7\xB2:\xB62\x900\xB2292\xB9\xB9\x9D`\x89\x1B\x81RP\x82a\x0C\x0BV[a\x03\x95`@Q\x80`@\x01`@R\x80`\x07\x81R` \x01f)\xB2\xB722\xB9\x1D`\xC9\x1B\x81RP3a\x0C\x0BV[`@\x80Q\x80\x82\x01\x90\x91R`\x0F\x81Rn)\xB2\xB722\xB9\x1010\xB60\xB71\xB2\x9D`\x89\x1B` \x82\x01Ra\x03\xC6\x9031a\x0B\xC2V[a\x03\xF7`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01n)\xB1\xB94\xB8:\x1010\xB60\xB71\xB2\x9D`\x89\x1B\x81RPGa\x0B\xC2V[g\x01cEx]\x8A\0\x0031\x10\x15a\x04[W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FInsufficient ETH balance in send`D\x82\x01Ra2\xB9`\xF1\x1B`d\x82\x01R`\x84\x01a\x032V[g\x01cEx]\x8A\0\0G\x10\x15a\x04\xBEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FInsufficient ETH balance in scri`D\x82\x01Ra\x1C\x1D`\xF2\x1B`d\x82\x01R`\x84\x01a\x032V[\x80`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x05\x16W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FNo code at module address\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x032V[a\x05T`@Q\x80`@\x01`@R\x80`\x1D\x81R` \x01\x7FModule code exists at address\0\0\0\x81RPa\x0B|V[\x80`\x01`\x01`\xA0\x1B\x03\x16c\x18o\x03T`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x05\xAEWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x05\xAB\x91\x81\x01\x90a\x10\x1DV[`\x01[a\x06\xBDW=\x80\x80\x15a\x05\xDBW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x05\xE0V[``\x91P[Pa\x06\x1E`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p&\xB7\xB2:\xB62\x901\xB7\xB22\x909\xB4\xBD2\x9D`y\x1B\x81RP\x84`\x01`\x01`\xA0\x1B\x03\x16;a\x0B\xC2V[a\x06?`@Q\x80`\x80\x01`@R\x80`G\x81R` \x01a\x13l`G\x919a\x0B|V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`G`$\x82\x01R\x7FFailed to read Safe address - mo`D\x82\x01R\x7Fdule might not exist or not be d`d\x82\x01Rf\x19\\\x1B\x1B\xDEYY`\xCA\x1B`\x84\x82\x01R`\xA4\x01a\x032V[a\x06\xEC`@Q\x80`@\x01`@R\x80`\r\x81R` \x01l)\xB0\xB32\x900\xB2292\xB9\xB9\x9D`\x99\x1B\x81RP\x82a\x0C\x0BV[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x079W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01RsSafe address is zero``\x1B`D\x82\x01R`d\x01a\x032V[P\x80`\x01`\x01`\xA0\x1B\x03\x16c\x15\x8E\xF9>`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x07\x94WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x07\x91\x91\x81\x01\x90a\x10JV[`\x01[a\x07\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FFailed to check module initializ`D\x82\x01Rd0\xBA4\xB7\xB7`\xD9\x1B`d\x82\x01R`\x84\x01a\x032V[a\x08#`@Q\x80`@\x01`@R\x80`\x13\x81R` \x01r&\xB7\xB2:\xB62\x904\xB74\xBA4\xB0\xB64\xBD2\xB2\x1D`i\x1B\x81RP\x82a\x0CPV[\x80a\x08iW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01Ru\x13[\xD9\x1D[\x19H\x1B\x9B\xDD\x08\x1A[\x9A]\x1AX[\x1A^\x99Y`R\x1B`D\x82\x01R`d\x01a\x032V[P`@Qc\x1Cc\xC0\xF1`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x82\x16\x90c\xE3\x1E\x07\x88\x90g\x01cEx]\x8A\0\0\x90a\x08\xA2\x90\x89\x90\x89\x90`\x04\x01a\x10iV[_`@Q\x80\x83\x03\x81\x85\x88\x80;\x15\x80\x15a\x08\xB9W__\xFD[PZ\xF1\x93PPPP\x80\x15a\x08\xCBWP`\x01[a\n\xC7Wa\x08\xD7a\x10\x97V[\x80c\x08\xC3y\xA0\x03a\tOWPa\x08\xEBa\x10\xF1V[\x80a\x08\xF6WPa\t\xB7V[a\t5`@Q\x80`@\x01`@R\x80`\x1F\x81R` \x01\x7FTransaction failed with reason:\0\x81RP\x82a\x0C\x95V[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x032\x91\x90a\x11\xC2V[cNH{q\x03a\t\xB7Wa\taa\x11\xD4V[\x90a\tlWPa\t\xB7V[_a\tv\x82a\x0C\xDAV[\x90Pa\t5`@Q\x80`@\x01`@R\x80`\x1E\x81R` \x01\x7FTransaction failed with panic:\0\0\x81RP\x82a\x0C\x95V[=\x80\x80\x15a\t\xE0W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\t\xE5V[``\x91P[Pa\n\x7F`@Q\x80``\x01`@R\x80`!\x81R` \x01a\x13K`!\x919`@Qcq\xAA\xD1\r`\xE0\x1B\x81Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90cq\xAA\xD1\r\x90a\n9\x90\x86\x90`\x04\x01a\x11\xC2V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\nSW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\nz\x91\x90\x81\x01\x90a\x11\xF1V[a\x0C\x95V[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FTransaction failed with raw data`D\x82\x01R`d\x01a\x032V[a\x0B\x05`@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FSuccessfully added trigger\0\0\0\0\0\0\x81RPa\x0B|V[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x0B_W__\xFD[PZ\xF1\x15\x80\x15a\x0BqW=__>=_\xFD[PPPPPPPPPV[a\x0B\xBF\x81`@Q`$\x01a\x0B\x90\x91\x90a\x11\xC2V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x0FuV[PV[a\x0C\x07\x82\x82`@Q`$\x01a\x0B\xD8\x92\x91\x90a\x12\x86V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c-\x83\x9C\xB3`\xE2\x1B\x17\x90Ra\x0FuV[PPV[a\x0C\x07\x82\x82`@Q`$\x01a\x0C!\x92\x91\x90a\x12\xA7V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0FuV[a\x0C\x07\x82\x82`@Q`$\x01a\x0Cf\x92\x91\x90a\x12\xD0V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xC3\xB5V5`\xE0\x1B\x17\x90Ra\x0FuV[a\x0C\x07\x82\x82`@Q`$\x01a\x0C\xAB\x92\x91\x90a\x12\xF3V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\x0FuV[``\x81`\x01\x03a\r\x10WPP`@\x80Q\x80\x82\x01\x90\x91R`\x10\x81Ro\x10\\\xDC\xD9\\\x9D\x1A[\xDB\x88\x19\x98Z[\x19Y`\x82\x1B` \x82\x01R\x90V[\x81`\x11\x03a\rQWPP`@\x80Q\x80\x82\x01\x90\x91R`\x1D\x81R\x7FArithmetic overflow/underflow\0\0\0` \x82\x01R\x90V[\x81`\x12\x03a\r\x85WPP`@\x80Q\x80\x82\x01\x90\x91R`\x10\x81RoDivision by zero`\x80\x1B` \x82\x01R\x90V[\x81`!\x03a\r\xBBWPP`@\x80Q\x80\x82\x01\x90\x91R`\x12\x81RqInvalid enum value`p\x1B` \x82\x01R\x90V[\x81`\"\x03a\r\xE2W`@Q\x80``\x01`@R\x80`1\x81R` \x01a\x13\xB3`1\x919\x92\x91PPV[\x81`1\x03a\x0E\x18WPP`@\x80Q\x80\x82\x01\x90\x91R`\x12\x81RqPop on empty array`p\x1B` \x82\x01R\x90V[\x81`2\x03a\x0EYWPP`@\x80Q\x80\x82\x01\x90\x91R`\x19\x81R\x7FArray index out of bounds\0\0\0\0\0\0\0` \x82\x01R\x90V[\x81`A\x03a\x0E\x9AWPP`@\x80Q\x80\x82\x01\x90\x91R`\x1A\x81R\x7FMemory allocation overflow\0\0\0\0\0\0` \x82\x01R\x90V[\x81`Q\x03a\x0E\xDBWPP`@\x80Q\x80\x82\x01\x90\x91R`\x19\x81R\x7FZero initialized variable\0\0\0\0\0\0\0` \x82\x01R\x90V[`@Qc4\x80Q\xD7`\xE1\x1B\x81R`\x04\x81\x01\x83\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90ci\0\xA3\xAE\x90`$\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F(W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0FO\x91\x90\x81\x01\x90a\x11\xF1V[`@Q` \x01a\x0F_\x91\x90a\x13\x17V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x91\x90PV[a\x0B\xBF\x81_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[__` \x83\x85\x03\x12\x15a\x0F\xA9W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xBFW__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0F\xCFW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xE5W__\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x0F\xF6W__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_` \x82\x84\x03\x12\x15a\x10\x16W__\xFD[PQ\x91\x90PV[_` \x82\x84\x03\x12\x15a\x10-W__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x10CW__\xFD[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x10ZW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x10CW__\xFD[` \x81R\x81` \x82\x01R\x81\x83`@\x83\x017_\x81\x83\x01`@\x90\x81\x01\x91\x90\x91R`\x1F\x90\x92\x01`\x1F\x19\x16\x01\x01\x91\x90PV[_`\x03=\x11\x15a\x10\xADW`\x04__>P_Q`\xE0\x1C[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x10\xEAWa\x10\xEAa\x10\xB0V[`@RPPV[_`D=\x10\x15a\x10\xFEW\x90V[`@Q=`\x03\x19\x01`\x04\x82>\x80Q=`$\x82\x01\x11g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x11(WPP\x90V[\x80\x82\x01\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11DWPPPP\x90V[=\x84\x01`\x03\x19\x01\x82\x82\x01` \x01\x11\x15a\x11^WPPPP\x90V[a\x11m` \x82\x85\x01\x01\x85a\x10\xC4V[P\x93\x92PPPV[_[\x83\x81\x10\x15a\x11\x8FW\x81\x81\x01Q\x83\x82\x01R` \x01a\x11wV[PP_\x91\x01RV[_\x81Q\x80\x84Ra\x11\xAE\x81` \x86\x01` \x86\x01a\x11uV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x10C` \x83\x01\x84a\x11\x97V[__`#=\x11\x15a\x11\xEDW` `\x04_>PP_Q`\x01\x90[\x90\x91V[_` \x82\x84\x03\x12\x15a\x12\x01W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12\x17W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x12'W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12AWa\x12Aa\x10\xB0V[`@Qa\x12X`\x1F\x83\x01`\x1F\x19\x16` \x01\x82a\x10\xC4V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\x12lW__\xFD[a\x12}\x82` \x83\x01` \x86\x01a\x11uV[\x95\x94PPPPPV[`@\x81R_a\x12\x98`@\x83\x01\x85a\x11\x97V[\x90P\x82` \x83\x01R\x93\x92PPPV[`@\x81R_a\x12\xB9`@\x83\x01\x85a\x11\x97V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R_a\x12\xE2`@\x83\x01\x85a\x11\x97V[\x90P\x82\x15\x15` \x83\x01R\x93\x92PPPV[`@\x81R_a\x13\x05`@\x83\x01\x85a\x11\x97V[\x82\x81\x03` \x84\x01Ra\x12}\x81\x85a\x11\x97V[k\x02\x83\x0BsK\x19\x03\x1B{#)\xD1`\xA5\x1B\x81R_\x82Qa\x13=\x81`\x0C\x85\x01` \x87\x01a\x11uV[\x91\x90\x91\x01`\x0C\x01\x92\x91PPV\xFETransaction failed with raw data:Raw call to module failed - likely wrong address or undeployed contractStorage write to incorrectly encoded storage slot\xA2dipfsX\"\x12 \xC3\x0B\xD5\x84\xCDL\xF2S\x03\x17\x81\x05\x10\x89\xE9\xA6}\xAD2]\x05\xD6\xB3\x01\xF5a\xC1\xB8\xD1=\x95\xF4dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `addTrigger(bytes)` and selector `0xe31e0788`.
    ```solidity
    function addTrigger(bytes memory triggerData) external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addTriggerCall {
        pub triggerData: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`addTrigger(bytes)`](addTriggerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct addTriggerReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addTriggerCall> for UnderlyingRustTuple<'_> {
                fn from(value: addTriggerCall) -> Self {
                    (value.triggerData,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addTriggerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { triggerData: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<addTriggerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: addTriggerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for addTriggerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for addTriggerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = addTriggerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "addTrigger(bytes)";
            const SELECTOR: [u8; 4] = [227u8, 30u8, 7u8, 136u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                    &self.triggerData,
                ),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
    ```solidity
    function run() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`TriggerScript`](self) function calls.
    pub enum TriggerScriptCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        addTrigger(addTriggerCall),
        run(runCall),
    }
    #[automatically_derived]
    impl TriggerScriptCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] =
            &[[192u8, 64u8, 98u8, 38u8], [227u8, 30u8, 7u8, 136u8], [248u8, 204u8, 191u8, 71u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for TriggerScriptCalls {
        const NAME: &'static str = "TriggerScriptCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::addTrigger(_) => <addTriggerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<TriggerScriptCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TriggerScriptCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(TriggerScriptCalls::run)
                    }
                    run
                },
                {
                    fn addTrigger(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TriggerScriptCalls> {
                        <addTriggerCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(TriggerScriptCalls::addTrigger)
                    }
                    addTrigger
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<TriggerScriptCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(TriggerScriptCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::addTrigger(inner) => {
                    <addTriggerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::addTrigger(inner) => {
                    <addTriggerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`TriggerScript`](self) contract instance.

    See the [wrapper's documentation](`TriggerScriptInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> TriggerScriptInstance<T, P, N> {
        TriggerScriptInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<TriggerScriptInstance<T, P, N>>>
    {
        TriggerScriptInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        TriggerScriptInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`TriggerScript`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`TriggerScript`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct TriggerScriptInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for TriggerScriptInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("TriggerScriptInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > TriggerScriptInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`TriggerScript`](self) contract instance.

        See the [wrapper's documentation](`TriggerScriptInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(provider: P) -> alloy_contract::Result<TriggerScriptInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> TriggerScriptInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> TriggerScriptInstance<T, P, N> {
            TriggerScriptInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > TriggerScriptInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`addTrigger`] function.
        pub fn addTrigger(
            &self,
            triggerData: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, addTriggerCall, N> {
            self.call_builder(&addTriggerCall { triggerData })
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > TriggerScriptInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
