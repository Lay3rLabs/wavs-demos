/**

Generated by the following Solidity interface...
```solidity
interface InitializeSafeModule {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod InitializeSafeModule {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b50610e568061002d5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f5ffd5b610040610069565b005b600c546100559062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100d4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100f89190610a9b565b60405163350d56bf60e01b815260206004820152601060248201526f574156535f534146455f4d4f44554c4560801b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa15801561016b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061018f9190610acd565b60405163350d56bf60e01b815260206004820152601060248201526f29a2a92b24a1a2afa82927ab24a222a960811b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610202573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102269190610acd565b90506102596040518060400160405280600f81526020016e26b7b23ab6329030b2323932b9b99d60891b8152508361069a565b61028c6040518060400160405280601181526020017029b2b93b34b1b290383937bb34b232b91d60791b8152508261069a565b816001600160a01b0381163b6102e95760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f6465206174206d6f64756c6520616464726573730000000000000060448201526064015b60405180910390fd5b60405163ce817d4760e01b815260048101859052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b158015610333575f5ffd5b505af1158015610345573d5f5f3e3d5ffd5b505060405163189acdbd60e31b81526001600160a01b0385811660048301528416925063c4d66de891506024015f604051808303815f87803b158015610389575f5ffd5b505af192505050801561039a575060015b610421576103a6610aed565b806308c379a00361041757506103ba610b47565b806103c55750610419565b6103fd6040518060400160405280601681526020017524b734ba34b0b634bd30ba34b7b7103330b4b632b21d60511b815250826106e3565b8060405162461bcd60e51b81526004016102e09190610c0e565b505b3d5f5f3e3d5ffd5b610442604051806060016040528060238152602001610dfe60239139610728565b5f816001600160a01b031663186f03546040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a39190610acd565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa158015610515573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105399190610c20565b905080806105d15750604051637ed1ec7d60e01b815260206004820152600d60248201526c454e41424c455f4d4f44554c4560981b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156105ad573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105d19190610c20565b1561062257816105e1818761076e565b6106206040518060400160405280601a81526020017f456e61626c6564206d6f64756c65206f6e20536166652061743a0000000000008152508461069a565b505b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561067c575f5ffd5b505af115801561068e573d5f5f3e3d5ffd5b50505050505050505050565b6106df82826040516024016106b0929190610c3f565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526109b1565b5050565b6106df82826040516024016106f9929190610c68565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526109b1565b61076b8160405160240161073c9190610c0e565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526109b1565b50565b5f826001600160a01b03163b116107c75760405162461bcd60e51b815260206004820152601760248201527f4e6f20636f64652061742053616665206164647265737300000000000000000060448201526064016102e0565b816001600160a01b031663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa92505050801561082457506040513d5f823e601f3d908101601f191682016040526108219190810190610c95565b60015b6108a25760405162461bcd60e51b815260206004820152604360248201527f4661696c656420746f20696e74657261637420776974682053616665202d206960448201527f6e76616c696420536166652061646472657373206f72206e6f74206465706c6f6064820152621e595960ea1b608482015260a4016102e0565b5f8151116108e75760405162461bcd60e51b81526020600482015260126024820152715361666520686173206e6f206f776e65727360701b60448201526064016102e0565b604080516001600160a01b038481166024808401919091528351808403909101815260449092019092526020810180516001600160e01b031663610b592560e01b179052908416636a761202855f84818080808080610945896109ba565b6040518b63ffffffff1660e01b815260040161096a9a99989796959493929190610d44565b6020604051808303815f875af1158015610986573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109aa9190610c20565b5050505050565b61076b81610a7c565b60605f826001600160a01b031663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa1580156109f8573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a1f9190810190610c95565b5f81518110610a3057610a30610de9565b602090810291909101810151604080516001600160a01b038316938101939093525f90830152600160f81b60608301529150606101604051602081830303815290604052915050919050565b5f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f60208284031215610aab575f5ffd5b5051919050565b80516001600160a01b0381168114610ac8575f5ffd5b919050565b5f60208284031215610add575f5ffd5b610ae682610ab2565b9392505050565b5f60033d1115610b035760045f5f3e505f5160e01c5b90565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f1916810167ffffffffffffffff81118282101715610b4057610b40610b06565b6040525050565b5f60443d1015610b545790565b6040513d600319016004823e80513d602482011167ffffffffffffffff82111715610b7e57505090565b808201805167ffffffffffffffff811115610b9a575050505090565b3d8401600319018282016020011115610bb4575050505090565b610bc360208285010185610b1a565b509392505050565b5f81518084525f5b81811015610bef57602081850181015186830182015201610bd3565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610ae66020830184610bcb565b5f60208284031215610c30575f5ffd5b81518015158114610ae6575f5ffd5b604081525f610c516040830185610bcb565b905060018060a01b03831660208301529392505050565b604081525f610c7a6040830185610bcb565b8281036020840152610c8c8185610bcb565b95945050505050565b5f60208284031215610ca5575f5ffd5b815167ffffffffffffffff811115610cbb575f5ffd5b8201601f81018413610ccb575f5ffd5b805167ffffffffffffffff811115610ce557610ce5610b06565b8060051b604051610cf96020830182610b1a565b918252602081840181019290810187841115610d13575f5ffd5b6020850194505b83851015610d3957610d2b85610ab2565b815260209485019401610d1a565b509695505050505050565b60018060a01b038b16815289602082015261014060408201525f610d6c61014083018b610bcb565b60028a10610d8857634e487b7160e01b5f52602160045260245ffd5b8960608401528860808401528760a08401528660c0840152610db560e08401876001600160a01b03169052565b6001600160a01b038516610100840152828103610120840152610dd88185610bcb565b9d9c50505050505050505050505050565b634e487b7160e01b5f52603260045260245ffdfe5375636365737366756c6c7920696e697469616c697a656420536166654d6f64756c65a264697066735822122015ade6626819f668c321ea732183f198552d024341af9b951c74e27be26f15b264736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa\x0EV\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[__\xFD[a\0@a\0iV[\0[`\x0CTa\0U\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xD4W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xF8\x91\x90a\n\x9BV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01RoWAVS_SAFE_MODULE`\x80\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01kW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x8F\x91\x90a\n\xCDV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01Ro)\xA2\xA9+$\xA1\xA2\xAF\xA8)'\xAB$\xA2\"\xA9`\x81\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x02W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02&\x91\x90a\n\xCDV[\x90Pa\x02Y`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01n&\xB7\xB2:\xB62\x900\xB2292\xB9\xB9\x9D`\x89\x1B\x81RP\x83a\x06\x9AV[a\x02\x8C`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p)\xB2\xB9;4\xB1\xB2\x90897\xBB4\xB22\xB9\x1D`y\x1B\x81RP\x82a\x06\x9AV[\x81`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x02\xE9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FNo code at module address\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x85\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x033W__\xFD[PZ\xF1\x15\x80\x15a\x03EW=__>=_\xFD[PP`@Qc\x18\x9A\xCD\xBD`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R\x84\x16\x92Pc\xC4\xD6m\xE8\x91P`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\x89W__\xFD[PZ\xF1\x92PPP\x80\x15a\x03\x9AWP`\x01[a\x04!Wa\x03\xA6a\n\xEDV[\x80c\x08\xC3y\xA0\x03a\x04\x17WPa\x03\xBAa\x0BGV[\x80a\x03\xC5WPa\x04\x19V[a\x03\xFD`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01u$\xB74\xBA4\xB0\xB64\xBD0\xBA4\xB7\xB7\x1030\xB4\xB62\xB2\x1D`Q\x1B\x81RP\x82a\x06\xE3V[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02\xE0\x91\x90a\x0C\x0EV[P[=__>=_\xFD[a\x04B`@Q\x80``\x01`@R\x80`#\x81R` \x01a\r\xFE`#\x919a\x07(V[_\x81`\x01`\x01`\xA0\x1B\x03\x16c\x18o\x03T`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x7FW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xA3\x91\x90a\n\xCDV[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x15W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x059\x91\x90a\x0C V[\x90P\x80\x80a\x05\xD1WP`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01RlENABLE_MODULE`\x98\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xADW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xD1\x91\x90a\x0C V[\x15a\x06\"W\x81a\x05\xE1\x81\x87a\x07nV[a\x06 `@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FEnabled module on Safe at:\0\0\0\0\0\0\x81RP\x84a\x06\x9AV[P[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06|W__\xFD[PZ\xF1\x15\x80\x15a\x06\x8EW=__>=_\xFD[PPPPPPPPPPV[a\x06\xDF\x82\x82`@Q`$\x01a\x06\xB0\x92\x91\x90a\x0C?V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\t\xB1V[PPV[a\x06\xDF\x82\x82`@Q`$\x01a\x06\xF9\x92\x91\x90a\x0ChV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\t\xB1V[a\x07k\x81`@Q`$\x01a\x07<\x91\x90a\x0C\x0EV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\t\xB1V[PV[_\x82`\x01`\x01`\xA0\x1B\x03\x16;\x11a\x07\xC7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FNo code at Safe address\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE0V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xA0\xE6~+`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x08$WP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x08!\x91\x90\x81\x01\x90a\x0C\x95V[`\x01[a\x08\xA2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`C`$\x82\x01R\x7FFailed to interact with Safe - i`D\x82\x01R\x7Fnvalid Safe address or not deplo`d\x82\x01Rb\x1EYY`\xEA\x1B`\x84\x82\x01R`\xA4\x01a\x02\xE0V[_\x81Q\x11a\x08\xE7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01RqSafe has no owners`p\x1B`D\x82\x01R`d\x01a\x02\xE0V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x80\x84\x01\x91\x90\x91R\x83Q\x80\x84\x03\x90\x91\x01\x81R`D\x90\x92\x01\x90\x92R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16ca\x0BY%`\xE0\x1B\x17\x90R\x90\x84\x16cjv\x12\x02\x85_\x84\x81\x80\x80\x80\x80\x80a\tE\x89a\t\xBAV[`@Q\x8Bc\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\tj\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\rDV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t\x86W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xAA\x91\x90a\x0C V[PPPPPV[a\x07k\x81a\n|V[``_\x82`\x01`\x01`\xA0\x1B\x03\x16c\xA0\xE6~+`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xF8W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\n\x1F\x91\x90\x81\x01\x90a\x0C\x95V[_\x81Q\x81\x10a\n0Wa\n0a\r\xE9V[` \x90\x81\x02\x91\x90\x91\x01\x81\x01Q`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x93\x81\x01\x93\x90\x93R_\x90\x83\x01R`\x01`\xF8\x1B``\x83\x01R\x91P`a\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x91\x90PV[_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[_` \x82\x84\x03\x12\x15a\n\xABW__\xFD[PQ\x91\x90PV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\xC8W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\n\xDDW__\xFD[a\n\xE6\x82a\n\xB2V[\x93\x92PPPV[_`\x03=\x11\x15a\x0B\x03W`\x04__>P_Q`\xE0\x1C[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0B@Wa\x0B@a\x0B\x06V[`@RPPV[_`D=\x10\x15a\x0BTW\x90V[`@Q=`\x03\x19\x01`\x04\x82>\x80Q=`$\x82\x01\x11g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0B~WPP\x90V[\x80\x82\x01\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x9AWPPPP\x90V[=\x84\x01`\x03\x19\x01\x82\x82\x01` \x01\x11\x15a\x0B\xB4WPPPP\x90V[a\x0B\xC3` \x82\x85\x01\x01\x85a\x0B\x1AV[P\x93\x92PPPV[_\x81Q\x80\x84R_[\x81\x81\x10\x15a\x0B\xEFW` \x81\x85\x01\x81\x01Q\x86\x83\x01\x82\x01R\x01a\x0B\xD3V[P_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\n\xE6` \x83\x01\x84a\x0B\xCBV[_` \x82\x84\x03\x12\x15a\x0C0W__\xFD[\x81Q\x80\x15\x15\x81\x14a\n\xE6W__\xFD[`@\x81R_a\x0CQ`@\x83\x01\x85a\x0B\xCBV[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R_a\x0Cz`@\x83\x01\x85a\x0B\xCBV[\x82\x81\x03` \x84\x01Ra\x0C\x8C\x81\x85a\x0B\xCBV[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a\x0C\xA5W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xBBW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0C\xCBW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xE5Wa\x0C\xE5a\x0B\x06V[\x80`\x05\x1B`@Qa\x0C\xF9` \x83\x01\x82a\x0B\x1AV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x87\x84\x11\x15a\r\x13W__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\r9Wa\r+\x85a\n\xB2V[\x81R` \x94\x85\x01\x94\x01a\r\x1AV[P\x96\x95PPPPPPV[`\x01\x80`\xA0\x1B\x03\x8B\x16\x81R\x89` \x82\x01Ra\x01@`@\x82\x01R_a\rla\x01@\x83\x01\x8Ba\x0B\xCBV[`\x02\x8A\x10a\r\x88WcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x89``\x84\x01R\x88`\x80\x84\x01R\x87`\xA0\x84\x01R\x86`\xC0\x84\x01Ra\r\xB5`\xE0\x84\x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x90RV[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x01\0\x84\x01R\x82\x81\x03a\x01 \x84\x01Ra\r\xD8\x81\x85a\x0B\xCBV[\x9D\x9CPPPPPPPPPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFESuccessfully initialized SafeModule\xA2dipfsX\"\x12 \x15\xAD\xE6bh\x19\xF6h\xC3!\xEAs!\x83\xF1\x98U-\x02CA\xAF\x9B\x95\x1Ct\xE2{\xE2o\x15\xB2dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c8063c040622614610038578063f8ccbf4714610042575b5f5ffd5b610040610069565b005b600c546100559062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100d4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100f89190610a9b565b60405163350d56bf60e01b815260206004820152601060248201526f574156535f534146455f4d4f44554c4560801b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa15801561016b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061018f9190610acd565b60405163350d56bf60e01b815260206004820152601060248201526f29a2a92b24a1a2afa82927ab24a222a960811b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610202573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102269190610acd565b90506102596040518060400160405280600f81526020016e26b7b23ab6329030b2323932b9b99d60891b8152508361069a565b61028c6040518060400160405280601181526020017029b2b93b34b1b290383937bb34b232b91d60791b8152508261069a565b816001600160a01b0381163b6102e95760405162461bcd60e51b815260206004820152601960248201527f4e6f20636f6465206174206d6f64756c6520616464726573730000000000000060448201526064015b60405180910390fd5b60405163ce817d4760e01b815260048101859052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b158015610333575f5ffd5b505af1158015610345573d5f5f3e3d5ffd5b505060405163189acdbd60e31b81526001600160a01b0385811660048301528416925063c4d66de891506024015f604051808303815f87803b158015610389575f5ffd5b505af192505050801561039a575060015b610421576103a6610aed565b806308c379a00361041757506103ba610b47565b806103c55750610419565b6103fd6040518060400160405280601681526020017524b734ba34b0b634bd30ba34b7b7103330b4b632b21d60511b815250826106e3565b8060405162461bcd60e51b81526004016102e09190610c0e565b505b3d5f5f3e3d5ffd5b610442604051806060016040528060238152602001610dfe60239139610728565b5f816001600160a01b031663186f03546040518163ffffffff1660e01b8152600401602060405180830381865afa15801561047f573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a39190610acd565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa158015610515573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105399190610c20565b905080806105d15750604051637ed1ec7d60e01b815260206004820152600d60248201526c454e41424c455f4d4f44554c4560981b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156105ad573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105d19190610c20565b1561062257816105e1818761076e565b6106206040518060400160405280601a81526020017f456e61626c6564206d6f64756c65206f6e20536166652061743a0000000000008152508461069a565b505b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b15801561067c575f5ffd5b505af115801561068e573d5f5f3e3d5ffd5b50505050505050505050565b6106df82826040516024016106b0929190610c3f565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b1790526109b1565b5050565b6106df82826040516024016106f9929190610c68565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526109b1565b61076b8160405160240161073c9190610c0e565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b1790526109b1565b50565b5f826001600160a01b03163b116107c75760405162461bcd60e51b815260206004820152601760248201527f4e6f20636f64652061742053616665206164647265737300000000000000000060448201526064016102e0565b816001600160a01b031663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa92505050801561082457506040513d5f823e601f3d908101601f191682016040526108219190810190610c95565b60015b6108a25760405162461bcd60e51b815260206004820152604360248201527f4661696c656420746f20696e74657261637420776974682053616665202d206960448201527f6e76616c696420536166652061646472657373206f72206e6f74206465706c6f6064820152621e595960ea1b608482015260a4016102e0565b5f8151116108e75760405162461bcd60e51b81526020600482015260126024820152715361666520686173206e6f206f776e65727360701b60448201526064016102e0565b604080516001600160a01b038481166024808401919091528351808403909101815260449092019092526020810180516001600160e01b031663610b592560e01b179052908416636a761202855f84818080808080610945896109ba565b6040518b63ffffffff1660e01b815260040161096a9a99989796959493929190610d44565b6020604051808303815f875af1158015610986573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109aa9190610c20565b5050505050565b61076b81610a7c565b60605f826001600160a01b031663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa1580156109f8573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a1f9190810190610c95565b5f81518110610a3057610a30610de9565b602090810291909101810151604080516001600160a01b038316938101939093525f90830152600160f81b60608301529150606101604051602081830303815290604052915050919050565b5f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b5f60208284031215610aab575f5ffd5b5051919050565b80516001600160a01b0381168114610ac8575f5ffd5b919050565b5f60208284031215610add575f5ffd5b610ae682610ab2565b9392505050565b5f60033d1115610b035760045f5f3e505f5160e01c5b90565b634e487b7160e01b5f52604160045260245ffd5b601f8201601f1916810167ffffffffffffffff81118282101715610b4057610b40610b06565b6040525050565b5f60443d1015610b545790565b6040513d600319016004823e80513d602482011167ffffffffffffffff82111715610b7e57505090565b808201805167ffffffffffffffff811115610b9a575050505090565b3d8401600319018282016020011115610bb4575050505090565b610bc360208285010185610b1a565b509392505050565b5f81518084525f5b81811015610bef57602081850181015186830182015201610bd3565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f610ae66020830184610bcb565b5f60208284031215610c30575f5ffd5b81518015158114610ae6575f5ffd5b604081525f610c516040830185610bcb565b905060018060a01b03831660208301529392505050565b604081525f610c7a6040830185610bcb565b8281036020840152610c8c8185610bcb565b95945050505050565b5f60208284031215610ca5575f5ffd5b815167ffffffffffffffff811115610cbb575f5ffd5b8201601f81018413610ccb575f5ffd5b805167ffffffffffffffff811115610ce557610ce5610b06565b8060051b604051610cf96020830182610b1a565b918252602081840181019290810187841115610d13575f5ffd5b6020850194505b83851015610d3957610d2b85610ab2565b815260209485019401610d1a565b509695505050505050565b60018060a01b038b16815289602082015261014060408201525f610d6c61014083018b610bcb565b60028a10610d8857634e487b7160e01b5f52602160045260245ffd5b8960608401528860808401528760a08401528660c0840152610db560e08401876001600160a01b03169052565b6001600160a01b038516610100840152828103610120840152610dd88185610bcb565b9d9c50505050505050505050505050565b634e487b7160e01b5f52603260045260245ffdfe5375636365737366756c6c7920696e697469616c697a656420536166654d6f64756c65a264697066735822122015ade6626819f668c321ea732183f198552d024341af9b951c74e27be26f15b264736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xC0@b&\x14a\08W\x80c\xF8\xCC\xBFG\x14a\0BW[__\xFD[a\0@a\0iV[\0[`\x0CTa\0U\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xD4W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\0\xF8\x91\x90a\n\x9BV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01RoWAVS_SAFE_MODULE`\x80\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01kW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x8F\x91\x90a\n\xCDV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x10`$\x82\x01Ro)\xA2\xA9+$\xA1\xA2\xAF\xA8)'\xAB$\xA2\"\xA9`\x81\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x02W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02&\x91\x90a\n\xCDV[\x90Pa\x02Y`@Q\x80`@\x01`@R\x80`\x0F\x81R` \x01n&\xB7\xB2:\xB62\x900\xB2292\xB9\xB9\x9D`\x89\x1B\x81RP\x83a\x06\x9AV[a\x02\x8C`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01p)\xB2\xB9;4\xB1\xB2\x90897\xBB4\xB22\xB9\x1D`y\x1B\x81RP\x82a\x06\x9AV[\x81`\x01`\x01`\xA0\x1B\x03\x81\x16;a\x02\xE9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01R\x7FNo code at module address\0\0\0\0\0\0\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x85\x90Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x033W__\xFD[PZ\xF1\x15\x80\x15a\x03EW=__>=_\xFD[PP`@Qc\x18\x9A\xCD\xBD`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R\x84\x16\x92Pc\xC4\xD6m\xE8\x91P`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x03\x89W__\xFD[PZ\xF1\x92PPP\x80\x15a\x03\x9AWP`\x01[a\x04!Wa\x03\xA6a\n\xEDV[\x80c\x08\xC3y\xA0\x03a\x04\x17WPa\x03\xBAa\x0BGV[\x80a\x03\xC5WPa\x04\x19V[a\x03\xFD`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01u$\xB74\xBA4\xB0\xB64\xBD0\xBA4\xB7\xB7\x1030\xB4\xB62\xB2\x1D`Q\x1B\x81RP\x82a\x06\xE3V[\x80`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x02\xE0\x91\x90a\x0C\x0EV[P[=__>=_\xFD[a\x04B`@Q\x80``\x01`@R\x80`#\x81R` \x01a\r\xFE`#\x919a\x07(V[_\x81`\x01`\x01`\xA0\x1B\x03\x16c\x18o\x03T`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x7FW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xA3\x91\x90a\n\xCDV[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x15W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x059\x91\x90a\x0C V[\x90P\x80\x80a\x05\xD1WP`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\r`$\x82\x01RlENABLE_MODULE`\x98\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xADW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xD1\x91\x90a\x0C V[\x15a\x06\"W\x81a\x05\xE1\x81\x87a\x07nV[a\x06 `@Q\x80`@\x01`@R\x80`\x1A\x81R` \x01\x7FEnabled module on Safe at:\0\0\0\0\0\0\x81RP\x84a\x06\x9AV[P[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06|W__\xFD[PZ\xF1\x15\x80\x15a\x06\x8EW=__>=_\xFD[PPPPPPPPPPV[a\x06\xDF\x82\x82`@Q`$\x01a\x06\xB0\x92\x91\x90a\x0C?V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\t\xB1V[PPV[a\x06\xDF\x82\x82`@Q`$\x01a\x06\xF9\x92\x91\x90a\x0ChV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16cK\\Bw`\xE0\x1B\x17\x90Ra\t\xB1V[a\x07k\x81`@Q`$\x01a\x07<\x91\x90a\x0C\x0EV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\t\xB1V[PV[_\x82`\x01`\x01`\xA0\x1B\x03\x16;\x11a\x07\xC7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FNo code at Safe address\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x02\xE0V[\x81`\x01`\x01`\xA0\x1B\x03\x16c\xA0\xE6~+`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x08$WP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x08!\x91\x90\x81\x01\x90a\x0C\x95V[`\x01[a\x08\xA2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`C`$\x82\x01R\x7FFailed to interact with Safe - i`D\x82\x01R\x7Fnvalid Safe address or not deplo`d\x82\x01Rb\x1EYY`\xEA\x1B`\x84\x82\x01R`\xA4\x01a\x02\xE0V[_\x81Q\x11a\x08\xE7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01RqSafe has no owners`p\x1B`D\x82\x01R`d\x01a\x02\xE0V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x84\x81\x16`$\x80\x84\x01\x91\x90\x91R\x83Q\x80\x84\x03\x90\x91\x01\x81R`D\x90\x92\x01\x90\x92R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16ca\x0BY%`\xE0\x1B\x17\x90R\x90\x84\x16cjv\x12\x02\x85_\x84\x81\x80\x80\x80\x80\x80a\tE\x89a\t\xBAV[`@Q\x8Bc\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\tj\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\rDV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t\x86W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xAA\x91\x90a\x0C V[PPPPPV[a\x07k\x81a\n|V[``_\x82`\x01`\x01`\xA0\x1B\x03\x16c\xA0\xE6~+`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xF8W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\n\x1F\x91\x90\x81\x01\x90a\x0C\x95V[_\x81Q\x81\x10a\n0Wa\n0a\r\xE9V[` \x90\x81\x02\x91\x90\x91\x01\x81\x01Q`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x93\x81\x01\x93\x90\x93R_\x90\x83\x01R`\x01`\xF8\x1B``\x83\x01R\x91P`a\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x91\x90PV[_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[_` \x82\x84\x03\x12\x15a\n\xABW__\xFD[PQ\x91\x90PV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\xC8W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\n\xDDW__\xFD[a\n\xE6\x82a\n\xB2V[\x93\x92PPPV[_`\x03=\x11\x15a\x0B\x03W`\x04__>P_Q`\xE0\x1C[\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0B@Wa\x0B@a\x0B\x06V[`@RPPV[_`D=\x10\x15a\x0BTW\x90V[`@Q=`\x03\x19\x01`\x04\x82>\x80Q=`$\x82\x01\x11g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0B~WPP\x90V[\x80\x82\x01\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0B\x9AWPPPP\x90V[=\x84\x01`\x03\x19\x01\x82\x82\x01` \x01\x11\x15a\x0B\xB4WPPPP\x90V[a\x0B\xC3` \x82\x85\x01\x01\x85a\x0B\x1AV[P\x93\x92PPPV[_\x81Q\x80\x84R_[\x81\x81\x10\x15a\x0B\xEFW` \x81\x85\x01\x81\x01Q\x86\x83\x01\x82\x01R\x01a\x0B\xD3V[P_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\n\xE6` \x83\x01\x84a\x0B\xCBV[_` \x82\x84\x03\x12\x15a\x0C0W__\xFD[\x81Q\x80\x15\x15\x81\x14a\n\xE6W__\xFD[`@\x81R_a\x0CQ`@\x83\x01\x85a\x0B\xCBV[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`@\x81R_a\x0Cz`@\x83\x01\x85a\x0B\xCBV[\x82\x81\x03` \x84\x01Ra\x0C\x8C\x81\x85a\x0B\xCBV[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a\x0C\xA5W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xBBW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0C\xCBW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xE5Wa\x0C\xE5a\x0B\x06V[\x80`\x05\x1B`@Qa\x0C\xF9` \x83\x01\x82a\x0B\x1AV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x87\x84\x11\x15a\r\x13W__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\r9Wa\r+\x85a\n\xB2V[\x81R` \x94\x85\x01\x94\x01a\r\x1AV[P\x96\x95PPPPPPV[`\x01\x80`\xA0\x1B\x03\x8B\x16\x81R\x89` \x82\x01Ra\x01@`@\x82\x01R_a\rla\x01@\x83\x01\x8Ba\x0B\xCBV[`\x02\x8A\x10a\r\x88WcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x89``\x84\x01R\x88`\x80\x84\x01R\x87`\xA0\x84\x01R\x86`\xC0\x84\x01Ra\r\xB5`\xE0\x84\x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x90RV[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x01\0\x84\x01R\x82\x81\x03a\x01 \x84\x01Ra\r\xD8\x81\x85a\x0B\xCBV[\x9D\x9CPPPPPPPPPPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD\xFESuccessfully initialized SafeModule\xA2dipfsX\"\x12 \x15\xAD\xE6bh\x19\xF6h\xC3!\xEAs!\x83\xF1\x98U-\x02CA\xAF\x9B\x95\x1Ct\xE2{\xE2o\x15\xB2dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
    ```solidity
    function IS_SCRIPT() external view returns (bool);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
    ```solidity
    function run() external;
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`InitializeSafeModule`](self) function calls.
    pub enum InitializeSafeModuleCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
    }
    #[automatically_derived]
    impl InitializeSafeModuleCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] =
            &[[192u8, 64u8, 98u8, 38u8], [248u8, 204u8, 191u8, 71u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for InitializeSafeModuleCalls {
        const NAME: &'static str = "InitializeSafeModuleCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<InitializeSafeModuleCalls>] = &[
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<InitializeSafeModuleCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(InitializeSafeModuleCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<InitializeSafeModuleCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(InitializeSafeModuleCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner),
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`InitializeSafeModule`](self) contract instance.

    See the [wrapper's documentation](`InitializeSafeModuleInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> InitializeSafeModuleInstance<T, P, N> {
        InitializeSafeModuleInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<InitializeSafeModuleInstance<T, P, N>>,
    > {
        InitializeSafeModuleInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        InitializeSafeModuleInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`InitializeSafeModule`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`InitializeSafeModule`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct InitializeSafeModuleInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for InitializeSafeModuleInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("InitializeSafeModuleInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > InitializeSafeModuleInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`InitializeSafeModule`](self) contract instance.

        See the [wrapper's documentation](`InitializeSafeModuleInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<InitializeSafeModuleInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> InitializeSafeModuleInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> InitializeSafeModuleInstance<T, P, N> {
            InitializeSafeModuleInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > InitializeSafeModuleInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(&self) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > InitializeSafeModuleInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
