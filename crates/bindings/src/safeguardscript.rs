/**

Generated by the following Solidity interface...
```solidity
interface SafeGuardScript {
    function IS_SCRIPT() external view returns (bool);
    function run() external;
    function setUp() external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "IS_SCRIPT",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "run",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setUp",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SafeGuardScript {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052600c805462ff00ff191662010001179055348015601f575f5ffd5b50612d2b8061002d5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630a9254e414610043578063c040622614610045578063f8ccbf471461004d575b5f5ffd5b005b610043610074565b600c546100609062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100df573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101039190610c1a565b60405163ce817d4760e01b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b158015610150575f5ffd5b505af1158015610162573d5f5f3e3d5ffd5b505060405163350d56bf60e01b815260206004820152600e60248201526d5354414b455f524547495354525960901b60448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa1580156101d4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101f89190610c45565b90505f6102036106dd565b60405163c1978d1f60e01b815260206004820152600e60248201526d14d0519157d512149154d213d31160921b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa158015610274573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102989190610c1a565b60405163350d56bf60e01b815260206004820152601560248201527429a0a322afa320a6262120a1a5afa420a7222622a960591b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610310573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103349190610c45565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156103a6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ca9190610c67565b15610418576103da8484846108c3565b9050610413604051806040016040528060158152602001742232b83637bcb2b2103732bb9029b0b3329030ba1d60591b815250826109cb565b6104f0565b60405163350d56bf60e01b81526020600482015260156024820152744558495354494e475f534146455f4144445245535360581b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa15801561048b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104af9190610c45565b90506104f06040518060400160405280601781526020017f5573696e67206578697374696e6720536166652061743a000000000000000000815250826109cb565b5f81866040516104ff90610c0d565b6001600160a01b03928316815291166020820152604001604051809103905ff08015801561052f573d5f5f3e3d5ffd5b50905061056a604051806040016040528060168152602001752232b83637bcb2b21029b0b332a3bab0b9321030ba1d60511b815250826109cb565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156105d7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105fb9190610c67565b15610643578161060b8183610a14565b61063d60405180604001604052806011815260200170536574206775617264206f6e205361666560781b815250610add565b50610664565b610664604051806060016040528060318152602001612cc560319139610add565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156106be575f5ffd5b505af11580156106d0573d5f5f3e3d5ffd5b5050505050505050505050565b60405163f877cb1960e01b815260206004820152600b60248201526a534146455f4f574e45525360a81b60448201526060905f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb19906064015f60405180830381865afa15801561074a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107719190810190610ced565b6040805180820190915260018152600b60fa1b60209091015290505f606090505f815167ffffffffffffffff8111156107ac576107ac610c86565b6040519080825280602002602001820160405280156107d5578160200160208202803683370190505b5090505f5b82518110156108bb577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663c6ce059d84838151811061082657610826610d7e565b60200260200101516040518263ffffffff1660e01b815260040161084a9190610dbd565b602060405180830381865afa158015610865573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108899190610c45565b82828151811061089b5761089b610d7e565b6001600160a01b03909216602092830291909101909101526001016107da565b509392505050565b6040515f907341675c099f32341bf84bfc5382af534df5c7461a90734e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec6790839063b63e800d60e01b90610919908990899085908a90829081908190602401610dcf565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051631688f0b960e01b81529091505f906001600160a01b03841690631688f0b99061097f90879086908690600401610e89565b6020604051808303815f875af115801561099b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109bf9190610c45565b98975050505050505050565b610a1082826040516024016109e1929190610ebc565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610b23565b5050565b604080516001600160a01b038381166024808401919091528351808403909101815260449092019092526020810180516001600160e01b031663e19a9dd960e01b179052908316636a761202845f84818080808080610a7289610b2c565b6040518b63ffffffff1660e01b8152600401610a979a99989796959493929190610ee5565b6020604051808303815f875af1158015610ab3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ad79190610c67565b50505050565b610b2081604051602401610af19190610dbd565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610b23565b50565b610b2081610bee565b60605f826001600160a01b031663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa158015610b6a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b919190810190610f8a565b5f81518110610ba257610ba2610d7e565b602090810291909101810151604080516001600160a01b038316938101939093525f90830152600160f81b60608301529150606101604051602081830303815290604052915050919050565b5f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b611c868061103f83390190565b5f60208284031215610c2a575f5ffd5b5051919050565b6001600160a01b0381168114610b20575f5ffd5b5f60208284031215610c55575f5ffd5b8151610c6081610c31565b9392505050565b5f60208284031215610c77575f5ffd5b81518015158114610c60575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610cc357610cc3610c86565b604052919050565b5f5b83811015610ce5578181015183820152602001610ccd565b50505f910152565b5f60208284031215610cfd575f5ffd5b815167ffffffffffffffff811115610d13575f5ffd5b8201601f81018413610d23575f5ffd5b805167ffffffffffffffff811115610d3d57610d3d610c86565b610d50601f8201601f1916602001610c9a565b818152856020838501011115610d64575f5ffd5b610d75826020830160208601610ccb565b95945050505050565b634e487b7160e01b5f52603260045260245ffd5b5f8151808452610da9816020860160208601610ccb565b601f01601f19169290920160200192915050565b602081525f610c606020830184610d92565b61010080825288519082018190525f9060208a0190610120840190835b81811015610e135783516001600160a01b0316835260209384019390920191600101610dec565b5050896020850152610e30604085018a6001600160a01b03169052565b83810360608501525f81526001600160a01b03881660808501526020019150610e569050565b6001600160a01b03851660a083015260ff841660c08301526001600160a01b03831660e083015298975050505050505050565b6001600160a01b03841681526060602082018190525f90610eac90830185610d92565b9050826040830152949350505050565b604081525f610ece6040830185610d92565b905060018060a01b03831660208301529392505050565b60018060a01b038b16815289602082015261014060408201525f610f0d61014083018b610d92565b60028a10610f2957634e487b7160e01b5f52602160045260245ffd5b8960608401528860808401528760a08401528660c0840152610f5660e08401876001600160a01b03169052565b6001600160a01b038516610100840152828103610120840152610f798185610d92565b9d9c50505050505050505050505050565b5f60208284031215610f9a575f5ffd5b815167ffffffffffffffff811115610fb0575f5ffd5b8201601f81018413610fc0575f5ffd5b805167ffffffffffffffff811115610fda57610fda610c86565b8060051b610fea60208201610c9a565b91825260208184018101929081019087841115611005575f5ffd5b6020850194505b83851015611033578451925061102183610c31565b8282526020948501949091019061100c565b97965050505050505056fe60c060405260785f55348015610013575f5ffd5b50604051611c86380380611c86833981016040819052610032916100bf565b6001600160a01b0380821660805282166100925760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420736166652061646472657373000000000000000000000000604482015260640160405180910390fd5b506001600160a01b031660a0526100f0565b80516001600160a01b03811681146100ba575f5ffd5b919050565b5f5f604083850312156100d0575f5ffd5b6100d9836100a4565b91506100e7602084016100a4565b90509250929050565b60805160a051611b606101265f395f81816101320152818161048101526109e101525f81816101ac015261034b0152611b605ff3fe608060405234801561000f575f5ffd5b50600436106100f0575f3560e01c806393271368116100935780639aa9fda5116100635780639aa9fda51461026e5780639e83e30614610281578063a71f8da0146102a1578063c56fb0fd146102b4575f5ffd5b806393271368146101f6578063944074651461020957806397f5365a1461022b57806399d7cf4b1461024c575f5ffd5b806363710c05116100ce57806363710c051461017f57806375f0bb5214610194578063761de19f146101a75780637b4f3373146101ce575f5ffd5b806301ffc9a7146100f4578063186f03541461012d578063216a3e9a1461016c575b5f5ffd5b61011861010236600461113a565b6001600160e01b03191663736bd41d60e11b1490565b60405190151581526020015b60405180910390f35b6101547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610124565b61011861017a36600461115c565b6102bc565b61019261018d366004611193565b6103f2565b005b6101926101a23660046112df565b610476565b6101547f000000000000000000000000000000000000000000000000000000000000000081565b6101e16101dc3660046113bc565b610863565b60405161012499989796959493929190611458565b6101926102043660046114e7565b6109d6565b61021c6102173660046113bc565b610b6e565b60405161012493929190611515565b61023e610239366004611544565b610d0f565b604051908152602001610124565b61011861025a3660046113bc565b60016020525f908152604090205460ff1681565b61019261027c36600461115c565b610d3a565b61029461028f36600461156e565b610d6e565b6040516101249190611589565b6101186102af366004611193565b610dd7565b61023e5f5481565b5f806102c883806115cb565b6040516102d6929190611615565b604051809103902090505f610337826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018290525f90605c01604051602081830303815290604052805190602001209050919050565b9050630b135d3f60e11b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631626ba7e8361037e60208901896115cb565b6040518463ffffffff1660e01b815260040161039c9392919061164c565b602060405180830381865afa1580156103b7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103db919061166e565b6001600160e01b0319918216911614949350505050565b81816103fe8282610dd7565b61041b57604051638baa579f60e01b815260040160405180910390fd5b5f5b63ffffffff811684111561046f5761045d85858363ffffffff1681811061044657610446611689565b9050602002810190610458919061169d565b610e9e565b80610467816116cf565b91505061041d565b5050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104e25760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064015b60405180910390fd5b5f8b8b8b8b85426040516020016104fe969594939291906116f3565b60408051601f1981840301815291815281516020928301205f818152600190935291205490915060ff16156105335750610856565b5f818152600260205260409020600401541580159061056157505f8181526002602052604090206007015442115b1561057f576040516338e5e54b60e21b815260040160405180910390fd5b6040518061012001604052808d6001600160a01b031681526020018c81526020018b81526020018a60018111156105b8576105b8611420565b81526001600160a01b0384166020820152426040820152606001600181526020016040518060400160405280601681526020017556616c69646174696f6e20696e2070726f677265737360501b81525081526020015f544261061a919061176a565b90525f82815260026020818152604092839020845181546001600160a01b0319166001600160a01b03909116178155908401516001820155918301519082019061066490826117fe565b50606082015160038201805460ff19166001838181111561068757610687611420565b021790555060808201518160030160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816004015560c0820151816005015f6101000a81548160ff021916908360048111156106ec576106ec611420565b021790555060e0820151600682019061070590826117fe565b50610100820151816007015590505060035f836001600160a01b03166001600160a01b031681526020019081526020015f2081908060018154018082558091505060019003905f5260205f20015f90919091909150557f37b1671f777b1ea11710dc816b92da0f8b5ea94730552bb5637b0ec536811908818d8d8d8d87604051602001610797969594939291906118b9565b60408051601f19818403018152908290526107b19161192d565b60405180910390a18b6001600160a01b0316817f72b8beaa2b16efc20ff7aea942a122f7b78119724fabbd806acd64d7978954cb8d8d8d875f546040516107fc95949392919061193f565b60405180910390a3807f5c52b920fc5d0ac45838c205ad92650612c5ce5bf8136af02fa69466cc3a1fd960016040516108359190611982565b60405180910390a26040516336fc571360e01b815260040160405180910390fd5b5050505050505050505050565b600260208190525f91825260409091208054600182015492820180546001600160a01b039092169392916108969061177d565b80601f01602080910402602001604051908101604052809291908181526020018280546108c29061177d565b801561090d5780601f106108e45761010080835404028352916020019161090d565b820191905f5260205f20905b8154815290600101906020018083116108f057829003601f168201915b50505050600383015460048401546005850154600686018054959660ff808616976101009096046001600160a01b031696509394939092169261094f9061177d565b80601f016020809104026020016040519081016040528092919081815260200182805461097b9061177d565b80156109c65780601f1061099d576101008083540402835291602001916109c6565b820191905f5260205f20905b8154815290600101906020018083116109a957829003601f168201915b5050505050908060070154905089565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a3d5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016104d9565b5f8281526002602052604090206003810154610a679061010090046001600160a01b031684611013565b7f37b1671f777b1ea11710dc816b92da0f8b5ea94730552bb5637b0ec5368119088383604051602001610ac39291906060808252600490820152631c1bdcdd60e21b608082015260208101929092521515604082015260a00190565b60408051601f1981840301815290829052610add9161192d565b60405180910390a15f838152600260208190526040822080546001600160a01b0319168155600181018390559190610b17908301826110d3565b6003820180546001600160a81b03191690555f6004830181905560058301805460ff19169055610b4b9060068401906110d3565b505f6007919091018190559283525050600160205260409020805460ff19169055565b5f818152600260205260408120600481015460609183918203610ba657505060408051602081019091525f8082529250905081610d08565b8060070154421115610c4f576004816006015f818054610bc59061177d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf19061177d565b8015610c3c5780601f10610c1357610100808354040283529160200191610c3c565b820191905f5260205f20905b815481529060010190602001808311610c1f57829003601f168201915b5050505050915093509350935050610d08565b5f428260070154610c6091906119c2565b600583015460068401805492935060ff9091169183908290610c819061177d565b80601f0160208091040260200160405190810160405280929190818152602001828054610cad9061177d565b8015610cf85780601f10610ccf57610100808354040283529160200191610cf8565b820191905f5260205f20905b815481529060010190602001808311610cdb57829003601f168201915b5050505050915094509450945050505b9193909250565b6003602052815f5260405f208181548110610d28575f80fd5b905f5260205f20015f91509150505481565b80610d44816102bc565b610d6157604051638baa579f60e01b815260040160405180910390fd5b610d6a82610e9e565b5050565b6001600160a01b0381165f90815260036020908152604091829020805483518184028101840190945280845260609392830182828015610dcb57602002820191905f5260205f20905b815481526020019060010190808311610db7575b50505050509050919050565b5f805b63ffffffff8116831115610e92573063216a3e9a858563ffffffff8516818110610e0657610e06611689565b9050602002810190610e18919061169d565b6040518263ffffffff1660e01b8152600401610e349190611a17565b602060405180830381865afa158015610e4f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e739190611a6c565b610e80575f915050610e98565b80610e8a816116cf565b915050610dda565b50600190505b92915050565b5f8080610eab84806115cb565b810190610eb89190611a87565b5f838152600260205260408120600481015494975092955090935090919003610ef4576040516331fb878f60e01b815260040160405180910390fd5b8060070154421115610f665760058101805460ff1916600490811790915560405185917f5c52b920fc5d0ac45838c205ad92650612c5ce5bf8136af02fa69466cc3a1fd991610f4591908690611aef565b60405180910390a26040516338e5e54b60e21b815260040160405180910390fd5b82610f72576003610f75565b60025b60058201805460ff19166001836004811115610f9357610f93611420565b021790555060068101610fa683826117fe565b508215610fc9575f848152600160208190526040909120805460ff191690911790555b600581015460405185917f5c52b920fc5d0ac45838c205ad92650612c5ce5bf8136af02fa69466cc3a1fd9916110049160ff16908690611aef565b60405180910390a25050505050565b6001600160a01b0382165f908152600360205260408120905b81548110156110cd578282828154811061104857611048611689565b905f5260205f200154036110c55781548290611066906001906119c2565b8154811061107657611076611689565b905f5260205f20015482828154811061109157611091611689565b905f5260205f200181905550818054806110ad576110ad611b16565b600190038181905f5260205f20015f905590556110cd565b60010161102c565b50505050565b5080546110df9061177d565b5f825580601f106110ee575050565b601f0160209004905f5260205f209081019061110a919061110d565b50565b5b80821115611121575f815560010161110e565b5090565b6001600160e01b03198116811461110a575f5ffd5b5f6020828403121561114a575f5ffd5b813561115581611125565b9392505050565b5f6020828403121561116c575f5ffd5b813567ffffffffffffffff811115611182575f5ffd5b820160408185031215611155575f5ffd5b5f5f602083850312156111a4575f5ffd5b823567ffffffffffffffff8111156111ba575f5ffd5b8301601f810185136111ca575f5ffd5b803567ffffffffffffffff8111156111e0575f5ffd5b8560208260051b84010111156111f4575f5ffd5b6020919091019590945092505050565b6001600160a01b038116811461110a575f5ffd5b803561122381611204565b919050565b634e487b7160e01b5f52604160045260245ffd5b5f5f67ffffffffffffffff84111561125657611256611228565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff8211171561128557611285611228565b60405283815290508082840185101561129c575f5ffd5b838360208301375f60208583010152509392505050565b5f82601f8301126112c2575f5ffd5b6111558383356020850161123c565b803560028110611223575f5ffd5b5f5f5f5f5f5f5f5f5f5f5f6101608c8e0312156112fa575f5ffd5b6113038c611218565b9a5060208c0135995060408c013567ffffffffffffffff811115611325575f5ffd5b6113318e828f016112b3565b99505061134060608d016112d1565b975060808c0135965060a08c0135955060c08c0135945061136360e08d01611218565b93506113726101008d01611218565b92506101208c013567ffffffffffffffff81111561138e575f5ffd5b61139a8e828f016112b3565b9250506113aa6101408d01611218565b90509295989b509295989b9093969950565b5f602082840312156113cc575f5ffd5b5035919050565b5f5b838110156113ed5781810151838201526020016113d5565b50505f910152565b5f815180845261140c8160208601602086016113d3565b601f01601f19169290920160200192915050565b634e487b7160e01b5f52602160045260245ffd5b6002811061144457611444611420565b9052565b6005811061144457611444611420565b60018060a01b038a16815288602082015261012060408201525f61148061012083018a6113f5565b61148d606084018a611434565b6001600160a01b038816608084015260a083018790526114b060c0840187611448565b82810360e08401526114c281866113f5565b915050826101008301529a9950505050505050505050565b801515811461110a575f5ffd5b5f5f604083850312156114f8575f5ffd5b82359150602083013561150a816114da565b809150509250929050565b61151f8185611448565b606060208201525f61153460608301856113f5565b9050826040830152949350505050565b5f5f60408385031215611555575f5ffd5b823561156081611204565b946020939093013593505050565b5f6020828403121561157e575f5ffd5b813561115581611204565b602080825282518282018190525f918401906040840190835b818110156115c05783518352602093840193909201916001016115a2565b509095945050505050565b5f5f8335601e198436030181126115e0575f5ffd5b83018035915067ffffffffffffffff8211156115fa575f5ffd5b60200191503681900382131561160e575f5ffd5b9250929050565b818382375f9101908152919050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b838152604060208201525f611665604083018486611624565b95945050505050565b5f6020828403121561167e575f5ffd5b815161115581611125565b634e487b7160e01b5f52603260045260245ffd5b5f8235603e198336030181126116b1575f5ffd5b9190910192915050565b634e487b7160e01b5f52601160045260245ffd5b5f63ffffffff821663ffffffff81036116ea576116ea6116bb565b60010192915050565b6bffffffffffffffffffffffff198760601b1681528560148201525f8551611722816034850160208a016113d3565b82016002861061173457611734611420565b60f89590951b6034860152505060609190911b6bffffffffffffffffffffffff1916603583015260498201526069019392505050565b80820180821115610e9857610e986116bb565b600181811c9082168061179157607f821691505b6020821081036117af57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156117f957805f5260205f20601f840160051c810160208510156117da5750805b601f840160051c820191505b8181101561046f575f81556001016117e6565b505050565b815167ffffffffffffffff81111561181857611818611228565b61182c81611826845461177d565b846117b5565b6020601f82116001811461185e575f83156118475750848201515b5f19600385901b1c1916600184901b17845561046f565b5f84815260208120601f198516915b8281101561188d578785015182556020948501946001909201910161186d565b50848210156118aa57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b60e08152600360e08201526270726560e81b61010082015286602082015260018060a01b038616604082015284606082015261012060808201525f6119026101208301866113f5565b905061191160a0830185611434565b6001600160a01b039290921660c0919091015295945050505050565b602081525f61115560208301846113f5565b85815260a060208201525f61195760a08301876113f5565b90506119666040830186611434565b6001600160a01b03939093166060820152608001529392505050565b61198c8183611448565b6040602082018190526016908201527556616c69646174696f6e20696e2070726f677265737360501b6060820152608001919050565b81810381811115610e9857610e986116bb565b5f5f8335601e198436030181126119ea575f5ffd5b830160208101925035905067ffffffffffffffff811115611a09575f5ffd5b80360382131561160e575f5ffd5b602081525f611a2683846119d5565b60406020850152611a3b606085018284611624565b915050611a4b60208501856119d5565b848303601f19016040860152611a62838284611624565b9695505050505050565b5f60208284031215611a7c575f5ffd5b8151611155816114da565b5f5f5f60608486031215611a99575f5ffd5b833592506020840135611aab816114da565b9150604084013567ffffffffffffffff811115611ac6575f5ffd5b8401601f81018613611ad6575f5ffd5b611ae58682356020840161123c565b9150509250925092565b611af98184611448565b604060208201525f611b0e60408301846113f5565b949350505050565b634e487b7160e01b5f52603160045260245ffdfea2646970667358221220ed7324760f0f7f908aec1df3d7938aef1776edb50a3ccdf8bbc607f90cb2c5d464736f6c634300081c0033506c656173652073657420746865206775617264206d616e75616c6c79207468726f756768207468652053616665205549a264697066735822122058aeb2f89c166fd2e628961f1932a10fbc9ba4dc216a3744490c45764eb08dfc64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x0C\x80Tb\xFF\0\xFF\x19\x16b\x01\0\x01\x17\x90U4\x80\x15`\x1FW__\xFD[Pa-+\x80a\0-_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0CW\x80c\xC0@b&\x14a\0EW\x80c\xF8\xCC\xBFG\x14a\0MW[__\xFD[\0[a\0Ca\0tV[`\x0CTa\0`\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xDFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x03\x91\x90a\x0C\x1AV[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01PW__\xFD[PZ\xF1\x15\x80\x15a\x01bW=__>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01RmSTAKE_REGISTRY`\x90\x1B`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xD4W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xF8\x91\x90a\x0CEV[\x90P_a\x02\x03a\x06\xDDV[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rm\x14\xD0Q\x91W\xD5\x12\x14\x91T\xD2\x13\xD3\x11`\x92\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02tW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x98\x91\x90a\x0C\x1AV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt)\xA0\xA3\"\xAF\xA3 \xA6&! \xA1\xA5\xAF\xA4 \xA7\"&\"\xA9`Y\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x10W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x034\x91\x90a\x0CEV[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xA6W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xCA\x91\x90a\x0CgV[\x15a\x04\x18Wa\x03\xDA\x84\x84\x84a\x08\xC3V[\x90Pa\x04\x13`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\"2\xB867\xBC\xB2\xB2\x1072\xBB\x90)\xB0\xB32\x900\xBA\x1D`Y\x1B\x81RP\x82a\t\xCBV[a\x04\xF0V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01RtEXISTING_SAFE_ADDRESS`X\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x8BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xAF\x91\x90a\x0CEV[\x90Pa\x04\xF0`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7FUsing existing Safe at:\0\0\0\0\0\0\0\0\0\x81RP\x82a\t\xCBV[_\x81\x86`@Qa\x04\xFF\x90a\x0C\rV[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x16` \x82\x01R`@\x01`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x05/W=__>=_\xFD[P\x90Pa\x05j`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01u\"2\xB867\xBC\xB2\xB2\x10)\xB0\xB32\xA3\xBA\xB0\xB92\x100\xBA\x1D`Q\x1B\x81RP\x82a\t\xCBV[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xD7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xFB\x91\x90a\x0CgV[\x15a\x06CW\x81a\x06\x0B\x81\x83a\n\x14V[a\x06=`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01pSet guard on Safe`x\x1B\x81RPa\n\xDDV[Pa\x06dV[a\x06d`@Q\x80``\x01`@R\x80`1\x81R` \x01a,\xC5`1\x919a\n\xDDV[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xBEW__\xFD[PZ\xF1\x15\x80\x15a\x06\xD0W=__>=_\xFD[PPPPPPPPPPPV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjSAFE_OWNERS`\xA8\x1B`D\x82\x01R``\x90_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07JW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07q\x91\x90\x81\x01\x90a\x0C\xEDV[`@\x80Q\x80\x82\x01\x90\x91R`\x01\x81R`\x0B`\xFA\x1B` \x90\x91\x01R\x90P_``\x90P_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xACWa\x07\xACa\x0C\x86V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x07\xD5W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82Q\x81\x10\x15a\x08\xBBW\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xC6\xCE\x05\x9D\x84\x83\x81Q\x81\x10a\x08&Wa\x08&a\r~V[` \x02` \x01\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08J\x91\x90a\r\xBDV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08eW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x89\x91\x90a\x0CEV[\x82\x82\x81Q\x81\x10a\x08\x9BWa\x08\x9Ba\r~V[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R`\x01\x01a\x07\xDAV[P\x93\x92PPPV[`@Q_\x90sAg\\\t\x9F24\x1B\xF8K\xFCS\x82\xAFSM\xF5\xC7F\x1A\x90sN\x1D\xCFz\xD4\xE4`\xCF\xD3\x07\x91\xCC\xC4\xF9\xC8\xA4\xF8 \xECg\x90\x83\x90c\xB6>\x80\r`\xE0\x1B\x90a\t\x19\x90\x89\x90\x89\x90\x85\x90\x8A\x90\x82\x90\x81\x90\x81\x90`$\x01a\r\xCFV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qc\x16\x88\xF0\xB9`\xE0\x1B\x81R\x90\x91P_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c\x16\x88\xF0\xB9\x90a\t\x7F\x90\x87\x90\x86\x90\x86\x90`\x04\x01a\x0E\x89V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t\x9BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xBF\x91\x90a\x0CEV[\x98\x97PPPPPPPPV[a\n\x10\x82\x82`@Q`$\x01a\t\xE1\x92\x91\x90a\x0E\xBCV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0B#V[PPV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x80\x84\x01\x91\x90\x91R\x83Q\x80\x84\x03\x90\x91\x01\x81R`D\x90\x92\x01\x90\x92R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xE1\x9A\x9D\xD9`\xE0\x1B\x17\x90R\x90\x83\x16cjv\x12\x02\x84_\x84\x81\x80\x80\x80\x80\x80a\nr\x89a\x0B,V[`@Q\x8Bc\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\x97\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x0E\xE5V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\n\xB3W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xD7\x91\x90a\x0CgV[PPPPV[a\x0B \x81`@Q`$\x01a\n\xF1\x91\x90a\r\xBDV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x0B#V[PV[a\x0B \x81a\x0B\xEEV[``_\x82`\x01`\x01`\xA0\x1B\x03\x16c\xA0\xE6~+`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0BjW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0B\x91\x91\x90\x81\x01\x90a\x0F\x8AV[_\x81Q\x81\x10a\x0B\xA2Wa\x0B\xA2a\r~V[` \x90\x81\x02\x91\x90\x91\x01\x81\x01Q`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x93\x81\x01\x93\x90\x93R_\x90\x83\x01R`\x01`\xF8\x1B``\x83\x01R\x91P`a\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x91\x90PV[_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[a\x1C\x86\x80a\x10?\x839\x01\x90V[_` \x82\x84\x03\x12\x15a\x0C*W__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0B W__\xFD[_` \x82\x84\x03\x12\x15a\x0CUW__\xFD[\x81Qa\x0C`\x81a\x0C1V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0CwW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0C`W__\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C\xC3Wa\x0C\xC3a\x0C\x86V[`@R\x91\x90PV[_[\x83\x81\x10\x15a\x0C\xE5W\x81\x81\x01Q\x83\x82\x01R` \x01a\x0C\xCDV[PP_\x91\x01RV[_` \x82\x84\x03\x12\x15a\x0C\xFDW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x13W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\r#W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r=Wa\r=a\x0C\x86V[a\rP`\x1F\x82\x01`\x1F\x19\x16` \x01a\x0C\x9AV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\rdW__\xFD[a\ru\x82` \x83\x01` \x86\x01a\x0C\xCBV[\x95\x94PPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x81Q\x80\x84Ra\r\xA9\x81` \x86\x01` \x86\x01a\x0C\xCBV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x0C`` \x83\x01\x84a\r\x92V[a\x01\0\x80\x82R\x88Q\x90\x82\x01\x81\x90R_\x90` \x8A\x01\x90a\x01 \x84\x01\x90\x83[\x81\x81\x10\x15a\x0E\x13W\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\r\xECV[PP\x89` \x85\x01Ra\x0E0`@\x85\x01\x8A`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x83\x81\x03``\x85\x01R_\x81R`\x01`\x01`\xA0\x1B\x03\x88\x16`\x80\x85\x01R` \x01\x91Pa\x0EV\x90PV[`\x01`\x01`\xA0\x1B\x03\x85\x16`\xA0\x83\x01R`\xFF\x84\x16`\xC0\x83\x01R`\x01`\x01`\xA0\x1B\x03\x83\x16`\xE0\x83\x01R\x98\x97PPPPPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R``` \x82\x01\x81\x90R_\x90a\x0E\xAC\x90\x83\x01\x85a\r\x92V[\x90P\x82`@\x83\x01R\x94\x93PPPPV[`@\x81R_a\x0E\xCE`@\x83\x01\x85a\r\x92V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`\x01\x80`\xA0\x1B\x03\x8B\x16\x81R\x89` \x82\x01Ra\x01@`@\x82\x01R_a\x0F\ra\x01@\x83\x01\x8Ba\r\x92V[`\x02\x8A\x10a\x0F)WcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x89``\x84\x01R\x88`\x80\x84\x01R\x87`\xA0\x84\x01R\x86`\xC0\x84\x01Ra\x0FV`\xE0\x84\x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x90RV[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x01\0\x84\x01R\x82\x81\x03a\x01 \x84\x01Ra\x0Fy\x81\x85a\r\x92V[\x9D\x9CPPPPPPPPPPPPPV[_` \x82\x84\x03\x12\x15a\x0F\x9AW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xB0W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0F\xC0W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xDAWa\x0F\xDAa\x0C\x86V[\x80`\x05\x1Ba\x0F\xEA` \x82\x01a\x0C\x9AV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x10\x05W__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\x103W\x84Q\x92Pa\x10!\x83a\x0C1V[\x82\x82R` \x94\x85\x01\x94\x90\x91\x01\x90a\x10\x0CV[\x97\x96PPPPPPPV\xFE`\xC0`@R`x_U4\x80\x15a\0\x13W__\xFD[P`@Qa\x1C\x868\x03\x80a\x1C\x86\x839\x81\x01`@\x81\x90Ra\x002\x91a\0\xBFV[`\x01`\x01`\xA0\x1B\x03\x80\x82\x16`\x80R\x82\x16a\0\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FInvalid safe address\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[P`\x01`\x01`\xA0\x1B\x03\x16`\xA0Ra\0\xF0V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xBAW__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\0\xD0W__\xFD[a\0\xD9\x83a\0\xA4V[\x91Pa\0\xE7` \x84\x01a\0\xA4V[\x90P\x92P\x92\x90PV[`\x80Q`\xA0Qa\x1B`a\x01&_9_\x81\x81a\x012\x01R\x81\x81a\x04\x81\x01Ra\t\xE1\x01R_\x81\x81a\x01\xAC\x01Ra\x03K\x01Ra\x1B`_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\xF0W_5`\xE0\x1C\x80c\x93'\x13h\x11a\0\x93W\x80c\x9A\xA9\xFD\xA5\x11a\0cW\x80c\x9A\xA9\xFD\xA5\x14a\x02nW\x80c\x9E\x83\xE3\x06\x14a\x02\x81W\x80c\xA7\x1F\x8D\xA0\x14a\x02\xA1W\x80c\xC5o\xB0\xFD\x14a\x02\xB4W__\xFD[\x80c\x93'\x13h\x14a\x01\xF6W\x80c\x94@te\x14a\x02\tW\x80c\x97\xF56Z\x14a\x02+W\x80c\x99\xD7\xCFK\x14a\x02LW__\xFD[\x80ccq\x0C\x05\x11a\0\xCEW\x80ccq\x0C\x05\x14a\x01\x7FW\x80cu\xF0\xBBR\x14a\x01\x94W\x80cv\x1D\xE1\x9F\x14a\x01\xA7W\x80c{O3s\x14a\x01\xCEW__\xFD[\x80c\x01\xFF\xC9\xA7\x14a\0\xF4W\x80c\x18o\x03T\x14a\x01-W\x80c!j>\x9A\x14a\x01lW[__\xFD[a\x01\x18a\x01\x026`\x04a\x11:V[`\x01`\x01`\xE0\x1B\x03\x19\x16csk\xD4\x1D`\xE1\x1B\x14\x90V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01$V[a\x01\x18a\x01z6`\x04a\x11\\V[a\x02\xBCV[a\x01\x92a\x01\x8D6`\x04a\x11\x93V[a\x03\xF2V[\0[a\x01\x92a\x01\xA26`\x04a\x12\xDFV[a\x04vV[a\x01T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x01\xE1a\x01\xDC6`\x04a\x13\xBCV[a\x08cV[`@Qa\x01$\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x14XV[a\x01\x92a\x02\x046`\x04a\x14\xE7V[a\t\xD6V[a\x02\x1Ca\x02\x176`\x04a\x13\xBCV[a\x0BnV[`@Qa\x01$\x93\x92\x91\x90a\x15\x15V[a\x02>a\x0296`\x04a\x15DV[a\r\x0FV[`@Q\x90\x81R` \x01a\x01$V[a\x01\x18a\x02Z6`\x04a\x13\xBCV[`\x01` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[a\x01\x92a\x02|6`\x04a\x11\\V[a\r:V[a\x02\x94a\x02\x8F6`\x04a\x15nV[a\rnV[`@Qa\x01$\x91\x90a\x15\x89V[a\x01\x18a\x02\xAF6`\x04a\x11\x93V[a\r\xD7V[a\x02>_T\x81V[_\x80a\x02\xC8\x83\x80a\x15\xCBV[`@Qa\x02\xD6\x92\x91\x90a\x16\x15V[`@Q\x80\x91\x03\x90 \x90P_a\x037\x82`@Q\x7F\x19Ethereum Signed Message:\n32\0\0\0\0` \x82\x01R`<\x81\x01\x82\x90R_\x90`\\\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x90Pc\x0B\x13]?`\xE1\x1B`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16c\x16&\xBA~\x83a\x03~` \x89\x01\x89a\x15\xCBV[`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\x9C\x93\x92\x91\x90a\x16LV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xB7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xDB\x91\x90a\x16nV[`\x01`\x01`\xE0\x1B\x03\x19\x91\x82\x16\x91\x16\x14\x94\x93PPPPV[\x81\x81a\x03\xFE\x82\x82a\r\xD7V[a\x04\x1BW`@Qc\x8B\xAAW\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[c\xFF\xFF\xFF\xFF\x81\x16\x84\x11\x15a\x04oWa\x04]\x85\x85\x83c\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x04FWa\x04Fa\x16\x89V[\x90P` \x02\x81\x01\x90a\x04X\x91\x90a\x16\x9DV[a\x0E\x9EV[\x80a\x04g\x81a\x16\xCFV[\x91PPa\x04\x1DV[PPPPPV[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x04\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x15[\x98]]\x1A\x1B\xDC\x9A^\x99Y`\xA2\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_\x8B\x8B\x8B\x8B\x85B`@Q` \x01a\x04\xFE\x96\x95\x94\x93\x92\x91\x90a\x16\xF3V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 _\x81\x81R`\x01\x90\x93R\x91 T\x90\x91P`\xFF\x16\x15a\x053WPa\x08VV[_\x81\x81R`\x02` R`@\x90 `\x04\x01T\x15\x80\x15\x90a\x05aWP_\x81\x81R`\x02` R`@\x90 `\x07\x01TB\x11[\x15a\x05\x7FW`@Qc8\xE5\xE5K`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80a\x01 \x01`@R\x80\x8D`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8C\x81R` \x01\x8B\x81R` \x01\x8A`\x01\x81\x11\x15a\x05\xB8Wa\x05\xB8a\x14 V[\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16` \x82\x01RB`@\x82\x01R``\x01`\x01\x81R` \x01`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01uValidation in progress`P\x1B\x81RP\x81R` \x01_TBa\x06\x1A\x91\x90a\x17jV[\x90R_\x82\x81R`\x02` \x81\x81R`@\x92\x83\x90 \x84Q\x81T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17\x81U\x90\x84\x01Q`\x01\x82\x01U\x91\x83\x01Q\x90\x82\x01\x90a\x06d\x90\x82a\x17\xFEV[P``\x82\x01Q`\x03\x82\x01\x80T`\xFF\x19\x16`\x01\x83\x81\x81\x11\x15a\x06\x87Wa\x06\x87a\x14 V[\x02\x17\x90UP`\x80\x82\x01Q\x81`\x03\x01`\x01a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP`\xA0\x82\x01Q\x81`\x04\x01U`\xC0\x82\x01Q\x81`\x05\x01_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x04\x81\x11\x15a\x06\xECWa\x06\xECa\x14 V[\x02\x17\x90UP`\xE0\x82\x01Q`\x06\x82\x01\x90a\x07\x05\x90\x82a\x17\xFEV[Pa\x01\0\x82\x01Q\x81`\x07\x01U\x90PP`\x03_\x83`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91PU\x7F7\xB1g\x1Fw{\x1E\xA1\x17\x10\xDC\x81k\x92\xDA\x0F\x8B^\xA9G0U+\xB5c{\x0E\xC56\x81\x19\x08\x81\x8D\x8D\x8D\x8D\x87`@Q` \x01a\x07\x97\x96\x95\x94\x93\x92\x91\x90a\x18\xB9V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x07\xB1\x91a\x19-V[`@Q\x80\x91\x03\x90\xA1\x8B`\x01`\x01`\xA0\x1B\x03\x16\x81\x7Fr\xB8\xBE\xAA+\x16\xEF\xC2\x0F\xF7\xAE\xA9B\xA1\"\xF7\xB7\x81\x19rO\xAB\xBD\x80j\xCDd\xD7\x97\x89T\xCB\x8D\x8D\x8D\x87_T`@Qa\x07\xFC\x95\x94\x93\x92\x91\x90a\x19?V[`@Q\x80\x91\x03\x90\xA3\x80\x7F\\R\xB9 \xFC]\n\xC4X8\xC2\x05\xAD\x92e\x06\x12\xC5\xCE[\xF8\x13j\xF0/\xA6\x94f\xCC:\x1F\xD9`\x01`@Qa\x085\x91\x90a\x19\x82V[`@Q\x80\x91\x03\x90\xA2`@Qc6\xFCW\x13`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPPPPPV[`\x02` \x81\x90R_\x91\x82R`@\x90\x91 \x80T`\x01\x82\x01T\x92\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93\x92\x91a\x08\x96\x90a\x17}V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x08\xC2\x90a\x17}V[\x80\x15a\t\rW\x80`\x1F\x10a\x08\xE4Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t\rV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x08\xF0W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPP`\x03\x83\x01T`\x04\x84\x01T`\x05\x85\x01T`\x06\x86\x01\x80T\x95\x96`\xFF\x80\x86\x16\x97a\x01\0\x90\x96\x04`\x01`\x01`\xA0\x1B\x03\x16\x96P\x93\x94\x93\x90\x92\x16\x92a\tO\x90a\x17}V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\t{\x90a\x17}V[\x80\x15a\t\xC6W\x80`\x1F\x10a\t\x9DWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t\xC6V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\t\xA9W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90\x80`\x07\x01T\x90P\x89V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\n=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x15[\x98]]\x1A\x1B\xDC\x9A^\x99Y`\xA2\x1B`D\x82\x01R`d\x01a\x04\xD9V[_\x82\x81R`\x02` R`@\x90 `\x03\x81\x01Ta\ng\x90a\x01\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x84a\x10\x13V[\x7F7\xB1g\x1Fw{\x1E\xA1\x17\x10\xDC\x81k\x92\xDA\x0F\x8B^\xA9G0U+\xB5c{\x0E\xC56\x81\x19\x08\x83\x83`@Q` \x01a\n\xC3\x92\x91\x90``\x80\x82R`\x04\x90\x82\x01Rc\x1C\x1B\xDC\xDD`\xE2\x1B`\x80\x82\x01R` \x81\x01\x92\x90\x92R\x15\x15`@\x82\x01R`\xA0\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\n\xDD\x91a\x19-V[`@Q\x80\x91\x03\x90\xA1_\x83\x81R`\x02` \x81\x90R`@\x82 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x81U`\x01\x81\x01\x83\x90U\x91\x90a\x0B\x17\x90\x83\x01\x82a\x10\xD3V[`\x03\x82\x01\x80T`\x01`\x01`\xA8\x1B\x03\x19\x16\x90U_`\x04\x83\x01\x81\x90U`\x05\x83\x01\x80T`\xFF\x19\x16\x90Ua\x0BK\x90`\x06\x84\x01\x90a\x10\xD3V[P_`\x07\x91\x90\x91\x01\x81\x90U\x92\x83RPP`\x01` R`@\x90 \x80T`\xFF\x19\x16\x90UV[_\x81\x81R`\x02` R`@\x81 `\x04\x81\x01T``\x91\x83\x91\x82\x03a\x0B\xA6WPP`@\x80Q` \x81\x01\x90\x91R_\x80\x82R\x92P\x90P\x81a\r\x08V[\x80`\x07\x01TB\x11\x15a\x0COW`\x04\x81`\x06\x01_\x81\x80Ta\x0B\xC5\x90a\x17}V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0B\xF1\x90a\x17}V[\x80\x15a\x0C<W\x80`\x1F\x10a\x0C\x13Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0C<V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0C\x1FW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x91P\x93P\x93P\x93PPa\r\x08V[_B\x82`\x07\x01Ta\x0C`\x91\x90a\x19\xC2V[`\x05\x83\x01T`\x06\x84\x01\x80T\x92\x93P`\xFF\x90\x91\x16\x91\x83\x90\x82\x90a\x0C\x81\x90a\x17}V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0C\xAD\x90a\x17}V[\x80\x15a\x0C\xF8W\x80`\x1F\x10a\x0C\xCFWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0C\xF8V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0C\xDBW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x91P\x94P\x94P\x94PPP[\x91\x93\x90\x92PV[`\x03` R\x81_R`@_ \x81\x81T\x81\x10a\r(W_\x80\xFD[\x90_R` _ \x01_\x91P\x91PPT\x81V[\x80a\rD\x81a\x02\xBCV[a\raW`@Qc\x8B\xAAW\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\rj\x82a\x0E\x9EV[PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x03` \x90\x81R`@\x91\x82\x90 \x80T\x83Q\x81\x84\x02\x81\x01\x84\x01\x90\x94R\x80\x84R``\x93\x92\x83\x01\x82\x82\x80\x15a\r\xCBW` \x02\x82\x01\x91\x90_R` _ \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\r\xB7W[PPPPP\x90P\x91\x90PV[_\x80[c\xFF\xFF\xFF\xFF\x81\x16\x83\x11\x15a\x0E\x92W0c!j>\x9A\x85\x85c\xFF\xFF\xFF\xFF\x85\x16\x81\x81\x10a\x0E\x06Wa\x0E\x06a\x16\x89V[\x90P` \x02\x81\x01\x90a\x0E\x18\x91\x90a\x16\x9DV[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0E4\x91\x90a\x1A\x17V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0EOW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0Es\x91\x90a\x1AlV[a\x0E\x80W_\x91PPa\x0E\x98V[\x80a\x0E\x8A\x81a\x16\xCFV[\x91PPa\r\xDAV[P`\x01\x90P[\x92\x91PPV[_\x80\x80a\x0E\xAB\x84\x80a\x15\xCBV[\x81\x01\x90a\x0E\xB8\x91\x90a\x1A\x87V[_\x83\x81R`\x02` R`@\x81 `\x04\x81\x01T\x94\x97P\x92\x95P\x90\x93P\x90\x91\x90\x03a\x0E\xF4W`@Qc1\xFB\x87\x8F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x07\x01TB\x11\x15a\x0FfW`\x05\x81\x01\x80T`\xFF\x19\x16`\x04\x90\x81\x17\x90\x91U`@Q\x85\x91\x7F\\R\xB9 \xFC]\n\xC4X8\xC2\x05\xAD\x92e\x06\x12\xC5\xCE[\xF8\x13j\xF0/\xA6\x94f\xCC:\x1F\xD9\x91a\x0FE\x91\x90\x86\x90a\x1A\xEFV[`@Q\x80\x91\x03\x90\xA2`@Qc8\xE5\xE5K`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82a\x0FrW`\x03a\x0FuV[`\x02[`\x05\x82\x01\x80T`\xFF\x19\x16`\x01\x83`\x04\x81\x11\x15a\x0F\x93Wa\x0F\x93a\x14 V[\x02\x17\x90UP`\x06\x81\x01a\x0F\xA6\x83\x82a\x17\xFEV[P\x82\x15a\x0F\xC9W_\x84\x81R`\x01` \x81\x90R`@\x90\x91 \x80T`\xFF\x19\x16\x90\x91\x17\x90U[`\x05\x81\x01T`@Q\x85\x91\x7F\\R\xB9 \xFC]\n\xC4X8\xC2\x05\xAD\x92e\x06\x12\xC5\xCE[\xF8\x13j\xF0/\xA6\x94f\xCC:\x1F\xD9\x91a\x10\x04\x91`\xFF\x16\x90\x86\x90a\x1A\xEFV[`@Q\x80\x91\x03\x90\xA2PPPPPV[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x03` R`@\x81 \x90[\x81T\x81\x10\x15a\x10\xCDW\x82\x82\x82\x81T\x81\x10a\x10HWa\x10Ha\x16\x89V[\x90_R` _ \x01T\x03a\x10\xC5W\x81T\x82\x90a\x10f\x90`\x01\x90a\x19\xC2V[\x81T\x81\x10a\x10vWa\x10va\x16\x89V[\x90_R` _ \x01T\x82\x82\x81T\x81\x10a\x10\x91Wa\x10\x91a\x16\x89V[\x90_R` _ \x01\x81\x90UP\x81\x80T\x80a\x10\xADWa\x10\xADa\x1B\x16V[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90Ua\x10\xCDV[`\x01\x01a\x10,V[PPPPV[P\x80Ta\x10\xDF\x90a\x17}V[_\x82U\x80`\x1F\x10a\x10\xEEWPPV[`\x1F\x01` \x90\x04\x90_R` _ \x90\x81\x01\x90a\x11\n\x91\x90a\x11\rV[PV[[\x80\x82\x11\x15a\x11!W_\x81U`\x01\x01a\x11\x0EV[P\x90V[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x11\nW__\xFD[_` \x82\x84\x03\x12\x15a\x11JW__\xFD[\x815a\x11U\x81a\x11%V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x11lW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x82W__\xFD[\x82\x01`@\x81\x85\x03\x12\x15a\x11UW__\xFD[__` \x83\x85\x03\x12\x15a\x11\xA4W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xBAW__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x11\xCAW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xE0W__\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15a\x11\xF4W__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x11\nW__\xFD[\x805a\x12#\x81a\x12\x04V[\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[__g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x15a\x12VWa\x12Va\x12(V[P`@Q`\x1F\x19`\x1F\x85\x01\x81\x16`?\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x12\x85Wa\x12\x85a\x12(V[`@R\x83\x81R\x90P\x80\x82\x84\x01\x85\x10\x15a\x12\x9CW__\xFD[\x83\x83` \x83\x017_` \x85\x83\x01\x01RP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x12\xC2W__\xFD[a\x11U\x83\x835` \x85\x01a\x12<V[\x805`\x02\x81\x10a\x12#W__\xFD[___________a\x01`\x8C\x8E\x03\x12\x15a\x12\xFAW__\xFD[a\x13\x03\x8Ca\x12\x18V[\x9AP` \x8C\x015\x99P`@\x8C\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13%W__\xFD[a\x131\x8E\x82\x8F\x01a\x12\xB3V[\x99PPa\x13@``\x8D\x01a\x12\xD1V[\x97P`\x80\x8C\x015\x96P`\xA0\x8C\x015\x95P`\xC0\x8C\x015\x94Pa\x13c`\xE0\x8D\x01a\x12\x18V[\x93Pa\x13ra\x01\0\x8D\x01a\x12\x18V[\x92Pa\x01 \x8C\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\x8EW__\xFD[a\x13\x9A\x8E\x82\x8F\x01a\x12\xB3V[\x92PPa\x13\xAAa\x01@\x8D\x01a\x12\x18V[\x90P\x92\x95\x98\x9BP\x92\x95\x98\x9B\x90\x93\x96\x99PV[_` \x82\x84\x03\x12\x15a\x13\xCCW__\xFD[P5\x91\x90PV[_[\x83\x81\x10\x15a\x13\xEDW\x81\x81\x01Q\x83\x82\x01R` \x01a\x13\xD5V[PP_\x91\x01RV[_\x81Q\x80\x84Ra\x14\x0C\x81` \x86\x01` \x86\x01a\x13\xD3V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x81\x10a\x14DWa\x14Da\x14 V[\x90RV[`\x05\x81\x10a\x14DWa\x14Da\x14 V[`\x01\x80`\xA0\x1B\x03\x8A\x16\x81R\x88` \x82\x01Ra\x01 `@\x82\x01R_a\x14\x80a\x01 \x83\x01\x8Aa\x13\xF5V[a\x14\x8D``\x84\x01\x8Aa\x144V[`\x01`\x01`\xA0\x1B\x03\x88\x16`\x80\x84\x01R`\xA0\x83\x01\x87\x90Ra\x14\xB0`\xC0\x84\x01\x87a\x14HV[\x82\x81\x03`\xE0\x84\x01Ra\x14\xC2\x81\x86a\x13\xF5V[\x91PP\x82a\x01\0\x83\x01R\x9A\x99PPPPPPPPPPV[\x80\x15\x15\x81\x14a\x11\nW__\xFD[__`@\x83\x85\x03\x12\x15a\x14\xF8W__\xFD[\x825\x91P` \x83\x015a\x15\n\x81a\x14\xDAV[\x80\x91PP\x92P\x92\x90PV[a\x15\x1F\x81\x85a\x14HV[``` \x82\x01R_a\x154``\x83\x01\x85a\x13\xF5V[\x90P\x82`@\x83\x01R\x94\x93PPPPV[__`@\x83\x85\x03\x12\x15a\x15UW__\xFD[\x825a\x15`\x81a\x12\x04V[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x15~W__\xFD[\x815a\x11U\x81a\x12\x04V[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x15\xC0W\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x15\xA2V[P\x90\x95\x94PPPPPV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x15\xE0W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x15\xFAW__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x16\x0EW__\xFD[\x92P\x92\x90PV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[\x83\x81R`@` \x82\x01R_a\x16e`@\x83\x01\x84\x86a\x16$V[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a\x16~W__\xFD[\x81Qa\x11U\x81a\x11%V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x825`>\x19\x836\x03\x01\x81\x12a\x16\xB1W__\xFD[\x91\x90\x91\x01\x92\x91PPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_c\xFF\xFF\xFF\xFF\x82\x16c\xFF\xFF\xFF\xFF\x81\x03a\x16\xEAWa\x16\xEAa\x16\xBBV[`\x01\x01\x92\x91PPV[k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x87``\x1B\x16\x81R\x85`\x14\x82\x01R_\x85Qa\x17\"\x81`4\x85\x01` \x8A\x01a\x13\xD3V[\x82\x01`\x02\x86\x10a\x174Wa\x174a\x14 V[`\xF8\x95\x90\x95\x1B`4\x86\x01RPP``\x91\x90\x91\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`5\x83\x01R`I\x82\x01R`i\x01\x93\x92PPPV[\x80\x82\x01\x80\x82\x11\x15a\x0E\x98Wa\x0E\x98a\x16\xBBV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x17\x91W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x17\xAFWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x17\xF9W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x17\xDAWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x04oW_\x81U`\x01\x01a\x17\xE6V[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\x18Wa\x18\x18a\x12(V[a\x18,\x81a\x18&\x84Ta\x17}V[\x84a\x17\xB5V[` `\x1F\x82\x11`\x01\x81\x14a\x18^W_\x83\x15a\x18GWP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x04oV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x18\x8DW\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x18mV[P\x84\x82\x10\x15a\x18\xAAW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[`\xE0\x81R`\x03`\xE0\x82\x01Rbpre`\xE8\x1Ba\x01\0\x82\x01R\x86` \x82\x01R`\x01\x80`\xA0\x1B\x03\x86\x16`@\x82\x01R\x84``\x82\x01Ra\x01 `\x80\x82\x01R_a\x19\x02a\x01 \x83\x01\x86a\x13\xF5V[\x90Pa\x19\x11`\xA0\x83\x01\x85a\x144V[`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16`\xC0\x91\x90\x91\x01R\x95\x94PPPPPV[` \x81R_a\x11U` \x83\x01\x84a\x13\xF5V[\x85\x81R`\xA0` \x82\x01R_a\x19W`\xA0\x83\x01\x87a\x13\xF5V[\x90Pa\x19f`@\x83\x01\x86a\x144V[`\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16``\x82\x01R`\x80\x01R\x93\x92PPPV[a\x19\x8C\x81\x83a\x14HV[`@` \x82\x01\x81\x90R`\x16\x90\x82\x01RuValidation in progress`P\x1B``\x82\x01R`\x80\x01\x91\x90PV[\x81\x81\x03\x81\x81\x11\x15a\x0E\x98Wa\x0E\x98a\x16\xBBV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x19\xEAW__\xFD[\x83\x01` \x81\x01\x92P5\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\tW__\xFD[\x806\x03\x82\x13\x15a\x16\x0EW__\xFD[` \x81R_a\x1A&\x83\x84a\x19\xD5V[`@` \x85\x01Ra\x1A;``\x85\x01\x82\x84a\x16$V[\x91PPa\x1AK` \x85\x01\x85a\x19\xD5V[\x84\x83\x03`\x1F\x19\x01`@\x86\x01Ra\x1Ab\x83\x82\x84a\x16$V[\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x1A|W__\xFD[\x81Qa\x11U\x81a\x14\xDAV[___``\x84\x86\x03\x12\x15a\x1A\x99W__\xFD[\x835\x92P` \x84\x015a\x1A\xAB\x81a\x14\xDAV[\x91P`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\xC6W__\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x1A\xD6W__\xFD[a\x1A\xE5\x86\x825` \x84\x01a\x12<V[\x91PP\x92P\x92P\x92V[a\x1A\xF9\x81\x84a\x14HV[`@` \x82\x01R_a\x1B\x0E`@\x83\x01\x84a\x13\xF5V[\x94\x93PPPPV[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xEDs$v\x0F\x0F\x7F\x90\x8A\xEC\x1D\xF3\xD7\x93\x8A\xEF\x17v\xED\xB5\n<\xCD\xF8\xBB\xC6\x07\xF9\x0C\xB2\xC5\xD4dsolcC\0\x08\x1C\x003Please set the guard manually through the Safe UI\xA2dipfsX\"\x12 X\xAE\xB2\xF8\x9C\x16o\xD2\xE6(\x96\x1F\x192\xA1\x0F\xBC\x9B\xA4\xDC!j7DI\x0CEvN\xB0\x8D\xFCdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061003f575f3560e01c80630a9254e414610043578063c040622614610045578063f8ccbf471461004d575b5f5ffd5b005b610043610074565b600c546100609062010000900460ff1681565b604051901515815260200160405180910390f35b60405163c1978d1f60e01b815260206004820152600b60248201526a505249564154455f4b455960a81b60448201525f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa1580156100df573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101039190610c1a565b60405163ce817d4760e01b815260048101829052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ce817d47906024015f604051808303815f87803b158015610150575f5ffd5b505af1158015610162573d5f5f3e3d5ffd5b505060405163350d56bf60e01b815260206004820152600e60248201526d5354414b455f524547495354525960901b60448201525f9250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063350d56bf90606401602060405180830381865afa1580156101d4573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101f89190610c45565b90505f6102036106dd565b60405163c1978d1f60e01b815260206004820152600e60248201526d14d0519157d512149154d213d31160921b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c1978d1f90606401602060405180830381865afa158015610274573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102989190610c1a565b60405163350d56bf60e01b815260206004820152601560248201527429a0a322afa320a6262120a1a5afa420a7222622a960591b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa158015610310573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103349190610c45565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b60448201529091505f90737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156103a6573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103ca9190610c67565b15610418576103da8484846108c3565b9050610413604051806040016040528060158152602001742232b83637bcb2b2103732bb9029b0b3329030ba1d60591b815250826109cb565b6104f0565b60405163350d56bf60e01b81526020600482015260156024820152744558495354494e475f534146455f4144445245535360581b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063350d56bf90606401602060405180830381865afa15801561048b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104af9190610c45565b90506104f06040518060400160405280601781526020017f5573696e67206578697374696e6720536166652061743a000000000000000000815250826109cb565b5f81866040516104ff90610c0d565b6001600160a01b03928316815291166020820152604001604051809103905ff08015801561052f573d5f5f3e3d5ffd5b50905061056a604051806040016040528060168152602001752232b83637bcb2b21029b0b332a3bab0b9321030ba1d60511b815250826109cb565b604051637ed1ec7d60e01b815260206004820152600f60248201526e4445504c4f595f4e45575f5341464560881b6044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637ed1ec7d90606401602060405180830381865afa1580156105d7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105fb9190610c67565b15610643578161060b8183610a14565b61063d60405180604001604052806011815260200170536574206775617264206f6e205361666560781b815250610add565b50610664565b610664604051806060016040528060318152602001612cc560319139610add565b7f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b03166376eadd366040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156106be575f5ffd5b505af11580156106d0573d5f5f3e3d5ffd5b5050505050505050505050565b60405163f877cb1960e01b815260206004820152600b60248201526a534146455f4f574e45525360a81b60448201526060905f90737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f877cb19906064015f60405180830381865afa15801561074a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107719190810190610ced565b6040805180820190915260018152600b60fa1b60209091015290505f606090505f815167ffffffffffffffff8111156107ac576107ac610c86565b6040519080825280602002602001820160405280156107d5578160200160208202803683370190505b5090505f5b82518110156108bb577f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d5f1c6001600160a01b031663c6ce059d84838151811061082657610826610d7e565b60200260200101516040518263ffffffff1660e01b815260040161084a9190610dbd565b602060405180830381865afa158015610865573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108899190610c45565b82828151811061089b5761089b610d7e565b6001600160a01b03909216602092830291909101909101526001016107da565b509392505050565b6040515f907341675c099f32341bf84bfc5382af534df5c7461a90734e1dcf7ad4e460cfd30791ccc4f9c8a4f820ec6790839063b63e800d60e01b90610919908990899085908a90829081908190602401610dcf565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051631688f0b960e01b81529091505f906001600160a01b03841690631688f0b99061097f90879086908690600401610e89565b6020604051808303815f875af115801561099b573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109bf9190610c45565b98975050505050505050565b610a1082826040516024016109e1929190610ebc565b60408051601f198184030181529190526020810180516001600160e01b031663319af33360e01b179052610b23565b5050565b604080516001600160a01b038381166024808401919091528351808403909101815260449092019092526020810180516001600160e01b031663e19a9dd960e01b179052908316636a761202845f84818080808080610a7289610b2c565b6040518b63ffffffff1660e01b8152600401610a979a99989796959493929190610ee5565b6020604051808303815f875af1158015610ab3573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ad79190610c67565b50505050565b610b2081604051602401610af19190610dbd565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052610b23565b50565b610b2081610bee565b60605f826001600160a01b031663a0e67e2b6040518163ffffffff1660e01b81526004015f60405180830381865afa158015610b6a573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610b919190810190610f8a565b5f81518110610ba257610ba2610d7e565b602090810291909101810151604080516001600160a01b038316938101939093525f90830152600160f81b60608301529150606101604051602081830303815290604052915050919050565b5f6a636f6e736f6c652e6c6f6790505f5f835160208501845afa505050565b611c868061103f83390190565b5f60208284031215610c2a575f5ffd5b5051919050565b6001600160a01b0381168114610b20575f5ffd5b5f60208284031215610c55575f5ffd5b8151610c6081610c31565b9392505050565b5f60208284031215610c77575f5ffd5b81518015158114610c60575f5ffd5b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610cc357610cc3610c86565b604052919050565b5f5b83811015610ce5578181015183820152602001610ccd565b50505f910152565b5f60208284031215610cfd575f5ffd5b815167ffffffffffffffff811115610d13575f5ffd5b8201601f81018413610d23575f5ffd5b805167ffffffffffffffff811115610d3d57610d3d610c86565b610d50601f8201601f1916602001610c9a565b818152856020838501011115610d64575f5ffd5b610d75826020830160208601610ccb565b95945050505050565b634e487b7160e01b5f52603260045260245ffd5b5f8151808452610da9816020860160208601610ccb565b601f01601f19169290920160200192915050565b602081525f610c606020830184610d92565b61010080825288519082018190525f9060208a0190610120840190835b81811015610e135783516001600160a01b0316835260209384019390920191600101610dec565b5050896020850152610e30604085018a6001600160a01b03169052565b83810360608501525f81526001600160a01b03881660808501526020019150610e569050565b6001600160a01b03851660a083015260ff841660c08301526001600160a01b03831660e083015298975050505050505050565b6001600160a01b03841681526060602082018190525f90610eac90830185610d92565b9050826040830152949350505050565b604081525f610ece6040830185610d92565b905060018060a01b03831660208301529392505050565b60018060a01b038b16815289602082015261014060408201525f610f0d61014083018b610d92565b60028a10610f2957634e487b7160e01b5f52602160045260245ffd5b8960608401528860808401528760a08401528660c0840152610f5660e08401876001600160a01b03169052565b6001600160a01b038516610100840152828103610120840152610f798185610d92565b9d9c50505050505050505050505050565b5f60208284031215610f9a575f5ffd5b815167ffffffffffffffff811115610fb0575f5ffd5b8201601f81018413610fc0575f5ffd5b805167ffffffffffffffff811115610fda57610fda610c86565b8060051b610fea60208201610c9a565b91825260208184018101929081019087841115611005575f5ffd5b6020850194505b83851015611033578451925061102183610c31565b8282526020948501949091019061100c565b97965050505050505056fe60c060405260785f55348015610013575f5ffd5b50604051611c86380380611c86833981016040819052610032916100bf565b6001600160a01b0380821660805282166100925760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420736166652061646472657373000000000000000000000000604482015260640160405180910390fd5b506001600160a01b031660a0526100f0565b80516001600160a01b03811681146100ba575f5ffd5b919050565b5f5f604083850312156100d0575f5ffd5b6100d9836100a4565b91506100e7602084016100a4565b90509250929050565b60805160a051611b606101265f395f81816101320152818161048101526109e101525f81816101ac015261034b0152611b605ff3fe608060405234801561000f575f5ffd5b50600436106100f0575f3560e01c806393271368116100935780639aa9fda5116100635780639aa9fda51461026e5780639e83e30614610281578063a71f8da0146102a1578063c56fb0fd146102b4575f5ffd5b806393271368146101f6578063944074651461020957806397f5365a1461022b57806399d7cf4b1461024c575f5ffd5b806363710c05116100ce57806363710c051461017f57806375f0bb5214610194578063761de19f146101a75780637b4f3373146101ce575f5ffd5b806301ffc9a7146100f4578063186f03541461012d578063216a3e9a1461016c575b5f5ffd5b61011861010236600461113a565b6001600160e01b03191663736bd41d60e11b1490565b60405190151581526020015b60405180910390f35b6101547f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610124565b61011861017a36600461115c565b6102bc565b61019261018d366004611193565b6103f2565b005b6101926101a23660046112df565b610476565b6101547f000000000000000000000000000000000000000000000000000000000000000081565b6101e16101dc3660046113bc565b610863565b60405161012499989796959493929190611458565b6101926102043660046114e7565b6109d6565b61021c6102173660046113bc565b610b6e565b60405161012493929190611515565b61023e610239366004611544565b610d0f565b604051908152602001610124565b61011861025a3660046113bc565b60016020525f908152604090205460ff1681565b61019261027c36600461115c565b610d3a565b61029461028f36600461156e565b610d6e565b6040516101249190611589565b6101186102af366004611193565b610dd7565b61023e5f5481565b5f806102c883806115cb565b6040516102d6929190611615565b604051809103902090505f610337826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018290525f90605c01604051602081830303815290604052805190602001209050919050565b9050630b135d3f60e11b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631626ba7e8361037e60208901896115cb565b6040518463ffffffff1660e01b815260040161039c9392919061164c565b602060405180830381865afa1580156103b7573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103db919061166e565b6001600160e01b0319918216911614949350505050565b81816103fe8282610dd7565b61041b57604051638baa579f60e01b815260040160405180910390fd5b5f5b63ffffffff811684111561046f5761045d85858363ffffffff1681811061044657610446611689565b9050602002810190610458919061169d565b610e9e565b80610467816116cf565b91505061041d565b5050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104e25760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064015b60405180910390fd5b5f8b8b8b8b85426040516020016104fe969594939291906116f3565b60408051601f1981840301815291815281516020928301205f818152600190935291205490915060ff16156105335750610856565b5f818152600260205260409020600401541580159061056157505f8181526002602052604090206007015442115b1561057f576040516338e5e54b60e21b815260040160405180910390fd5b6040518061012001604052808d6001600160a01b031681526020018c81526020018b81526020018a60018111156105b8576105b8611420565b81526001600160a01b0384166020820152426040820152606001600181526020016040518060400160405280601681526020017556616c69646174696f6e20696e2070726f677265737360501b81525081526020015f544261061a919061176a565b90525f82815260026020818152604092839020845181546001600160a01b0319166001600160a01b03909116178155908401516001820155918301519082019061066490826117fe565b50606082015160038201805460ff19166001838181111561068757610687611420565b021790555060808201518160030160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060a0820151816004015560c0820151816005015f6101000a81548160ff021916908360048111156106ec576106ec611420565b021790555060e0820151600682019061070590826117fe565b50610100820151816007015590505060035f836001600160a01b03166001600160a01b031681526020019081526020015f2081908060018154018082558091505060019003905f5260205f20015f90919091909150557f37b1671f777b1ea11710dc816b92da0f8b5ea94730552bb5637b0ec536811908818d8d8d8d87604051602001610797969594939291906118b9565b60408051601f19818403018152908290526107b19161192d565b60405180910390a18b6001600160a01b0316817f72b8beaa2b16efc20ff7aea942a122f7b78119724fabbd806acd64d7978954cb8d8d8d875f546040516107fc95949392919061193f565b60405180910390a3807f5c52b920fc5d0ac45838c205ad92650612c5ce5bf8136af02fa69466cc3a1fd960016040516108359190611982565b60405180910390a26040516336fc571360e01b815260040160405180910390fd5b5050505050505050505050565b600260208190525f91825260409091208054600182015492820180546001600160a01b039092169392916108969061177d565b80601f01602080910402602001604051908101604052809291908181526020018280546108c29061177d565b801561090d5780601f106108e45761010080835404028352916020019161090d565b820191905f5260205f20905b8154815290600101906020018083116108f057829003601f168201915b50505050600383015460048401546005850154600686018054959660ff808616976101009096046001600160a01b031696509394939092169261094f9061177d565b80601f016020809104026020016040519081016040528092919081815260200182805461097b9061177d565b80156109c65780601f1061099d576101008083540402835291602001916109c6565b820191905f5260205f20905b8154815290600101906020018083116109a957829003601f168201915b5050505050908060070154905089565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a3d5760405162461bcd60e51b815260206004820152600c60248201526b155b985d5d1a1bdc9a5e995960a21b60448201526064016104d9565b5f8281526002602052604090206003810154610a679061010090046001600160a01b031684611013565b7f37b1671f777b1ea11710dc816b92da0f8b5ea94730552bb5637b0ec5368119088383604051602001610ac39291906060808252600490820152631c1bdcdd60e21b608082015260208101929092521515604082015260a00190565b60408051601f1981840301815290829052610add9161192d565b60405180910390a15f838152600260208190526040822080546001600160a01b0319168155600181018390559190610b17908301826110d3565b6003820180546001600160a81b03191690555f6004830181905560058301805460ff19169055610b4b9060068401906110d3565b505f6007919091018190559283525050600160205260409020805460ff19169055565b5f818152600260205260408120600481015460609183918203610ba657505060408051602081019091525f8082529250905081610d08565b8060070154421115610c4f576004816006015f818054610bc59061177d565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf19061177d565b8015610c3c5780601f10610c1357610100808354040283529160200191610c3c565b820191905f5260205f20905b815481529060010190602001808311610c1f57829003601f168201915b5050505050915093509350935050610d08565b5f428260070154610c6091906119c2565b600583015460068401805492935060ff9091169183908290610c819061177d565b80601f0160208091040260200160405190810160405280929190818152602001828054610cad9061177d565b8015610cf85780601f10610ccf57610100808354040283529160200191610cf8565b820191905f5260205f20905b815481529060010190602001808311610cdb57829003601f168201915b5050505050915094509450945050505b9193909250565b6003602052815f5260405f208181548110610d28575f80fd5b905f5260205f20015f91509150505481565b80610d44816102bc565b610d6157604051638baa579f60e01b815260040160405180910390fd5b610d6a82610e9e565b5050565b6001600160a01b0381165f90815260036020908152604091829020805483518184028101840190945280845260609392830182828015610dcb57602002820191905f5260205f20905b815481526020019060010190808311610db7575b50505050509050919050565b5f805b63ffffffff8116831115610e92573063216a3e9a858563ffffffff8516818110610e0657610e06611689565b9050602002810190610e18919061169d565b6040518263ffffffff1660e01b8152600401610e349190611a17565b602060405180830381865afa158015610e4f573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e739190611a6c565b610e80575f915050610e98565b80610e8a816116cf565b915050610dda565b50600190505b92915050565b5f8080610eab84806115cb565b810190610eb89190611a87565b5f838152600260205260408120600481015494975092955090935090919003610ef4576040516331fb878f60e01b815260040160405180910390fd5b8060070154421115610f665760058101805460ff1916600490811790915560405185917f5c52b920fc5d0ac45838c205ad92650612c5ce5bf8136af02fa69466cc3a1fd991610f4591908690611aef565b60405180910390a26040516338e5e54b60e21b815260040160405180910390fd5b82610f72576003610f75565b60025b60058201805460ff19166001836004811115610f9357610f93611420565b021790555060068101610fa683826117fe565b508215610fc9575f848152600160208190526040909120805460ff191690911790555b600581015460405185917f5c52b920fc5d0ac45838c205ad92650612c5ce5bf8136af02fa69466cc3a1fd9916110049160ff16908690611aef565b60405180910390a25050505050565b6001600160a01b0382165f908152600360205260408120905b81548110156110cd578282828154811061104857611048611689565b905f5260205f200154036110c55781548290611066906001906119c2565b8154811061107657611076611689565b905f5260205f20015482828154811061109157611091611689565b905f5260205f200181905550818054806110ad576110ad611b16565b600190038181905f5260205f20015f905590556110cd565b60010161102c565b50505050565b5080546110df9061177d565b5f825580601f106110ee575050565b601f0160209004905f5260205f209081019061110a919061110d565b50565b5b80821115611121575f815560010161110e565b5090565b6001600160e01b03198116811461110a575f5ffd5b5f6020828403121561114a575f5ffd5b813561115581611125565b9392505050565b5f6020828403121561116c575f5ffd5b813567ffffffffffffffff811115611182575f5ffd5b820160408185031215611155575f5ffd5b5f5f602083850312156111a4575f5ffd5b823567ffffffffffffffff8111156111ba575f5ffd5b8301601f810185136111ca575f5ffd5b803567ffffffffffffffff8111156111e0575f5ffd5b8560208260051b84010111156111f4575f5ffd5b6020919091019590945092505050565b6001600160a01b038116811461110a575f5ffd5b803561122381611204565b919050565b634e487b7160e01b5f52604160045260245ffd5b5f5f67ffffffffffffffff84111561125657611256611228565b50604051601f19601f85018116603f0116810181811067ffffffffffffffff8211171561128557611285611228565b60405283815290508082840185101561129c575f5ffd5b838360208301375f60208583010152509392505050565b5f82601f8301126112c2575f5ffd5b6111558383356020850161123c565b803560028110611223575f5ffd5b5f5f5f5f5f5f5f5f5f5f5f6101608c8e0312156112fa575f5ffd5b6113038c611218565b9a5060208c0135995060408c013567ffffffffffffffff811115611325575f5ffd5b6113318e828f016112b3565b99505061134060608d016112d1565b975060808c0135965060a08c0135955060c08c0135945061136360e08d01611218565b93506113726101008d01611218565b92506101208c013567ffffffffffffffff81111561138e575f5ffd5b61139a8e828f016112b3565b9250506113aa6101408d01611218565b90509295989b509295989b9093969950565b5f602082840312156113cc575f5ffd5b5035919050565b5f5b838110156113ed5781810151838201526020016113d5565b50505f910152565b5f815180845261140c8160208601602086016113d3565b601f01601f19169290920160200192915050565b634e487b7160e01b5f52602160045260245ffd5b6002811061144457611444611420565b9052565b6005811061144457611444611420565b60018060a01b038a16815288602082015261012060408201525f61148061012083018a6113f5565b61148d606084018a611434565b6001600160a01b038816608084015260a083018790526114b060c0840187611448565b82810360e08401526114c281866113f5565b915050826101008301529a9950505050505050505050565b801515811461110a575f5ffd5b5f5f604083850312156114f8575f5ffd5b82359150602083013561150a816114da565b809150509250929050565b61151f8185611448565b606060208201525f61153460608301856113f5565b9050826040830152949350505050565b5f5f60408385031215611555575f5ffd5b823561156081611204565b946020939093013593505050565b5f6020828403121561157e575f5ffd5b813561115581611204565b602080825282518282018190525f918401906040840190835b818110156115c05783518352602093840193909201916001016115a2565b509095945050505050565b5f5f8335601e198436030181126115e0575f5ffd5b83018035915067ffffffffffffffff8211156115fa575f5ffd5b60200191503681900382131561160e575f5ffd5b9250929050565b818382375f9101908152919050565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b838152604060208201525f611665604083018486611624565b95945050505050565b5f6020828403121561167e575f5ffd5b815161115581611125565b634e487b7160e01b5f52603260045260245ffd5b5f8235603e198336030181126116b1575f5ffd5b9190910192915050565b634e487b7160e01b5f52601160045260245ffd5b5f63ffffffff821663ffffffff81036116ea576116ea6116bb565b60010192915050565b6bffffffffffffffffffffffff198760601b1681528560148201525f8551611722816034850160208a016113d3565b82016002861061173457611734611420565b60f89590951b6034860152505060609190911b6bffffffffffffffffffffffff1916603583015260498201526069019392505050565b80820180821115610e9857610e986116bb565b600181811c9082168061179157607f821691505b6020821081036117af57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156117f957805f5260205f20601f840160051c810160208510156117da5750805b601f840160051c820191505b8181101561046f575f81556001016117e6565b505050565b815167ffffffffffffffff81111561181857611818611228565b61182c81611826845461177d565b846117b5565b6020601f82116001811461185e575f83156118475750848201515b5f19600385901b1c1916600184901b17845561046f565b5f84815260208120601f198516915b8281101561188d578785015182556020948501946001909201910161186d565b50848210156118aa57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b60e08152600360e08201526270726560e81b61010082015286602082015260018060a01b038616604082015284606082015261012060808201525f6119026101208301866113f5565b905061191160a0830185611434565b6001600160a01b039290921660c0919091015295945050505050565b602081525f61115560208301846113f5565b85815260a060208201525f61195760a08301876113f5565b90506119666040830186611434565b6001600160a01b03939093166060820152608001529392505050565b61198c8183611448565b6040602082018190526016908201527556616c69646174696f6e20696e2070726f677265737360501b6060820152608001919050565b81810381811115610e9857610e986116bb565b5f5f8335601e198436030181126119ea575f5ffd5b830160208101925035905067ffffffffffffffff811115611a09575f5ffd5b80360382131561160e575f5ffd5b602081525f611a2683846119d5565b60406020850152611a3b606085018284611624565b915050611a4b60208501856119d5565b848303601f19016040860152611a62838284611624565b9695505050505050565b5f60208284031215611a7c575f5ffd5b8151611155816114da565b5f5f5f60608486031215611a99575f5ffd5b833592506020840135611aab816114da565b9150604084013567ffffffffffffffff811115611ac6575f5ffd5b8401601f81018613611ad6575f5ffd5b611ae58682356020840161123c565b9150509250925092565b611af98184611448565b604060208201525f611b0e60408301846113f5565b949350505050565b634e487b7160e01b5f52603160045260245ffdfea2646970667358221220ed7324760f0f7f908aec1df3d7938aef1776edb50a3ccdf8bbc607f90cb2c5d464736f6c634300081c0033506c656173652073657420746865206775617264206d616e75616c6c79207468726f756768207468652053616665205549a264697066735822122058aeb2f89c166fd2e628961f1932a10fbc9ba4dc216a3744490c45764eb08dfc64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\n\x92T\xE4\x14a\0CW\x80c\xC0@b&\x14a\0EW\x80c\xF8\xCC\xBFG\x14a\0MW[__\xFD[\0[a\0Ca\0tV[`\x0CTa\0`\x90b\x01\0\0\x90\x04`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01`@Q\x80\x91\x03\x90\xF3[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjPRIVATE_KEY`\xA8\x1B`D\x82\x01R_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\0\xDFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x03\x91\x90a\x0C\x1AV[`@Qc\xCE\x81}G`\xE0\x1B\x81R`\x04\x81\x01\x82\x90R\x90\x91Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xCE\x81}G\x90`$\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x01PW__\xFD[PZ\xF1\x15\x80\x15a\x01bW=__>=_\xFD[PP`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01RmSTAKE_REGISTRY`\x90\x1B`D\x82\x01R_\x92Psq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x91Pc5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xD4W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xF8\x91\x90a\x0CEV[\x90P_a\x02\x03a\x06\xDDV[`@Qc\xC1\x97\x8D\x1F`\xE0\x1B\x81R` `\x04\x82\x01R`\x0E`$\x82\x01Rm\x14\xD0Q\x91W\xD5\x12\x14\x91T\xD2\x13\xD3\x11`\x92\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xC1\x97\x8D\x1F\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02tW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x98\x91\x90a\x0C\x1AV[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt)\xA0\xA3\"\xAF\xA3 \xA6&! \xA1\xA5\xAF\xA4 \xA7\"&\"\xA9`Y\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\x10W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x034\x91\x90a\x0CEV[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01R\x90\x91P_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xA6W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xCA\x91\x90a\x0CgV[\x15a\x04\x18Wa\x03\xDA\x84\x84\x84a\x08\xC3V[\x90Pa\x04\x13`@Q\x80`@\x01`@R\x80`\x15\x81R` \x01t\"2\xB867\xBC\xB2\xB2\x1072\xBB\x90)\xB0\xB32\x900\xBA\x1D`Y\x1B\x81RP\x82a\t\xCBV[a\x04\xF0V[`@Qc5\rV\xBF`\xE0\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01RtEXISTING_SAFE_ADDRESS`X\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c5\rV\xBF\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\x8BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xAF\x91\x90a\x0CEV[\x90Pa\x04\xF0`@Q\x80`@\x01`@R\x80`\x17\x81R` \x01\x7FUsing existing Safe at:\0\0\0\0\0\0\0\0\0\x81RP\x82a\t\xCBV[_\x81\x86`@Qa\x04\xFF\x90a\x0C\rV[`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x81R\x91\x16` \x82\x01R`@\x01`@Q\x80\x91\x03\x90_\xF0\x80\x15\x80\x15a\x05/W=__>=_\xFD[P\x90Pa\x05j`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01u\"2\xB867\xBC\xB2\xB2\x10)\xB0\xB32\xA3\xBA\xB0\xB92\x100\xBA\x1D`Q\x1B\x81RP\x82a\t\xCBV[`@Qc~\xD1\xEC}`\xE0\x1B\x81R` `\x04\x82\x01R`\x0F`$\x82\x01RnDEPLOY_NEW_SAFE`\x88\x1B`D\x82\x01Rsq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c~\xD1\xEC}\x90`d\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xD7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xFB\x91\x90a\x0CgV[\x15a\x06CW\x81a\x06\x0B\x81\x83a\n\x14V[a\x06=`@Q\x80`@\x01`@R\x80`\x11\x81R` \x01pSet guard on Safe`x\x1B\x81RPa\n\xDDV[Pa\x06dV[a\x06d`@Q\x80``\x01`@R\x80`1\x81R` \x01a,\xC5`1\x919a\n\xDDV[\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16cv\xEA\xDD6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x06\xBEW__\xFD[PZ\xF1\x15\x80\x15a\x06\xD0W=__>=_\xFD[PPPPPPPPPPPV[`@Qc\xF8w\xCB\x19`\xE0\x1B\x81R` `\x04\x82\x01R`\x0B`$\x82\x01RjSAFE_OWNERS`\xA8\x1B`D\x82\x01R``\x90_\x90sq\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-\x90c\xF8w\xCB\x19\x90`d\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07JW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07q\x91\x90\x81\x01\x90a\x0C\xEDV[`@\x80Q\x80\x82\x01\x90\x91R`\x01\x81R`\x0B`\xFA\x1B` \x90\x91\x01R\x90P_``\x90P_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\xACWa\x07\xACa\x0C\x86V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x07\xD5W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82Q\x81\x10\x15a\x08\xBBW\x7F\x88\\\xB6\x92@\xA95\xD62\xD7\x9C1q\tp\x9E\xCF\xA9\x1A\x80bo\xF3\x98\x9Dh\xF6\x7F[\x1D\xD1-_\x1C`\x01`\x01`\xA0\x1B\x03\x16c\xC6\xCE\x05\x9D\x84\x83\x81Q\x81\x10a\x08&Wa\x08&a\r~V[` \x02` \x01\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08J\x91\x90a\r\xBDV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08eW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x89\x91\x90a\x0CEV[\x82\x82\x81Q\x81\x10a\x08\x9BWa\x08\x9Ba\r~V[`\x01`\x01`\xA0\x1B\x03\x90\x92\x16` \x92\x83\x02\x91\x90\x91\x01\x90\x91\x01R`\x01\x01a\x07\xDAV[P\x93\x92PPPV[`@Q_\x90sAg\\\t\x9F24\x1B\xF8K\xFCS\x82\xAFSM\xF5\xC7F\x1A\x90sN\x1D\xCFz\xD4\xE4`\xCF\xD3\x07\x91\xCC\xC4\xF9\xC8\xA4\xF8 \xECg\x90\x83\x90c\xB6>\x80\r`\xE0\x1B\x90a\t\x19\x90\x89\x90\x89\x90\x85\x90\x8A\x90\x82\x90\x81\x90\x81\x90`$\x01a\r\xCFV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R` \x82\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16`\x01`\x01`\xE0\x1B\x03\x19\x90\x94\x16\x93\x90\x93\x17\x90\x92R\x90Qc\x16\x88\xF0\xB9`\xE0\x1B\x81R\x90\x91P_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c\x16\x88\xF0\xB9\x90a\t\x7F\x90\x87\x90\x86\x90\x86\x90`\x04\x01a\x0E\x89V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\t\x9BW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xBF\x91\x90a\x0CEV[\x98\x97PPPPPPPPV[a\n\x10\x82\x82`@Q`$\x01a\t\xE1\x92\x91\x90a\x0E\xBCV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c1\x9A\xF33`\xE0\x1B\x17\x90Ra\x0B#V[PPV[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`$\x80\x84\x01\x91\x90\x91R\x83Q\x80\x84\x03\x90\x91\x01\x81R`D\x90\x92\x01\x90\x92R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\xE1\x9A\x9D\xD9`\xE0\x1B\x17\x90R\x90\x83\x16cjv\x12\x02\x84_\x84\x81\x80\x80\x80\x80\x80a\nr\x89a\x0B,V[`@Q\x8Bc\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n\x97\x9A\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x0E\xE5V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\n\xB3W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xD7\x91\x90a\x0CgV[PPPPV[a\x0B \x81`@Q`$\x01a\n\xF1\x91\x90a\r\xBDV[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x90R` \x81\x01\x80Q`\x01`\x01`\xE0\x1B\x03\x16c\x10L\x13\xEB`\xE2\x1B\x17\x90Ra\x0B#V[PV[a\x0B \x81a\x0B\xEEV[``_\x82`\x01`\x01`\xA0\x1B\x03\x16c\xA0\xE6~+`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0BjW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0B\x91\x91\x90\x81\x01\x90a\x0F\x8AV[_\x81Q\x81\x10a\x0B\xA2Wa\x0B\xA2a\r~V[` \x90\x81\x02\x91\x90\x91\x01\x81\x01Q`@\x80Q`\x01`\x01`\xA0\x1B\x03\x83\x16\x93\x81\x01\x93\x90\x93R_\x90\x83\x01R`\x01`\xF8\x1B``\x83\x01R\x91P`a\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x91PP\x91\x90PV[_jconsole.log\x90P__\x83Q` \x85\x01\x84Z\xFAPPPV[a\x1C\x86\x80a\x10?\x839\x01\x90V[_` \x82\x84\x03\x12\x15a\x0C*W__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x0B W__\xFD[_` \x82\x84\x03\x12\x15a\x0CUW__\xFD[\x81Qa\x0C`\x81a\x0C1V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0CwW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x0C`W__\xFD[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C\xC3Wa\x0C\xC3a\x0C\x86V[`@R\x91\x90PV[_[\x83\x81\x10\x15a\x0C\xE5W\x81\x81\x01Q\x83\x82\x01R` \x01a\x0C\xCDV[PP_\x91\x01RV[_` \x82\x84\x03\x12\x15a\x0C\xFDW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x13W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\r#W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r=Wa\r=a\x0C\x86V[a\rP`\x1F\x82\x01`\x1F\x19\x16` \x01a\x0C\x9AV[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a\rdW__\xFD[a\ru\x82` \x83\x01` \x86\x01a\x0C\xCBV[\x95\x94PPPPPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x81Q\x80\x84Ra\r\xA9\x81` \x86\x01` \x86\x01a\x0C\xCBV[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x0C`` \x83\x01\x84a\r\x92V[a\x01\0\x80\x82R\x88Q\x90\x82\x01\x81\x90R_\x90` \x8A\x01\x90a\x01 \x84\x01\x90\x83[\x81\x81\x10\x15a\x0E\x13W\x83Q`\x01`\x01`\xA0\x1B\x03\x16\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\r\xECV[PP\x89` \x85\x01Ra\x0E0`@\x85\x01\x8A`\x01`\x01`\xA0\x1B\x03\x16\x90RV[\x83\x81\x03``\x85\x01R_\x81R`\x01`\x01`\xA0\x1B\x03\x88\x16`\x80\x85\x01R` \x01\x91Pa\x0EV\x90PV[`\x01`\x01`\xA0\x1B\x03\x85\x16`\xA0\x83\x01R`\xFF\x84\x16`\xC0\x83\x01R`\x01`\x01`\xA0\x1B\x03\x83\x16`\xE0\x83\x01R\x98\x97PPPPPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x81R``` \x82\x01\x81\x90R_\x90a\x0E\xAC\x90\x83\x01\x85a\r\x92V[\x90P\x82`@\x83\x01R\x94\x93PPPPV[`@\x81R_a\x0E\xCE`@\x83\x01\x85a\r\x92V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16` \x83\x01R\x93\x92PPPV[`\x01\x80`\xA0\x1B\x03\x8B\x16\x81R\x89` \x82\x01Ra\x01@`@\x82\x01R_a\x0F\ra\x01@\x83\x01\x8Ba\r\x92V[`\x02\x8A\x10a\x0F)WcNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[\x89``\x84\x01R\x88`\x80\x84\x01R\x87`\xA0\x84\x01R\x86`\xC0\x84\x01Ra\x0FV`\xE0\x84\x01\x87`\x01`\x01`\xA0\x1B\x03\x16\x90RV[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x01\0\x84\x01R\x82\x81\x03a\x01 \x84\x01Ra\x0Fy\x81\x85a\r\x92V[\x9D\x9CPPPPPPPPPPPPPV[_` \x82\x84\x03\x12\x15a\x0F\x9AW__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xB0W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x0F\xC0W__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xDAWa\x0F\xDAa\x0C\x86V[\x80`\x05\x1Ba\x0F\xEA` \x82\x01a\x0C\x9AV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x10\x05W__\xFD[` \x85\x01\x94P[\x83\x85\x10\x15a\x103W\x84Q\x92Pa\x10!\x83a\x0C1V[\x82\x82R` \x94\x85\x01\x94\x90\x91\x01\x90a\x10\x0CV[\x97\x96PPPPPPPV\xFE`\xC0`@R`x_U4\x80\x15a\0\x13W__\xFD[P`@Qa\x1C\x868\x03\x80a\x1C\x86\x839\x81\x01`@\x81\x90Ra\x002\x91a\0\xBFV[`\x01`\x01`\xA0\x1B\x03\x80\x82\x16`\x80R\x82\x16a\0\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x14`$\x82\x01R\x7FInvalid safe address\0\0\0\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01`@Q\x80\x91\x03\x90\xFD[P`\x01`\x01`\xA0\x1B\x03\x16`\xA0Ra\0\xF0V[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xBAW__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\0\xD0W__\xFD[a\0\xD9\x83a\0\xA4V[\x91Pa\0\xE7` \x84\x01a\0\xA4V[\x90P\x92P\x92\x90PV[`\x80Q`\xA0Qa\x1B`a\x01&_9_\x81\x81a\x012\x01R\x81\x81a\x04\x81\x01Ra\t\xE1\x01R_\x81\x81a\x01\xAC\x01Ra\x03K\x01Ra\x1B`_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\xF0W_5`\xE0\x1C\x80c\x93'\x13h\x11a\0\x93W\x80c\x9A\xA9\xFD\xA5\x11a\0cW\x80c\x9A\xA9\xFD\xA5\x14a\x02nW\x80c\x9E\x83\xE3\x06\x14a\x02\x81W\x80c\xA7\x1F\x8D\xA0\x14a\x02\xA1W\x80c\xC5o\xB0\xFD\x14a\x02\xB4W__\xFD[\x80c\x93'\x13h\x14a\x01\xF6W\x80c\x94@te\x14a\x02\tW\x80c\x97\xF56Z\x14a\x02+W\x80c\x99\xD7\xCFK\x14a\x02LW__\xFD[\x80ccq\x0C\x05\x11a\0\xCEW\x80ccq\x0C\x05\x14a\x01\x7FW\x80cu\xF0\xBBR\x14a\x01\x94W\x80cv\x1D\xE1\x9F\x14a\x01\xA7W\x80c{O3s\x14a\x01\xCEW__\xFD[\x80c\x01\xFF\xC9\xA7\x14a\0\xF4W\x80c\x18o\x03T\x14a\x01-W\x80c!j>\x9A\x14a\x01lW[__\xFD[a\x01\x18a\x01\x026`\x04a\x11:V[`\x01`\x01`\xE0\x1B\x03\x19\x16csk\xD4\x1D`\xE1\x1B\x14\x90V[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01$V[a\x01\x18a\x01z6`\x04a\x11\\V[a\x02\xBCV[a\x01\x92a\x01\x8D6`\x04a\x11\x93V[a\x03\xF2V[\0[a\x01\x92a\x01\xA26`\x04a\x12\xDFV[a\x04vV[a\x01T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x01\xE1a\x01\xDC6`\x04a\x13\xBCV[a\x08cV[`@Qa\x01$\x99\x98\x97\x96\x95\x94\x93\x92\x91\x90a\x14XV[a\x01\x92a\x02\x046`\x04a\x14\xE7V[a\t\xD6V[a\x02\x1Ca\x02\x176`\x04a\x13\xBCV[a\x0BnV[`@Qa\x01$\x93\x92\x91\x90a\x15\x15V[a\x02>a\x0296`\x04a\x15DV[a\r\x0FV[`@Q\x90\x81R` \x01a\x01$V[a\x01\x18a\x02Z6`\x04a\x13\xBCV[`\x01` R_\x90\x81R`@\x90 T`\xFF\x16\x81V[a\x01\x92a\x02|6`\x04a\x11\\V[a\r:V[a\x02\x94a\x02\x8F6`\x04a\x15nV[a\rnV[`@Qa\x01$\x91\x90a\x15\x89V[a\x01\x18a\x02\xAF6`\x04a\x11\x93V[a\r\xD7V[a\x02>_T\x81V[_\x80a\x02\xC8\x83\x80a\x15\xCBV[`@Qa\x02\xD6\x92\x91\x90a\x16\x15V[`@Q\x80\x91\x03\x90 \x90P_a\x037\x82`@Q\x7F\x19Ethereum Signed Message:\n32\0\0\0\0` \x82\x01R`<\x81\x01\x82\x90R_\x90`\\\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90P\x91\x90PV[\x90Pc\x0B\x13]?`\xE1\x1B`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16c\x16&\xBA~\x83a\x03~` \x89\x01\x89a\x15\xCBV[`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\x9C\x93\x92\x91\x90a\x16LV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xB7W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xDB\x91\x90a\x16nV[`\x01`\x01`\xE0\x1B\x03\x19\x91\x82\x16\x91\x16\x14\x94\x93PPPPV[\x81\x81a\x03\xFE\x82\x82a\r\xD7V[a\x04\x1BW`@Qc\x8B\xAAW\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[c\xFF\xFF\xFF\xFF\x81\x16\x84\x11\x15a\x04oWa\x04]\x85\x85\x83c\xFF\xFF\xFF\xFF\x16\x81\x81\x10a\x04FWa\x04Fa\x16\x89V[\x90P` \x02\x81\x01\x90a\x04X\x91\x90a\x16\x9DV[a\x0E\x9EV[\x80a\x04g\x81a\x16\xCFV[\x91PPa\x04\x1DV[PPPPPV[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\x04\xE2W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x15[\x98]]\x1A\x1B\xDC\x9A^\x99Y`\xA2\x1B`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_\x8B\x8B\x8B\x8B\x85B`@Q` \x01a\x04\xFE\x96\x95\x94\x93\x92\x91\x90a\x16\xF3V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 _\x81\x81R`\x01\x90\x93R\x91 T\x90\x91P`\xFF\x16\x15a\x053WPa\x08VV[_\x81\x81R`\x02` R`@\x90 `\x04\x01T\x15\x80\x15\x90a\x05aWP_\x81\x81R`\x02` R`@\x90 `\x07\x01TB\x11[\x15a\x05\x7FW`@Qc8\xE5\xE5K`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@Q\x80a\x01 \x01`@R\x80\x8D`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8C\x81R` \x01\x8B\x81R` \x01\x8A`\x01\x81\x11\x15a\x05\xB8Wa\x05\xB8a\x14 V[\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16` \x82\x01RB`@\x82\x01R``\x01`\x01\x81R` \x01`@Q\x80`@\x01`@R\x80`\x16\x81R` \x01uValidation in progress`P\x1B\x81RP\x81R` \x01_TBa\x06\x1A\x91\x90a\x17jV[\x90R_\x82\x81R`\x02` \x81\x81R`@\x92\x83\x90 \x84Q\x81T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17\x81U\x90\x84\x01Q`\x01\x82\x01U\x91\x83\x01Q\x90\x82\x01\x90a\x06d\x90\x82a\x17\xFEV[P``\x82\x01Q`\x03\x82\x01\x80T`\xFF\x19\x16`\x01\x83\x81\x81\x11\x15a\x06\x87Wa\x06\x87a\x14 V[\x02\x17\x90UP`\x80\x82\x01Q\x81`\x03\x01`\x01a\x01\0\n\x81T\x81`\x01`\x01`\xA0\x1B\x03\x02\x19\x16\x90\x83`\x01`\x01`\xA0\x1B\x03\x16\x02\x17\x90UP`\xA0\x82\x01Q\x81`\x04\x01U`\xC0\x82\x01Q\x81`\x05\x01_a\x01\0\n\x81T\x81`\xFF\x02\x19\x16\x90\x83`\x04\x81\x11\x15a\x06\xECWa\x06\xECa\x14 V[\x02\x17\x90UP`\xE0\x82\x01Q`\x06\x82\x01\x90a\x07\x05\x90\x82a\x17\xFEV[Pa\x01\0\x82\x01Q\x81`\x07\x01U\x90PP`\x03_\x83`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x90\x81R` \x01_ \x81\x90\x80`\x01\x81T\x01\x80\x82U\x80\x91PP`\x01\x90\x03\x90_R` _ \x01_\x90\x91\x90\x91\x90\x91PU\x7F7\xB1g\x1Fw{\x1E\xA1\x17\x10\xDC\x81k\x92\xDA\x0F\x8B^\xA9G0U+\xB5c{\x0E\xC56\x81\x19\x08\x81\x8D\x8D\x8D\x8D\x87`@Q` \x01a\x07\x97\x96\x95\x94\x93\x92\x91\x90a\x18\xB9V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\x07\xB1\x91a\x19-V[`@Q\x80\x91\x03\x90\xA1\x8B`\x01`\x01`\xA0\x1B\x03\x16\x81\x7Fr\xB8\xBE\xAA+\x16\xEF\xC2\x0F\xF7\xAE\xA9B\xA1\"\xF7\xB7\x81\x19rO\xAB\xBD\x80j\xCDd\xD7\x97\x89T\xCB\x8D\x8D\x8D\x87_T`@Qa\x07\xFC\x95\x94\x93\x92\x91\x90a\x19?V[`@Q\x80\x91\x03\x90\xA3\x80\x7F\\R\xB9 \xFC]\n\xC4X8\xC2\x05\xAD\x92e\x06\x12\xC5\xCE[\xF8\x13j\xF0/\xA6\x94f\xCC:\x1F\xD9`\x01`@Qa\x085\x91\x90a\x19\x82V[`@Q\x80\x91\x03\x90\xA2`@Qc6\xFCW\x13`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[PPPPPPPPPPPV[`\x02` \x81\x90R_\x91\x82R`@\x90\x91 \x80T`\x01\x82\x01T\x92\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93\x92\x91a\x08\x96\x90a\x17}V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x08\xC2\x90a\x17}V[\x80\x15a\t\rW\x80`\x1F\x10a\x08\xE4Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t\rV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x08\xF0W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPP`\x03\x83\x01T`\x04\x84\x01T`\x05\x85\x01T`\x06\x86\x01\x80T\x95\x96`\xFF\x80\x86\x16\x97a\x01\0\x90\x96\x04`\x01`\x01`\xA0\x1B\x03\x16\x96P\x93\x94\x93\x90\x92\x16\x92a\tO\x90a\x17}V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\t{\x90a\x17}V[\x80\x15a\t\xC6W\x80`\x1F\x10a\t\x9DWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t\xC6V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\t\xA9W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90\x80`\x07\x01T\x90P\x89V[3`\x01`\x01`\xA0\x1B\x03\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x14a\n=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x0C`$\x82\x01Rk\x15[\x98]]\x1A\x1B\xDC\x9A^\x99Y`\xA2\x1B`D\x82\x01R`d\x01a\x04\xD9V[_\x82\x81R`\x02` R`@\x90 `\x03\x81\x01Ta\ng\x90a\x01\0\x90\x04`\x01`\x01`\xA0\x1B\x03\x16\x84a\x10\x13V[\x7F7\xB1g\x1Fw{\x1E\xA1\x17\x10\xDC\x81k\x92\xDA\x0F\x8B^\xA9G0U+\xB5c{\x0E\xC56\x81\x19\x08\x83\x83`@Q` \x01a\n\xC3\x92\x91\x90``\x80\x82R`\x04\x90\x82\x01Rc\x1C\x1B\xDC\xDD`\xE2\x1B`\x80\x82\x01R` \x81\x01\x92\x90\x92R\x15\x15`@\x82\x01R`\xA0\x01\x90V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x90\x82\x90Ra\n\xDD\x91a\x19-V[`@Q\x80\x91\x03\x90\xA1_\x83\x81R`\x02` \x81\x90R`@\x82 \x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x81U`\x01\x81\x01\x83\x90U\x91\x90a\x0B\x17\x90\x83\x01\x82a\x10\xD3V[`\x03\x82\x01\x80T`\x01`\x01`\xA8\x1B\x03\x19\x16\x90U_`\x04\x83\x01\x81\x90U`\x05\x83\x01\x80T`\xFF\x19\x16\x90Ua\x0BK\x90`\x06\x84\x01\x90a\x10\xD3V[P_`\x07\x91\x90\x91\x01\x81\x90U\x92\x83RPP`\x01` R`@\x90 \x80T`\xFF\x19\x16\x90UV[_\x81\x81R`\x02` R`@\x81 `\x04\x81\x01T``\x91\x83\x91\x82\x03a\x0B\xA6WPP`@\x80Q` \x81\x01\x90\x91R_\x80\x82R\x92P\x90P\x81a\r\x08V[\x80`\x07\x01TB\x11\x15a\x0COW`\x04\x81`\x06\x01_\x81\x80Ta\x0B\xC5\x90a\x17}V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0B\xF1\x90a\x17}V[\x80\x15a\x0C<W\x80`\x1F\x10a\x0C\x13Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0C<V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0C\x1FW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x91P\x93P\x93P\x93PPa\r\x08V[_B\x82`\x07\x01Ta\x0C`\x91\x90a\x19\xC2V[`\x05\x83\x01T`\x06\x84\x01\x80T\x92\x93P`\xFF\x90\x91\x16\x91\x83\x90\x82\x90a\x0C\x81\x90a\x17}V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x0C\xAD\x90a\x17}V[\x80\x15a\x0C\xF8W\x80`\x1F\x10a\x0C\xCFWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x0C\xF8V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x0C\xDBW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x91P\x94P\x94P\x94PPP[\x91\x93\x90\x92PV[`\x03` R\x81_R`@_ \x81\x81T\x81\x10a\r(W_\x80\xFD[\x90_R` _ \x01_\x91P\x91PPT\x81V[\x80a\rD\x81a\x02\xBCV[a\raW`@Qc\x8B\xAAW\x9F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[a\rj\x82a\x0E\x9EV[PPV[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x03` \x90\x81R`@\x91\x82\x90 \x80T\x83Q\x81\x84\x02\x81\x01\x84\x01\x90\x94R\x80\x84R``\x93\x92\x83\x01\x82\x82\x80\x15a\r\xCBW` \x02\x82\x01\x91\x90_R` _ \x90[\x81T\x81R` \x01\x90`\x01\x01\x90\x80\x83\x11a\r\xB7W[PPPPP\x90P\x91\x90PV[_\x80[c\xFF\xFF\xFF\xFF\x81\x16\x83\x11\x15a\x0E\x92W0c!j>\x9A\x85\x85c\xFF\xFF\xFF\xFF\x85\x16\x81\x81\x10a\x0E\x06Wa\x0E\x06a\x16\x89V[\x90P` \x02\x81\x01\x90a\x0E\x18\x91\x90a\x16\x9DV[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0E4\x91\x90a\x1A\x17V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0EOW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0Es\x91\x90a\x1AlV[a\x0E\x80W_\x91PPa\x0E\x98V[\x80a\x0E\x8A\x81a\x16\xCFV[\x91PPa\r\xDAV[P`\x01\x90P[\x92\x91PPV[_\x80\x80a\x0E\xAB\x84\x80a\x15\xCBV[\x81\x01\x90a\x0E\xB8\x91\x90a\x1A\x87V[_\x83\x81R`\x02` R`@\x81 `\x04\x81\x01T\x94\x97P\x92\x95P\x90\x93P\x90\x91\x90\x03a\x0E\xF4W`@Qc1\xFB\x87\x8F`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x80`\x07\x01TB\x11\x15a\x0FfW`\x05\x81\x01\x80T`\xFF\x19\x16`\x04\x90\x81\x17\x90\x91U`@Q\x85\x91\x7F\\R\xB9 \xFC]\n\xC4X8\xC2\x05\xAD\x92e\x06\x12\xC5\xCE[\xF8\x13j\xF0/\xA6\x94f\xCC:\x1F\xD9\x91a\x0FE\x91\x90\x86\x90a\x1A\xEFV[`@Q\x80\x91\x03\x90\xA2`@Qc8\xE5\xE5K`\xE2\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x82a\x0FrW`\x03a\x0FuV[`\x02[`\x05\x82\x01\x80T`\xFF\x19\x16`\x01\x83`\x04\x81\x11\x15a\x0F\x93Wa\x0F\x93a\x14 V[\x02\x17\x90UP`\x06\x81\x01a\x0F\xA6\x83\x82a\x17\xFEV[P\x82\x15a\x0F\xC9W_\x84\x81R`\x01` \x81\x90R`@\x90\x91 \x80T`\xFF\x19\x16\x90\x91\x17\x90U[`\x05\x81\x01T`@Q\x85\x91\x7F\\R\xB9 \xFC]\n\xC4X8\xC2\x05\xAD\x92e\x06\x12\xC5\xCE[\xF8\x13j\xF0/\xA6\x94f\xCC:\x1F\xD9\x91a\x10\x04\x91`\xFF\x16\x90\x86\x90a\x1A\xEFV[`@Q\x80\x91\x03\x90\xA2PPPPPV[`\x01`\x01`\xA0\x1B\x03\x82\x16_\x90\x81R`\x03` R`@\x81 \x90[\x81T\x81\x10\x15a\x10\xCDW\x82\x82\x82\x81T\x81\x10a\x10HWa\x10Ha\x16\x89V[\x90_R` _ \x01T\x03a\x10\xC5W\x81T\x82\x90a\x10f\x90`\x01\x90a\x19\xC2V[\x81T\x81\x10a\x10vWa\x10va\x16\x89V[\x90_R` _ \x01T\x82\x82\x81T\x81\x10a\x10\x91Wa\x10\x91a\x16\x89V[\x90_R` _ \x01\x81\x90UP\x81\x80T\x80a\x10\xADWa\x10\xADa\x1B\x16V[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90Ua\x10\xCDV[`\x01\x01a\x10,V[PPPPV[P\x80Ta\x10\xDF\x90a\x17}V[_\x82U\x80`\x1F\x10a\x10\xEEWPPV[`\x1F\x01` \x90\x04\x90_R` _ \x90\x81\x01\x90a\x11\n\x91\x90a\x11\rV[PV[[\x80\x82\x11\x15a\x11!W_\x81U`\x01\x01a\x11\x0EV[P\x90V[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x11\nW__\xFD[_` \x82\x84\x03\x12\x15a\x11JW__\xFD[\x815a\x11U\x81a\x11%V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x11lW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\x82W__\xFD[\x82\x01`@\x81\x85\x03\x12\x15a\x11UW__\xFD[__` \x83\x85\x03\x12\x15a\x11\xA4W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xBAW__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x11\xCAW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11\xE0W__\xFD[\x85` \x82`\x05\x1B\x84\x01\x01\x11\x15a\x11\xF4W__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x11\nW__\xFD[\x805a\x12#\x81a\x12\x04V[\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[__g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11\x15a\x12VWa\x12Va\x12(V[P`@Q`\x1F\x19`\x1F\x85\x01\x81\x16`?\x01\x16\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x12\x85Wa\x12\x85a\x12(V[`@R\x83\x81R\x90P\x80\x82\x84\x01\x85\x10\x15a\x12\x9CW__\xFD[\x83\x83` \x83\x017_` \x85\x83\x01\x01RP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x12\xC2W__\xFD[a\x11U\x83\x835` \x85\x01a\x12<V[\x805`\x02\x81\x10a\x12#W__\xFD[___________a\x01`\x8C\x8E\x03\x12\x15a\x12\xFAW__\xFD[a\x13\x03\x8Ca\x12\x18V[\x9AP` \x8C\x015\x99P`@\x8C\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13%W__\xFD[a\x131\x8E\x82\x8F\x01a\x12\xB3V[\x99PPa\x13@``\x8D\x01a\x12\xD1V[\x97P`\x80\x8C\x015\x96P`\xA0\x8C\x015\x95P`\xC0\x8C\x015\x94Pa\x13c`\xE0\x8D\x01a\x12\x18V[\x93Pa\x13ra\x01\0\x8D\x01a\x12\x18V[\x92Pa\x01 \x8C\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\x8EW__\xFD[a\x13\x9A\x8E\x82\x8F\x01a\x12\xB3V[\x92PPa\x13\xAAa\x01@\x8D\x01a\x12\x18V[\x90P\x92\x95\x98\x9BP\x92\x95\x98\x9B\x90\x93\x96\x99PV[_` \x82\x84\x03\x12\x15a\x13\xCCW__\xFD[P5\x91\x90PV[_[\x83\x81\x10\x15a\x13\xEDW\x81\x81\x01Q\x83\x82\x01R` \x01a\x13\xD5V[PP_\x91\x01RV[_\x81Q\x80\x84Ra\x14\x0C\x81` \x86\x01` \x86\x01a\x13\xD3V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[`\x02\x81\x10a\x14DWa\x14Da\x14 V[\x90RV[`\x05\x81\x10a\x14DWa\x14Da\x14 V[`\x01\x80`\xA0\x1B\x03\x8A\x16\x81R\x88` \x82\x01Ra\x01 `@\x82\x01R_a\x14\x80a\x01 \x83\x01\x8Aa\x13\xF5V[a\x14\x8D``\x84\x01\x8Aa\x144V[`\x01`\x01`\xA0\x1B\x03\x88\x16`\x80\x84\x01R`\xA0\x83\x01\x87\x90Ra\x14\xB0`\xC0\x84\x01\x87a\x14HV[\x82\x81\x03`\xE0\x84\x01Ra\x14\xC2\x81\x86a\x13\xF5V[\x91PP\x82a\x01\0\x83\x01R\x9A\x99PPPPPPPPPPV[\x80\x15\x15\x81\x14a\x11\nW__\xFD[__`@\x83\x85\x03\x12\x15a\x14\xF8W__\xFD[\x825\x91P` \x83\x015a\x15\n\x81a\x14\xDAV[\x80\x91PP\x92P\x92\x90PV[a\x15\x1F\x81\x85a\x14HV[``` \x82\x01R_a\x154``\x83\x01\x85a\x13\xF5V[\x90P\x82`@\x83\x01R\x94\x93PPPPV[__`@\x83\x85\x03\x12\x15a\x15UW__\xFD[\x825a\x15`\x81a\x12\x04V[\x94` \x93\x90\x93\x015\x93PPPV[_` \x82\x84\x03\x12\x15a\x15~W__\xFD[\x815a\x11U\x81a\x12\x04V[` \x80\x82R\x82Q\x82\x82\x01\x81\x90R_\x91\x84\x01\x90`@\x84\x01\x90\x83[\x81\x81\x10\x15a\x15\xC0W\x83Q\x83R` \x93\x84\x01\x93\x90\x92\x01\x91`\x01\x01a\x15\xA2V[P\x90\x95\x94PPPPPV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x15\xE0W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x15\xFAW__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x16\x0EW__\xFD[\x92P\x92\x90PV[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[\x81\x83R\x81\x81` \x85\x017P_\x82\x82\x01` \x90\x81\x01\x91\x90\x91R`\x1F\x90\x91\x01`\x1F\x19\x16\x90\x91\x01\x01\x90V[\x83\x81R`@` \x82\x01R_a\x16e`@\x83\x01\x84\x86a\x16$V[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a\x16~W__\xFD[\x81Qa\x11U\x81a\x11%V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x825`>\x19\x836\x03\x01\x81\x12a\x16\xB1W__\xFD[\x91\x90\x91\x01\x92\x91PPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_c\xFF\xFF\xFF\xFF\x82\x16c\xFF\xFF\xFF\xFF\x81\x03a\x16\xEAWa\x16\xEAa\x16\xBBV[`\x01\x01\x92\x91PPV[k\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x87``\x1B\x16\x81R\x85`\x14\x82\x01R_\x85Qa\x17\"\x81`4\x85\x01` \x8A\x01a\x13\xD3V[\x82\x01`\x02\x86\x10a\x174Wa\x174a\x14 V[`\xF8\x95\x90\x95\x1B`4\x86\x01RPP``\x91\x90\x91\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16`5\x83\x01R`I\x82\x01R`i\x01\x93\x92PPPV[\x80\x82\x01\x80\x82\x11\x15a\x0E\x98Wa\x0E\x98a\x16\xBBV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x17\x91W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x17\xAFWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x17\xF9W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x17\xDAWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x04oW_\x81U`\x01\x01a\x17\xE6V[PPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\x18Wa\x18\x18a\x12(V[a\x18,\x81a\x18&\x84Ta\x17}V[\x84a\x17\xB5V[` `\x1F\x82\x11`\x01\x81\x14a\x18^W_\x83\x15a\x18GWP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x04oV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x18\x8DW\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x18mV[P\x84\x82\x10\x15a\x18\xAAW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[`\xE0\x81R`\x03`\xE0\x82\x01Rbpre`\xE8\x1Ba\x01\0\x82\x01R\x86` \x82\x01R`\x01\x80`\xA0\x1B\x03\x86\x16`@\x82\x01R\x84``\x82\x01Ra\x01 `\x80\x82\x01R_a\x19\x02a\x01 \x83\x01\x86a\x13\xF5V[\x90Pa\x19\x11`\xA0\x83\x01\x85a\x144V[`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16`\xC0\x91\x90\x91\x01R\x95\x94PPPPPV[` \x81R_a\x11U` \x83\x01\x84a\x13\xF5V[\x85\x81R`\xA0` \x82\x01R_a\x19W`\xA0\x83\x01\x87a\x13\xF5V[\x90Pa\x19f`@\x83\x01\x86a\x144V[`\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16``\x82\x01R`\x80\x01R\x93\x92PPPV[a\x19\x8C\x81\x83a\x14HV[`@` \x82\x01\x81\x90R`\x16\x90\x82\x01RuValidation in progress`P\x1B``\x82\x01R`\x80\x01\x91\x90PV[\x81\x81\x03\x81\x81\x11\x15a\x0E\x98Wa\x0E\x98a\x16\xBBV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x19\xEAW__\xFD[\x83\x01` \x81\x01\x92P5\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\tW__\xFD[\x806\x03\x82\x13\x15a\x16\x0EW__\xFD[` \x81R_a\x1A&\x83\x84a\x19\xD5V[`@` \x85\x01Ra\x1A;``\x85\x01\x82\x84a\x16$V[\x91PPa\x1AK` \x85\x01\x85a\x19\xD5V[\x84\x83\x03`\x1F\x19\x01`@\x86\x01Ra\x1Ab\x83\x82\x84a\x16$V[\x96\x95PPPPPPV[_` \x82\x84\x03\x12\x15a\x1A|W__\xFD[\x81Qa\x11U\x81a\x14\xDAV[___``\x84\x86\x03\x12\x15a\x1A\x99W__\xFD[\x835\x92P` \x84\x015a\x1A\xAB\x81a\x14\xDAV[\x91P`@\x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\xC6W__\xFD[\x84\x01`\x1F\x81\x01\x86\x13a\x1A\xD6W__\xFD[a\x1A\xE5\x86\x825` \x84\x01a\x12<V[\x91PP\x92P\x92P\x92V[a\x1A\xF9\x81\x84a\x14HV[`@` \x82\x01R_a\x1B\x0E`@\x83\x01\x84a\x13\xF5V[\x94\x93PPPPV[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 \xEDs$v\x0F\x0F\x7F\x90\x8A\xEC\x1D\xF3\xD7\x93\x8A\xEF\x17v\xED\xB5\n<\xCD\xF8\xBB\xC6\x07\xF9\x0C\xB2\xC5\xD4dsolcC\0\x08\x1C\x003Please set the guard manually through the Safe UI\xA2dipfsX\"\x12 X\xAE\xB2\xF8\x9C\x16o\xD2\xE6(\x96\x1F\x192\xA1\x0F\xBC\x9B\xA4\xDC!j7DI\x0CEvN\xB0\x8D\xFCdsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `IS_SCRIPT()` and selector `0xf8ccbf47`.
```solidity
function IS_SCRIPT() external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTCall {}
    ///Container type for the return parameters of the [`IS_SCRIPT()`](IS_SCRIPTCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct IS_SCRIPTReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTCall> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<IS_SCRIPTReturn> for UnderlyingRustTuple<'_> {
                fn from(value: IS_SCRIPTReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for IS_SCRIPTReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for IS_SCRIPTCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = IS_SCRIPTReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "IS_SCRIPT()";
            const SELECTOR: [u8; 4] = [248u8, 204u8, 191u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `run()` and selector `0xc0406226`.
```solidity
function run() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runCall {}
    ///Container type for the return parameters of the [`run()`](runCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct runReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runCall> for UnderlyingRustTuple<'_> {
                fn from(value: runCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<runReturn> for UnderlyingRustTuple<'_> {
                fn from(value: runReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for runReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for runCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = runReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "run()";
            const SELECTOR: [u8; 4] = [192u8, 64u8, 98u8, 38u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setUp()` and selector `0x0a9254e4`.
```solidity
function setUp() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpCall {}
    ///Container type for the return parameters of the [`setUp()`](setUpCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setUpReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpCall> for UnderlyingRustTuple<'_> {
                fn from(value: setUpCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setUpReturn> for UnderlyingRustTuple<'_> {
                fn from(value: setUpReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setUpReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setUpCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setUpReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setUp()";
            const SELECTOR: [u8; 4] = [10u8, 146u8, 84u8, 228u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`SafeGuardScript`](self) function calls.
    pub enum SafeGuardScriptCalls {
        IS_SCRIPT(IS_SCRIPTCall),
        run(runCall),
        setUp(setUpCall),
    }
    #[automatically_derived]
    impl SafeGuardScriptCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 146u8, 84u8, 228u8],
            [192u8, 64u8, 98u8, 38u8],
            [248u8, 204u8, 191u8, 71u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SafeGuardScriptCalls {
        const NAME: &'static str = "SafeGuardScriptCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::IS_SCRIPT(_) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::run(_) => <runCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::setUp(_) => <setUpCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<SafeGuardScriptCalls>] = &[
                {
                    fn setUp(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeGuardScriptCalls> {
                        <setUpCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SafeGuardScriptCalls::setUp)
                    }
                    setUp
                },
                {
                    fn run(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeGuardScriptCalls> {
                        <runCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SafeGuardScriptCalls::run)
                    }
                    run
                },
                {
                    fn IS_SCRIPT(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeGuardScriptCalls> {
                        <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(SafeGuardScriptCalls::IS_SCRIPT)
                    }
                    IS_SCRIPT
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::IS_SCRIPT(inner) => {
                    <IS_SCRIPTCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::run(inner) => {
                    <runCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::setUp(inner) => {
                    <setUpCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SafeGuardScript`](self) contract instance.

See the [wrapper's documentation](`SafeGuardScriptInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SafeGuardScriptInstance<T, P, N> {
        SafeGuardScriptInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<SafeGuardScriptInstance<T, P, N>>,
    > {
        SafeGuardScriptInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        SafeGuardScriptInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SafeGuardScript`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`SafeGuardScript`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SafeGuardScriptInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SafeGuardScriptInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SafeGuardScriptInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SafeGuardScriptInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`SafeGuardScript`](self) contract instance.

See the [wrapper's documentation](`SafeGuardScriptInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SafeGuardScriptInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SafeGuardScriptInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SafeGuardScriptInstance<T, P, N> {
            SafeGuardScriptInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SafeGuardScriptInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`IS_SCRIPT`] function.
        pub fn IS_SCRIPT(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, IS_SCRIPTCall, N> {
            self.call_builder(&IS_SCRIPTCall {})
        }
        ///Creates a new call builder for the [`run`] function.
        pub fn run(&self) -> alloy_contract::SolCallBuilder<T, &P, runCall, N> {
            self.call_builder(&runCall {})
        }
        ///Creates a new call builder for the [`setUp`] function.
        pub fn setUp(&self) -> alloy_contract::SolCallBuilder<T, &P, setUpCall, N> {
            self.call_builder(&setUpCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > SafeGuardScriptInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
