/**

Generated by the following Solidity interface...
```solidity
interface SafeProxyFactory {
    event ProxyCreation(address indexed proxy, address singleton);

    function createChainSpecificProxyWithNonce(address _singleton, bytes memory initializer, uint256 saltNonce) external returns (address proxy);
    function createProxyWithCallback(address _singleton, bytes memory initializer, uint256 saltNonce, address callback) external returns (address proxy);
    function createProxyWithNonce(address _singleton, bytes memory initializer, uint256 saltNonce) external returns (address proxy);
    function getChainId() external view returns (uint256);
    function proxyCreationCode() external pure returns (bytes memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "createChainSpecificProxyWithNonce",
    "inputs": [
      {
        "name": "_singleton",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "initializer",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "saltNonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "proxy",
        "type": "address",
        "internalType": "contract SafeProxy"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "createProxyWithCallback",
    "inputs": [
      {
        "name": "_singleton",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "initializer",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "saltNonce",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "callback",
        "type": "address",
        "internalType": "contract IProxyCreationCallback"
      }
    ],
    "outputs": [
      {
        "name": "proxy",
        "type": "address",
        "internalType": "contract SafeProxy"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "createProxyWithNonce",
    "inputs": [
      {
        "name": "_singleton",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "initializer",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "saltNonce",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "proxy",
        "type": "address",
        "internalType": "contract SafeProxy"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "getChainId",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proxyCreationCode",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "event",
    "name": "ProxyCreation",
    "inputs": [
      {
        "name": "proxy",
        "type": "address",
        "indexed": true,
        "internalType": "contract SafeProxy"
      },
      {
        "name": "singleton",
        "type": "address",
        "indexed": false,
        "internalType": "address"
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod SafeProxyFactory {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b5061078c8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610055575f3560e01c80631688f0b9146100595780633408e4701461008957806353e5d93514610097578063d18af54d146100ac578063ec9e80bb146100bf575b5f5ffd5b61006c610067366004610472565b6100d2565b6040516001600160a01b0390911681526020015b60405180910390f35b604051468152602001610080565b61009f610166565b6040516100809190610515565b61006c6100ba36600461052e565b610190565b61006c6100cd366004610472565b61025f565b5f5f8380519060200120836040516020016100f7929190918252602082015260400190565b60405160208183030381529060405280519060200120905061011a858583610290565b6040516001600160a01b038781168252919350908316907f4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e2359060200160405180910390a2509392505050565b606060405180602001610178906103af565b601f1982820381018352601f90910116604052919050565b5f5f83836040516020016101c092919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b604051602081830303815290604052805190602001205f1c90506101e58686836100d2565b91506001600160a01b03831615610256576040516303ca56a360e31b81526001600160a01b03841690631e52b518906102289085908a908a908a90600401610596565b5f604051808303815f87803b15801561023f575f5ffd5b505af1158015610251573d5f5f3e3d5ffd5b505050505b50949350505050565b5f5f8380519060200120836102714690565b60408051602081019490945283019190915260608201526080016100f7565b5f833b6102e45760405162461bcd60e51b815260206004820152601f60248201527f53696e676c65746f6e20636f6e7472616374206e6f74206465706c6f7965640060448201526064015b60405180910390fd5b5f604051806020016102f5906103af565b601f1982820381018352601f90910116604081905261032291906001600160a01b038816906020016105d2565b6040516020818303038152906040529050828151826020015ff591506001600160a01b03821661038a5760405162461bcd60e51b815260206004820152601360248201527210dc99585d194c8818d85b1b0819985a5b1959606a1b60448201526064016102db565b8351156103a7575f5f5f8651602088015f875af1036103a7575f5ffd5b509392505050565b610163806105f483390190565b6001600160a01b03811681146103d0575f5ffd5b50565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126103f6575f5ffd5b813567ffffffffffffffff811115610410576104106103d3565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561043f5761043f6103d3565b604052818152838201602001851015610456575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f60608486031215610484575f5ffd5b833561048f816103bc565b9250602084013567ffffffffffffffff8111156104aa575f5ffd5b6104b6868287016103e7565b93969395505050506040919091013590565b5f5b838110156104e25781810151838201526020016104ca565b50505f910152565b5f81518084526105018160208601602086016104c8565b601f01601f19169290920160200192915050565b602081525f61052760208301846104ea565b9392505050565b5f5f5f5f60808587031215610541575f5ffd5b843561054c816103bc565b9350602085013567ffffffffffffffff811115610567575f5ffd5b610573878288016103e7565b93505060408501359150606085013561058b816103bc565b939692955090935050565b6001600160a01b038581168252841660208201526080604082018190525f906105c1908301856104ea565b905082606083015295945050505050565b5f83516105e38184602088016104c8565b919091019182525060200191905056fe6080604052348015600e575f5ffd5b50604051610163380380610163833981016040819052602b9160b2565b6001600160a01b038116608f5760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b606482015260840160405180910390fd5b5f80546001600160a01b0319166001600160a01b039290921691909117905560dd565b5f6020828403121560c1575f5ffd5b81516001600160a01b038116811460d6575f5ffd5b9392505050565b607a806100e95f395ff3fe60806040525f80546001600160a01b03169035632cf35bc960e11b01602657805f5260205ff35b365f5f375f5f365f845af490503d5f5f3e80603f573d5ffd5b503d5ff3fea26469706673582212208792944153ebe3aeb2776b0b06046a50565f3c12e0a6dedd2d88c7f52c07650464736f6c634300081c0033a26469706673582212205a169106ce2a2752e8dc3c1b39bb339cd0ad7be87c5e88738ac77998c2d8ebc664736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x07\x8C\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0UW_5`\xE0\x1C\x80c\x16\x88\xF0\xB9\x14a\0YW\x80c4\x08\xE4p\x14a\0\x89W\x80cS\xE5\xD95\x14a\0\x97W\x80c\xD1\x8A\xF5M\x14a\0\xACW\x80c\xEC\x9E\x80\xBB\x14a\0\xBFW[__\xFD[a\0la\0g6`\x04a\x04rV[a\0\xD2V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`@QF\x81R` \x01a\0\x80V[a\0\x9Fa\x01fV[`@Qa\0\x80\x91\x90a\x05\x15V[a\0la\0\xBA6`\x04a\x05.V[a\x01\x90V[a\0la\0\xCD6`\x04a\x04rV[a\x02_V[__\x83\x80Q\x90` \x01 \x83`@Q` \x01a\0\xF7\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x01\x1A\x85\x85\x83a\x02\x90V[`@Q`\x01`\x01`\xA0\x1B\x03\x87\x81\x16\x82R\x91\x93P\x90\x83\x16\x90\x7FOQ\xFA\xF6\xC4V\x1F\xF9_\x06vW\xE449\xF0\xF8V\xD9|\x04\xD9\xEC\x90p\xA6\x19\x9A\xD4\x18\xE25\x90` \x01`@Q\x80\x91\x03\x90\xA2P\x93\x92PPPV[```@Q\x80` \x01a\x01x\x90a\x03\xAFV[`\x1F\x19\x82\x82\x03\x81\x01\x83R`\x1F\x90\x91\x01\x16`@R\x91\x90PV[__\x83\x83`@Q` \x01a\x01\xC0\x92\x91\x90\x91\x82R``\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01R`4\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 _\x1C\x90Pa\x01\xE5\x86\x86\x83a\0\xD2V[\x91P`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\x02VW`@Qc\x03\xCAV\xA3`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c\x1ER\xB5\x18\x90a\x02(\x90\x85\x90\x8A\x90\x8A\x90\x8A\x90`\x04\x01a\x05\x96V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02?W__\xFD[PZ\xF1\x15\x80\x15a\x02QW=__>=_\xFD[PPPP[P\x94\x93PPPPV[__\x83\x80Q\x90` \x01 \x83a\x02qF\x90V[`@\x80Q` \x81\x01\x94\x90\x94R\x83\x01\x91\x90\x91R``\x82\x01R`\x80\x01a\0\xF7V[_\x83;a\x02\xE4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FSingleton contract not deployed\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_`@Q\x80` \x01a\x02\xF5\x90a\x03\xAFV[`\x1F\x19\x82\x82\x03\x81\x01\x83R`\x1F\x90\x91\x01\x16`@\x81\x90Ra\x03\"\x91\x90`\x01`\x01`\xA0\x1B\x03\x88\x16\x90` \x01a\x05\xD2V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x82\x81Q\x82` \x01_\xF5\x91P`\x01`\x01`\xA0\x1B\x03\x82\x16a\x03\x8AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01Rr\x10\xDC\x99X]\x19L\x88\x18\xD8[\x1B\x08\x19\x98Z[\x19Y`j\x1B`D\x82\x01R`d\x01a\x02\xDBV[\x83Q\x15a\x03\xA7W___\x86Q` \x88\x01_\x87Z\xF1\x03a\x03\xA7W__\xFD[P\x93\x92PPPV[a\x01c\x80a\x05\xF4\x839\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xD0W__\xFD[PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\x03\xF6W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x10Wa\x04\x10a\x03\xD3V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x04?Wa\x04?a\x03\xD3V[`@R\x81\x81R\x83\x82\x01` \x01\x85\x10\x15a\x04VW__\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[___``\x84\x86\x03\x12\x15a\x04\x84W__\xFD[\x835a\x04\x8F\x81a\x03\xBCV[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xAAW__\xFD[a\x04\xB6\x86\x82\x87\x01a\x03\xE7V[\x93\x96\x93\x95PPPP`@\x91\x90\x91\x015\x90V[_[\x83\x81\x10\x15a\x04\xE2W\x81\x81\x01Q\x83\x82\x01R` \x01a\x04\xCAV[PP_\x91\x01RV[_\x81Q\x80\x84Ra\x05\x01\x81` \x86\x01` \x86\x01a\x04\xC8V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x05'` \x83\x01\x84a\x04\xEAV[\x93\x92PPPV[____`\x80\x85\x87\x03\x12\x15a\x05AW__\xFD[\x845a\x05L\x81a\x03\xBCV[\x93P` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05gW__\xFD[a\x05s\x87\x82\x88\x01a\x03\xE7V[\x93PP`@\x85\x015\x91P``\x85\x015a\x05\x8B\x81a\x03\xBCV[\x93\x96\x92\x95P\x90\x93PPV[`\x01`\x01`\xA0\x1B\x03\x85\x81\x16\x82R\x84\x16` \x82\x01R`\x80`@\x82\x01\x81\x90R_\x90a\x05\xC1\x90\x83\x01\x85a\x04\xEAV[\x90P\x82``\x83\x01R\x95\x94PPPPPV[_\x83Qa\x05\xE3\x81\x84` \x88\x01a\x04\xC8V[\x91\x90\x91\x01\x91\x82RP` \x01\x91\x90PV\xFE`\x80`@R4\x80\x15`\x0EW__\xFD[P`@Qa\x01c8\x03\x80a\x01c\x839\x81\x01`@\x81\x90R`+\x91`\xB2V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\x8FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FInvalid singleton address provid`D\x82\x01Ra\x19Y`\xF2\x1B`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\xDDV[_` \x82\x84\x03\x12\x15`\xC1W__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14`\xD6W__\xFD[\x93\x92PPPV[`z\x80a\0\xE9_9_\xF3\xFE`\x80`@R_\x80T`\x01`\x01`\xA0\x1B\x03\x16\x905c,\xF3[\xC9`\xE1\x1B\x01`&W\x80_R` _\xF3[6__7__6_\x84Z\xF4\x90P=__>\x80`?W=_\xFD[P=_\xF3\xFE\xA2dipfsX\"\x12 \x87\x92\x94AS\xEB\xE3\xAE\xB2wk\x0B\x06\x04jPV_<\x12\xE0\xA6\xDE\xDD-\x88\xC7\xF5,\x07e\x04dsolcC\0\x08\x1C\x003\xA2dipfsX\"\x12 Z\x16\x91\x06\xCE*'R\xE8\xDC<\x1B9\xBB3\x9C\xD0\xAD{\xE8|^\x88s\x8A\xC7y\x98\xC2\xD8\xEB\xC6dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610055575f3560e01c80631688f0b9146100595780633408e4701461008957806353e5d93514610097578063d18af54d146100ac578063ec9e80bb146100bf575b5f5ffd5b61006c610067366004610472565b6100d2565b6040516001600160a01b0390911681526020015b60405180910390f35b604051468152602001610080565b61009f610166565b6040516100809190610515565b61006c6100ba36600461052e565b610190565b61006c6100cd366004610472565b61025f565b5f5f8380519060200120836040516020016100f7929190918252602082015260400190565b60405160208183030381529060405280519060200120905061011a858583610290565b6040516001600160a01b038781168252919350908316907f4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e2359060200160405180910390a2509392505050565b606060405180602001610178906103af565b601f1982820381018352601f90910116604052919050565b5f5f83836040516020016101c092919091825260601b6bffffffffffffffffffffffff1916602082015260340190565b604051602081830303815290604052805190602001205f1c90506101e58686836100d2565b91506001600160a01b03831615610256576040516303ca56a360e31b81526001600160a01b03841690631e52b518906102289085908a908a908a90600401610596565b5f604051808303815f87803b15801561023f575f5ffd5b505af1158015610251573d5f5f3e3d5ffd5b505050505b50949350505050565b5f5f8380519060200120836102714690565b60408051602081019490945283019190915260608201526080016100f7565b5f833b6102e45760405162461bcd60e51b815260206004820152601f60248201527f53696e676c65746f6e20636f6e7472616374206e6f74206465706c6f7965640060448201526064015b60405180910390fd5b5f604051806020016102f5906103af565b601f1982820381018352601f90910116604081905261032291906001600160a01b038816906020016105d2565b6040516020818303038152906040529050828151826020015ff591506001600160a01b03821661038a5760405162461bcd60e51b815260206004820152601360248201527210dc99585d194c8818d85b1b0819985a5b1959606a1b60448201526064016102db565b8351156103a7575f5f5f8651602088015f875af1036103a7575f5ffd5b509392505050565b610163806105f483390190565b6001600160a01b03811681146103d0575f5ffd5b50565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126103f6575f5ffd5b813567ffffffffffffffff811115610410576104106103d3565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561043f5761043f6103d3565b604052818152838201602001851015610456575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f60608486031215610484575f5ffd5b833561048f816103bc565b9250602084013567ffffffffffffffff8111156104aa575f5ffd5b6104b6868287016103e7565b93969395505050506040919091013590565b5f5b838110156104e25781810151838201526020016104ca565b50505f910152565b5f81518084526105018160208601602086016104c8565b601f01601f19169290920160200192915050565b602081525f61052760208301846104ea565b9392505050565b5f5f5f5f60808587031215610541575f5ffd5b843561054c816103bc565b9350602085013567ffffffffffffffff811115610567575f5ffd5b610573878288016103e7565b93505060408501359150606085013561058b816103bc565b939692955090935050565b6001600160a01b038581168252841660208201526080604082018190525f906105c1908301856104ea565b905082606083015295945050505050565b5f83516105e38184602088016104c8565b919091019182525060200191905056fe6080604052348015600e575f5ffd5b50604051610163380380610163833981016040819052602b9160b2565b6001600160a01b038116608f5760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b606482015260840160405180910390fd5b5f80546001600160a01b0319166001600160a01b039290921691909117905560dd565b5f6020828403121560c1575f5ffd5b81516001600160a01b038116811460d6575f5ffd5b9392505050565b607a806100e95f395ff3fe60806040525f80546001600160a01b03169035632cf35bc960e11b01602657805f5260205ff35b365f5f375f5f365f845af490503d5f5f3e80603f573d5ffd5b503d5ff3fea26469706673582212208792944153ebe3aeb2776b0b06046a50565f3c12e0a6dedd2d88c7f52c07650464736f6c634300081c0033a26469706673582212205a169106ce2a2752e8dc3c1b39bb339cd0ad7be87c5e88738ac77998c2d8ebc664736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0UW_5`\xE0\x1C\x80c\x16\x88\xF0\xB9\x14a\0YW\x80c4\x08\xE4p\x14a\0\x89W\x80cS\xE5\xD95\x14a\0\x97W\x80c\xD1\x8A\xF5M\x14a\0\xACW\x80c\xEC\x9E\x80\xBB\x14a\0\xBFW[__\xFD[a\0la\0g6`\x04a\x04rV[a\0\xD2V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[`@QF\x81R` \x01a\0\x80V[a\0\x9Fa\x01fV[`@Qa\0\x80\x91\x90a\x05\x15V[a\0la\0\xBA6`\x04a\x05.V[a\x01\x90V[a\0la\0\xCD6`\x04a\x04rV[a\x02_V[__\x83\x80Q\x90` \x01 \x83`@Q` \x01a\0\xF7\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 \x90Pa\x01\x1A\x85\x85\x83a\x02\x90V[`@Q`\x01`\x01`\xA0\x1B\x03\x87\x81\x16\x82R\x91\x93P\x90\x83\x16\x90\x7FOQ\xFA\xF6\xC4V\x1F\xF9_\x06vW\xE449\xF0\xF8V\xD9|\x04\xD9\xEC\x90p\xA6\x19\x9A\xD4\x18\xE25\x90` \x01`@Q\x80\x91\x03\x90\xA2P\x93\x92PPPV[```@Q\x80` \x01a\x01x\x90a\x03\xAFV[`\x1F\x19\x82\x82\x03\x81\x01\x83R`\x1F\x90\x91\x01\x16`@R\x91\x90PV[__\x83\x83`@Q` \x01a\x01\xC0\x92\x91\x90\x91\x82R``\x1Bk\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01R`4\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 _\x1C\x90Pa\x01\xE5\x86\x86\x83a\0\xD2V[\x91P`\x01`\x01`\xA0\x1B\x03\x83\x16\x15a\x02VW`@Qc\x03\xCAV\xA3`\xE3\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x84\x16\x90c\x1ER\xB5\x18\x90a\x02(\x90\x85\x90\x8A\x90\x8A\x90\x8A\x90`\x04\x01a\x05\x96V[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x02?W__\xFD[PZ\xF1\x15\x80\x15a\x02QW=__>=_\xFD[PPPP[P\x94\x93PPPPV[__\x83\x80Q\x90` \x01 \x83a\x02qF\x90V[`@\x80Q` \x81\x01\x94\x90\x94R\x83\x01\x91\x90\x91R``\x82\x01R`\x80\x01a\0\xF7V[_\x83;a\x02\xE4W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FSingleton contract not deployed\0`D\x82\x01R`d\x01[`@Q\x80\x91\x03\x90\xFD[_`@Q\x80` \x01a\x02\xF5\x90a\x03\xAFV[`\x1F\x19\x82\x82\x03\x81\x01\x83R`\x1F\x90\x91\x01\x16`@\x81\x90Ra\x03\"\x91\x90`\x01`\x01`\xA0\x1B\x03\x88\x16\x90` \x01a\x05\xD2V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P\x82\x81Q\x82` \x01_\xF5\x91P`\x01`\x01`\xA0\x1B\x03\x82\x16a\x03\x8AW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x13`$\x82\x01Rr\x10\xDC\x99X]\x19L\x88\x18\xD8[\x1B\x08\x19\x98Z[\x19Y`j\x1B`D\x82\x01R`d\x01a\x02\xDBV[\x83Q\x15a\x03\xA7W___\x86Q` \x88\x01_\x87Z\xF1\x03a\x03\xA7W__\xFD[P\x93\x92PPPV[a\x01c\x80a\x05\xF4\x839\x01\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03\xD0W__\xFD[PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\x03\xF6W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\x10Wa\x04\x10a\x03\xD3V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x04?Wa\x04?a\x03\xD3V[`@R\x81\x81R\x83\x82\x01` \x01\x85\x10\x15a\x04VW__\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[___``\x84\x86\x03\x12\x15a\x04\x84W__\xFD[\x835a\x04\x8F\x81a\x03\xBCV[\x92P` \x84\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x04\xAAW__\xFD[a\x04\xB6\x86\x82\x87\x01a\x03\xE7V[\x93\x96\x93\x95PPPP`@\x91\x90\x91\x015\x90V[_[\x83\x81\x10\x15a\x04\xE2W\x81\x81\x01Q\x83\x82\x01R` \x01a\x04\xCAV[PP_\x91\x01RV[_\x81Q\x80\x84Ra\x05\x01\x81` \x86\x01` \x86\x01a\x04\xC8V[`\x1F\x01`\x1F\x19\x16\x92\x90\x92\x01` \x01\x92\x91PPV[` \x81R_a\x05'` \x83\x01\x84a\x04\xEAV[\x93\x92PPPV[____`\x80\x85\x87\x03\x12\x15a\x05AW__\xFD[\x845a\x05L\x81a\x03\xBCV[\x93P` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x05gW__\xFD[a\x05s\x87\x82\x88\x01a\x03\xE7V[\x93PP`@\x85\x015\x91P``\x85\x015a\x05\x8B\x81a\x03\xBCV[\x93\x96\x92\x95P\x90\x93PPV[`\x01`\x01`\xA0\x1B\x03\x85\x81\x16\x82R\x84\x16` \x82\x01R`\x80`@\x82\x01\x81\x90R_\x90a\x05\xC1\x90\x83\x01\x85a\x04\xEAV[\x90P\x82``\x83\x01R\x95\x94PPPPPV[_\x83Qa\x05\xE3\x81\x84` \x88\x01a\x04\xC8V[\x91\x90\x91\x01\x91\x82RP` \x01\x91\x90PV\xFE`\x80`@R4\x80\x15`\x0EW__\xFD[P`@Qa\x01c8\x03\x80a\x01c\x839\x81\x01`@\x81\x90R`+\x91`\xB2V[`\x01`\x01`\xA0\x1B\x03\x81\x16`\x8FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FInvalid singleton address provid`D\x82\x01Ra\x19Y`\xF2\x1B`d\x82\x01R`\x84\x01`@Q\x80\x91\x03\x90\xFD[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90U`\xDDV[_` \x82\x84\x03\x12\x15`\xC1W__\xFD[\x81Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14`\xD6W__\xFD[\x93\x92PPPV[`z\x80a\0\xE9_9_\xF3\xFE`\x80`@R_\x80T`\x01`\x01`\xA0\x1B\x03\x16\x905c,\xF3[\xC9`\xE1\x1B\x01`&W\x80_R` _\xF3[6__7__6_\x84Z\xF4\x90P=__>\x80`?W=_\xFD[P=_\xF3\xFE\xA2dipfsX\"\x12 \x87\x92\x94AS\xEB\xE3\xAE\xB2wk\x0B\x06\x04jPV_<\x12\xE0\xA6\xDE\xDD-\x88\xC7\xF5,\x07e\x04dsolcC\0\x08\x1C\x003\xA2dipfsX\"\x12 Z\x16\x91\x06\xCE*'R\xE8\xDC<\x1B9\xBB3\x9C\xD0\xAD{\xE8|^\x88s\x8A\xC7y\x98\xC2\xD8\xEB\xC6dsolcC\0\x08\x1C\x003",
    );
    /**Event with signature `ProxyCreation(address,address)` and selector `0x4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e235`.
    ```solidity
    event ProxyCreation(address indexed proxy, address singleton);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    #[derive(Clone)]
    pub struct ProxyCreation {
        #[allow(missing_docs)]
        pub proxy: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub singleton: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProxyCreation {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type DataToken<'a> = <Self::DataTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            type TopicList =
                (alloy_sol_types::sol_data::FixedBytes<32>, alloy::sol_types::sol_data::Address);
            const SIGNATURE: &'static str = "ProxyCreation(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 =
                alloy_sol_types::private::B256::new([
                    79u8, 81u8, 250u8, 246u8, 196u8, 86u8, 31u8, 249u8, 95u8, 6u8, 118u8, 87u8,
                    228u8, 52u8, 57u8, 240u8, 248u8, 86u8, 217u8, 124u8, 4u8, 217u8, 236u8, 144u8,
                    112u8, 166u8, 25u8, 154u8, 212u8, 24u8, 226u8, 53u8,
                ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { proxy: topics.1, singleton: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(alloy_sol_types::Error::invalid_event_signature_hash(
                        Self::SIGNATURE,
                        topics.0,
                        Self::SIGNATURE_HASH,
                    ));
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                    &self.singleton,
                ),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.proxy.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(Self::SIGNATURE_HASH);
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.proxy,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProxyCreation {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProxyCreation> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProxyCreation) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Function with signature `createChainSpecificProxyWithNonce(address,bytes,uint256)` and selector `0xec9e80bb`.
    ```solidity
    function createChainSpecificProxyWithNonce(address _singleton, bytes memory initializer, uint256 saltNonce) external returns (address proxy);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createChainSpecificProxyWithNonceCall {
        pub _singleton: alloy::sol_types::private::Address,
        pub initializer: alloy::sol_types::private::Bytes,
        pub saltNonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`createChainSpecificProxyWithNonce(address,bytes,uint256)`](createChainSpecificProxyWithNonceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createChainSpecificProxyWithNonceReturn {
        pub proxy: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createChainSpecificProxyWithNonceCall> for UnderlyingRustTuple<'_> {
                fn from(value: createChainSpecificProxyWithNonceCall) -> Self {
                    (value._singleton, value.initializer, value.saltNonce)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createChainSpecificProxyWithNonceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _singleton: tuple.0, initializer: tuple.1, saltNonce: tuple.2 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createChainSpecificProxyWithNonceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createChainSpecificProxyWithNonceReturn) -> Self {
                    (value.proxy,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createChainSpecificProxyWithNonceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proxy: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createChainSpecificProxyWithNonceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = createChainSpecificProxyWithNonceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "createChainSpecificProxyWithNonce(address,bytes,uint256)";
            const SELECTOR: [u8; 4] = [236u8, 158u8, 128u8, 187u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._singleton,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.initializer,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.saltNonce,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `createProxyWithCallback(address,bytes,uint256,address)` and selector `0xd18af54d`.
    ```solidity
    function createProxyWithCallback(address _singleton, bytes memory initializer, uint256 saltNonce, address callback) external returns (address proxy);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createProxyWithCallbackCall {
        pub _singleton: alloy::sol_types::private::Address,
        pub initializer: alloy::sol_types::private::Bytes,
        pub saltNonce: alloy::sol_types::private::primitives::aliases::U256,
        pub callback: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`createProxyWithCallback(address,bytes,uint256,address)`](createProxyWithCallbackCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createProxyWithCallbackReturn {
        pub proxy: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createProxyWithCallbackCall> for UnderlyingRustTuple<'_> {
                fn from(value: createProxyWithCallbackCall) -> Self {
                    (value._singleton, value.initializer, value.saltNonce, value.callback)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createProxyWithCallbackCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _singleton: tuple.0,
                        initializer: tuple.1,
                        saltNonce: tuple.2,
                        callback: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createProxyWithCallbackReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createProxyWithCallbackReturn) -> Self {
                    (value.proxy,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createProxyWithCallbackReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proxy: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createProxyWithCallbackCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = createProxyWithCallbackReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str =
                "createProxyWithCallback(address,bytes,uint256,address)";
            const SELECTOR: [u8; 4] = [209u8, 138u8, 245u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._singleton,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.initializer,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.saltNonce,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.callback,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `createProxyWithNonce(address,bytes,uint256)` and selector `0x1688f0b9`.
    ```solidity
    function createProxyWithNonce(address _singleton, bytes memory initializer, uint256 saltNonce) external returns (address proxy);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createProxyWithNonceCall {
        pub _singleton: alloy::sol_types::private::Address,
        pub initializer: alloy::sol_types::private::Bytes,
        pub saltNonce: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`createProxyWithNonce(address,bytes,uint256)`](createProxyWithNonceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct createProxyWithNonceReturn {
        pub proxy: alloy::sol_types::private::Address,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createProxyWithNonceCall> for UnderlyingRustTuple<'_> {
                fn from(value: createProxyWithNonceCall) -> Self {
                    (value._singleton, value.initializer, value.saltNonce)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createProxyWithNonceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _singleton: tuple.0, initializer: tuple.1, saltNonce: tuple.2 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<createProxyWithNonceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: createProxyWithNonceReturn) -> Self {
                    (value.proxy,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for createProxyWithNonceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proxy: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for createProxyWithNonceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = createProxyWithNonceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "createProxyWithNonce(address,bytes,uint256)";
            const SELECTOR: [u8; 4] = [22u8, 136u8, 240u8, 185u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._singleton,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.initializer,
                    ),
                    <alloy::sol_types::sol_data::Uint<256> as alloy_sol_types::SolType>::tokenize(
                        &self.saltNonce,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `getChainId()` and selector `0x3408e470`.
    ```solidity
    function getChainId() external view returns (uint256);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getChainIdCall {}
    ///Container type for the return parameters of the [`getChainId()`](getChainIdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getChainIdReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainIdCall> for UnderlyingRustTuple<'_> {
                fn from(value: getChainIdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getChainIdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::primitives::aliases::U256,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getChainIdReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getChainIdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getChainIdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getChainIdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = getChainIdReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getChainId()";
            const SELECTOR: [u8; 4] = [52u8, 8u8, 228u8, 112u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    /**Function with signature `proxyCreationCode()` and selector `0x53e5d935`.
    ```solidity
    function proxyCreationCode() external pure returns (bytes memory);
    ```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxyCreationCodeCall {}
    ///Container type for the return parameters of the [`proxyCreationCode()`](proxyCreationCodeCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proxyCreationCodeReturn {
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields, clippy::style)]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxyCreationCodeCall> for UnderlyingRustTuple<'_> {
                fn from(value: proxyCreationCodeCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxyCreationCodeCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(_t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proxyCreationCodeReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proxyCreationCodeReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proxyCreationCodeReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proxyCreationCodeCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<'a> as alloy_sol_types::SolType>::Token<'a>;
            type Return = proxyCreationCodeReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<'a> as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proxyCreationCode()";
            const SELECTOR: [u8; 4] = [83u8, 229u8, 217u8, 53u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<'_> as alloy_sol_types::SolType>::abi_decode_sequence(
                    data, validate,
                )
                .map(Into::into)
            }
        }
    };
    ///Container for all the [`SafeProxyFactory`](self) function calls.
    pub enum SafeProxyFactoryCalls {
        createChainSpecificProxyWithNonce(createChainSpecificProxyWithNonceCall),
        createProxyWithCallback(createProxyWithCallbackCall),
        createProxyWithNonce(createProxyWithNonceCall),
        getChainId(getChainIdCall),
        proxyCreationCode(proxyCreationCodeCall),
    }
    #[automatically_derived]
    impl SafeProxyFactoryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [22u8, 136u8, 240u8, 185u8],
            [52u8, 8u8, 228u8, 112u8],
            [83u8, 229u8, 217u8, 53u8],
            [209u8, 138u8, 245u8, 77u8],
            [236u8, 158u8, 128u8, 187u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for SafeProxyFactoryCalls {
        const NAME: &'static str = "SafeProxyFactoryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 5usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::createChainSpecificProxyWithNonce(_) => {
                    <createChainSpecificProxyWithNonceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::createProxyWithCallback(_) => {
                    <createProxyWithCallbackCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::createProxyWithNonce(_) => {
                    <createProxyWithNonceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getChainId(_) => <getChainIdCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::proxyCreationCode(_) => {
                    <proxyCreationCodeCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            )
                -> alloy_sol_types::Result<SafeProxyFactoryCalls>] = &[
                {
                    fn createProxyWithNonce(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeProxyFactoryCalls> {
                        <createProxyWithNonceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SafeProxyFactoryCalls::createProxyWithNonce)
                    }
                    createProxyWithNonce
                },
                {
                    fn getChainId(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeProxyFactoryCalls> {
                        <getChainIdCall as alloy_sol_types::SolCall>::abi_decode_raw(data, validate)
                            .map(SafeProxyFactoryCalls::getChainId)
                    }
                    getChainId
                },
                {
                    fn proxyCreationCode(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeProxyFactoryCalls> {
                        <proxyCreationCodeCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SafeProxyFactoryCalls::proxyCreationCode)
                    }
                    proxyCreationCode
                },
                {
                    fn createProxyWithCallback(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeProxyFactoryCalls> {
                        <createProxyWithCallbackCall as alloy_sol_types::SolCall>::abi_decode_raw(
                            data, validate,
                        )
                        .map(SafeProxyFactoryCalls::createProxyWithCallback)
                    }
                    createProxyWithCallback
                },
                {
                    fn createChainSpecificProxyWithNonce(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<SafeProxyFactoryCalls> {
                        <createChainSpecificProxyWithNonceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(
                                SafeProxyFactoryCalls::createChainSpecificProxyWithNonce,
                            )
                    }
                    createChainSpecificProxyWithNonce
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(alloy_sol_types::Error::unknown_selector(
                    <Self as alloy_sol_types::SolInterface>::NAME,
                    selector,
                ));
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::createChainSpecificProxyWithNonce(inner) => {
                    <createChainSpecificProxyWithNonceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::createProxyWithCallback(inner) => {
                    <createProxyWithCallbackCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::createProxyWithNonce(inner) => {
                    <createProxyWithNonceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getChainId(inner) => {
                    <getChainIdCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::proxyCreationCode(inner) => {
                    <proxyCreationCodeCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::createChainSpecificProxyWithNonce(inner) => {
                    <createChainSpecificProxyWithNonceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createProxyWithCallback(inner) => {
                    <createProxyWithCallbackCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::createProxyWithNonce(inner) => {
                    <createProxyWithNonceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getChainId(inner) => {
                    <getChainIdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proxyCreationCode(inner) => {
                    <proxyCreationCodeCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`SafeProxyFactory`](self) events.
    pub enum SafeProxyFactoryEvents {
        ProxyCreation(ProxyCreation),
    }
    #[automatically_derived]
    impl SafeProxyFactoryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[[
            79u8, 81u8, 250u8, 246u8, 196u8, 86u8, 31u8, 249u8, 95u8, 6u8, 118u8, 87u8, 228u8,
            52u8, 57u8, 240u8, 248u8, 86u8, 217u8, 124u8, 4u8, 217u8, 236u8, 144u8, 112u8, 166u8,
            25u8, 154u8, 212u8, 24u8, 226u8, 53u8,
        ]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for SafeProxyFactoryEvents {
        const NAME: &'static str = "SafeProxyFactoryEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ProxyCreation as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ProxyCreation as alloy_sol_types::SolEvent>::decode_raw_log(
                        topics, data, validate,
                    )
                    .map(Self::ProxyCreation)
                }
                _ => alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                    name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                    log: alloy_sol_types::private::Box::new(
                        alloy_sol_types::private::LogData::new_unchecked(
                            topics.to_vec(),
                            data.to_vec().into(),
                        ),
                    ),
                }),
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for SafeProxyFactoryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProxyCreation(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProxyCreation(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`SafeProxyFactory`](self) contract instance.

    See the [wrapper's documentation](`SafeProxyFactoryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> SafeProxyFactoryInstance<T, P, N> {
        SafeProxyFactoryInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

    Returns a new instance of the contract, if the deployment was successful.

    For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<Output = alloy_contract::Result<SafeProxyFactoryInstance<T, P, N>>>
    {
        SafeProxyFactoryInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
    and constructor arguments, if any.

    This is a simple wrapper around creating a `RawCallBuilder` with the data set to
    the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        SafeProxyFactoryInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`SafeProxyFactory`](self) instance.

    Contains type-safe methods for interacting with an on-chain instance of the
    [`SafeProxyFactory`](self) contract located at a given `address`, using a given
    provider `P`.

    If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
    documentation on how to provide it), the `deploy` and `deploy_builder` methods can
    be used to deploy a new instance of the contract.

    See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct SafeProxyFactoryInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for SafeProxyFactoryInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("SafeProxyFactoryInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SafeProxyFactoryInstance<T, P, N>
    {
        /**Creates a new wrapper around an on-chain [`SafeProxyFactory`](self) contract instance.

        See the [wrapper's documentation](`SafeProxyFactoryInstance`) for more details.*/
        #[inline]
        pub const fn new(address: alloy_sol_types::private::Address, provider: P) -> Self {
            Self { address, provider, _network_transport: ::core::marker::PhantomData }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

        Returns a new instance of the contract, if the deployment was successful.

        For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<SafeProxyFactoryInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
        and constructor arguments, if any.

        This is a simple wrapper around creating a `RawCallBuilder` with the data set to
        the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> SafeProxyFactoryInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> SafeProxyFactoryInstance<T, P, N> {
            SafeProxyFactoryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SafeProxyFactoryInstance<T, P, N>
    {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`createChainSpecificProxyWithNonce`] function.
        pub fn createChainSpecificProxyWithNonce(
            &self,
            _singleton: alloy::sol_types::private::Address,
            initializer: alloy::sol_types::private::Bytes,
            saltNonce: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, createChainSpecificProxyWithNonceCall, N>
        {
            self.call_builder(&createChainSpecificProxyWithNonceCall {
                _singleton,
                initializer,
                saltNonce,
            })
        }
        ///Creates a new call builder for the [`createProxyWithCallback`] function.
        pub fn createProxyWithCallback(
            &self,
            _singleton: alloy::sol_types::private::Address,
            initializer: alloy::sol_types::private::Bytes,
            saltNonce: alloy::sol_types::private::primitives::aliases::U256,
            callback: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, createProxyWithCallbackCall, N> {
            self.call_builder(&createProxyWithCallbackCall {
                _singleton,
                initializer,
                saltNonce,
                callback,
            })
        }
        ///Creates a new call builder for the [`createProxyWithNonce`] function.
        pub fn createProxyWithNonce(
            &self,
            _singleton: alloy::sol_types::private::Address,
            initializer: alloy::sol_types::private::Bytes,
            saltNonce: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, createProxyWithNonceCall, N> {
            self.call_builder(&createProxyWithNonceCall { _singleton, initializer, saltNonce })
        }
        ///Creates a new call builder for the [`getChainId`] function.
        pub fn getChainId(&self) -> alloy_contract::SolCallBuilder<T, &P, getChainIdCall, N> {
            self.call_builder(&getChainIdCall {})
        }
        ///Creates a new call builder for the [`proxyCreationCode`] function.
        pub fn proxyCreationCode(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proxyCreationCodeCall, N> {
            self.call_builder(&proxyCreationCodeCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
            T: alloy_contract::private::Transport + ::core::clone::Clone,
            P: alloy_contract::private::Provider<T, N>,
            N: alloy_contract::private::Network,
        > SafeProxyFactoryInstance<T, P, N>
    {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ProxyCreation`] event.
        pub fn ProxyCreation_filter(&self) -> alloy_contract::Event<T, &P, ProxyCreation, N> {
            self.event_filter::<ProxyCreation>()
        }
    }
}
